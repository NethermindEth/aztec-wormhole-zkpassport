{
  "transpiled": true,
  "noir_version": "1.0.0-beta.7+0000000000000000000000000000000000000000",
  "name": "Wormhole",
  "functions": [
    {
      "name": "_publish_message",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "internal"
      ],
      "abi": {
        "parameters": [
          {
            "name": "nonce",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 64
            },
            "visibility": "private"
          },
          {
            "name": "payloads",
            "type": {
              "kind": "array",
              "length": 8,
              "type": {
                "kind": "array",
                "length": 31,
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 8
                }
              }
            },
            "visibility": "private"
          },
          {
            "name": "consistency",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 8
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 64
          },
          "visibility": "public"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "16930197311201387584": {
            "error_kind": "string",
            "string": "Function _publish_message can only be called internally"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBIFHJwAABAMnAgQE+icCBQQAHwoABAAFgEwdAIBMgEwFHQCATYBNAh0AgE6ATgIdAIBPgE8CHQCAUIBQAh0AgFGAUQIdAIBSgFICHQCAU4BTAh0AgFSAVAIdAIBVgFUCHQCAVoBWAh0AgFeAVwIdAIBYgFgCHQCAWYBZAh0AgFqAWgIdAIBbgFsCHQCAXIBcAh0AgF2AXQIdAIBegF4CHQCAX4BfAh0AgGCAYAIdAIBhgGECHQCAYoBiAh0AgGOAYwIdAIBkgGQCHQCAZYBlAh0AgGaAZgIdAIBngGcCHQCAaIBoAh0AgGmAaQIdAIBqgGoCHQCAa4BrAh0AgGyAbAIdAIBtgG0CHQCAboBuAh0AgG+AbwIdAIBwgHACHQCAcYBxAh0AgHKAcgIdAIBzgHMCHQCAdIB0Ah0AgHWAdQIdAIB2gHYCHQCAd4B3Ah0AgHiAeAIdAIB5gHkCHQCAeoB6Ah0AgHuAewIdAIB8gHwCHQCAfYB9Ah0AgH6AfgIdAIB/gH8CHQCAgICAAh0AgIGAgQIdAICCgIICHQCAg4CDAh0AgISAhAIdAICFgIUCHQCAhoCGAh0AgIeAhwIdAICIgIgCHQCAiYCJAh0AgIqAigIdAICLgIsCHQCAjICMAh0AgI2AjQIdAICOgI4CHQCAj4CPAh0AgJCAkAIdAICRgJECHQCAkoCSAh0AgJOAkwIdAICUgJQCHQCAlYCVAh0AgJaAlgIdAICXgJcCHQCAmICYAh0AgJmAmQIdAICagJoCHQCAm4CbAh0AgJyAnAIdAICdgJ0CHQCAnoCeAh0AgJ+AnwIdAICggKACHQCAoYChAh0AgKKAogIdAICjgKMCHQCApICkAh0AgKWApQIdAICmgKYCHQCAp4CnAh0AgKiAqAIdAICpgKkCHQCAqoCqAh0AgKuAqwIdAICsgKwCHQCArYCtAh0AgK6ArgIdAICvgK8CHQCAsICwAh0AgLGAsQIdAICygLICHQCAs4CzAh0AgLSAtAIdAIC1gLUCHQCAtoC2Ah0AgLeAtwIdAIC4gLgCHQCAuYC5Ah0AgLqAugIdAIC7gLsCHQCAvIC8Ah0AgL2AvQIdAIC+gL4CHQCAv4C/Ah0AgMCAwAIdAIDBgMECHQCAwoDCAh0AgMOAwwIdAIDEgMQCHQCAxYDFAh0AgMaAxgIdAIDHgMcCHQCAyIDIAh0AgMmAyQIdAIDKgMoCHQCAy4DLAh0AgMyAzAIdAIDNgM0CHQCAzoDOAh0AgM+AzwIdAIDQgNACHQCA0YDRAh0AgNKA0gIdAIDTgNMCHQCA1IDUAh0AgNWA1QIdAIDWgNYCHQCA14DXAh0AgNiA2AIdAIDZgNkCHQCA2oDaAh0AgNuA2wIdAIDcgNwCHQCA3YDdAh0AgN6A3gIdAIDfgN8CHQCA4IDgAh0AgOGA4QIdAIDigOICHQCA44DjAh0AgOSA5AIdAIDlgOUCHQCA5oDmAh0AgOeA5wIdAIDogOgCHQCA6YDpAh0AgOqA6gIdAIDrgOsCHQCA7IDsAh0AgO2A7QIdAIDugO4CHQCA74DvAh0AgPCA8AIdAIDxgPECHQCA8oDyAh0AgPOA8wIdAID0gPQCHQCA9YD1Ah0AgPaA9gIdAID3gPcCHQCA+ID4Ah0AgPmA+QIdAID6gPoCHQCA+4D7Ah0AgPyA/AIdAID9gP0CHQCA/oD+Ah0AgP+A/wIdAIEAgQACHQCBAYEBAh0AgQKBAgIdAIEDgQMCHQCBBIEEAh0AgQWBBQIdAIEGgQYCHQCBB4EHAh0AgQiBCAIdAIEJgQkCHQCBCoEKAh0AgQuBCwIdAIEMgQwCHQCBDYENAh0AgQ6BDgIdAIEPgQ8CHQCBEIEQAh0AgRGBEQIdAIESgRICHQCBE4ETAh0AgRSBFAIdAIEVgRUCHQCBFoEWAh0AgReBFwIdAIEYgRgCHQCBGYEZAh0AgRqBGgIdAIEbgRsCHQCBHIEcAh0AgR2BHQIdAIEegR4CHQCBH4EfAh0AgSCBIAIdAIEhgSECHQCBIoEiAh0AgSOBIwIdAIEkgSQCHQCBJYElAh0AgSaBJgIdAIEngScCHQCBKIEoAh0AgSmBKQIdAIEqgSoCHQCBK4ErAh0AgSyBLAIdAIEtgS0CHQCBLoEuAh0AgS+BLwIdAIEwgTACHQCBMYExAh0AgTKBMgIdAIEzgTMCHQCBNIE0Ah0AgTWBNQIdAIE2gTYCHQCBN4E3Ah0AgTiBOAIdAIE5gTkCHQCBOoE6Ah0AgTuBOwIdAIE8gTwCHQCBPYE9Ah0AgT6BPgIdAIE/gT8CHQCBQIFAAh0AgUGBQQIdAIFCgUICHQCBQ4FDAh0AgUSBRAIdAIFFgUUCLgiATAABKAIAAgSATScCBQQILQgBBCcCBgQJAAgBBgEnAwQEAQAiBAIGJwIIBAAnAgkEAAAqAggKJwIMBB8tCAELJwINBCAACAENAScDCwQBACILAg0uAgAKgAMuAgANgAQuAgAMgAUlAAAJrwAqBgkMLQ4LDCcCCAQfJwIJBAEAKgIICicCDAQfLQgBCycCDQQgAAgBDQEnAwsEAQAiCwINLgIACoADLgIADYAELgIADIAFJQAACa8AKgYJDC0OCwwnAggEPicCCQQCACoCCAonAgwEHy0IAQsnAg0EIAAIAQ0BJwMLBAEAIgsCDS4CAAqAAy4CAA2ABC4CAAyABSUAAAmvACoGCQwtDgsMJwIIBF0nAgkEAwAqAggKJwIMBB8tCAELJwINBCAACAENAScDCwQBACILAg0uAgAKgAMuAgANgAQuAgAMgAUlAAAJrwAqBgkMLQ4LDCcCCAR8JwIJBAQAKgIICicCDAQfLQgBCycCDQQgAAgBDQEnAwsEAQAiCwINLgIACoADLgIADYAELgIADIAFJQAACa8AKgYJDC0OCwwnAggEmycCCQQFACoCCAonAgwEHy0IAQsnAg0EIAAIAQ0BJwMLBAEAIgsCDS4CAAqAAy4CAA2ABC4CAAyABSUAAAmvACoGCQwtDgsMJwIIBLonAgkEBgAqAggKJwIMBB8tCAELJwINBCAACAENAScDCwQBACILAg0uAgAKgAMuAgANgAQuAgAMgAUlAAAJrwAqBgkMLQ4LDCcCCATZJwIJBAcAKgIICicCDAQfLQgBCycCDQQgAAgBDQEnAwsEAQAiCwINLgIACoADLgIADYAELgIADIAFJQAACa8AKgYJDC0OCwwtCgQCLgiBRQADJQAACfUlAAAKNS4CAAGBRigCAAIEgUYnAgMEATsOAAMAAgEAgAOABYAHLgCAA4AILgCABIAJCwCACIAHgAokAIAKAAAJ9C4BgAiABi4EgAaACQEAgAgAAoAIAQCACQACgAkjAAAJwyYoAIBDBAADKACARAEAACgAgEUEAAAoAIBGAAAAKACARwEAASgAgEgEAAEoAIBJAAABKACASgQAAigAgEsEAAQmJQAAD04eAgAFAB4CAAYAMyoABQAGAAckAgAHAAAKWSUAAA93HgIABQEeAgAGAAoqBQYHJAIABwAACnUlAAAPiR4CAAUBJwIGAActCAEHJwIIBAMACAEIAScDBwQBACIHAggtCggJLQ4GCQAiCQIJLQ4FCScCCAQJLQgACS0KBwouCIBKAAsuCIBEAAwACAAIACUAAA+bLQIAAC0KCgULIgAFgEYABwsiAAeARAAIJAIACAAACvAlAAARrC8KAAUABxwKBwgFHAoIBQAcCgUHBR4CAAgBLQgBCScCCgQDAAgBCgEnAwkEAQAiCQIKLQoKCy0OBgsAIgsCCy0OCAsnAggECi0IAAotCgkLLgiASgAMLgiARAANAAgACAAlAAAPmy0CAAAtCgsGCyIABoBGAAgLIgAIgEQACSQCAAkAAAt7JQAAEawnAggFAQAqBwgJDioHCQokAgAKAAALlyUAABG+HAoJCAAwCgAIAAYeAgAGARwKAQgAHAoDAQAeAgADBhwKAwkAASIAAoBIAAotCwoDLQsDCgAiCgIKLQ4KAycCCwQMLQgADC0KAw0ACAALACUAABHQLQIAAC0KDQoBIgACgEoACy0LCwMtCwMLACILAgstDgsDJwIMBA0tCAANLQoDDgAIAAwAJQAAEdAtAgAALQoOCwEiAAKAQwAMLQsMAy0LAwwAIgwCDC0ODAMnAg0EDi0IAA4tCgMPAAgADQAlAAAR0C0CAAAtCg8MASIAAoBLAA0tCw0DLQsDDQAiDQINLQ4NAycCDgQPLQgADy0KAxAACAAOACUAABHQLQIAAC0KEA0nAgMEBQAqAgMPLQsPDi0LDgMAIgMCAy0OAw4nAg8EEC0IABAtCg4RAAgADwAlAAAR0C0CAAAtChEDJwIOBAYAKgIOEC0LEA8tCw8OACIOAg4tDg4PJwIQBBEtCAARLQoPEgAIABAAJQAAEdAtAgAALQoSDicCDwQHACoCDxEtCxEQLQsQDwAiDwIPLQ4PECcCEQQSLQgAEi0KEBMACAARACUAABHQLQIAAC0KEw8nAhAECAAqAhASLQsSES0LEQIAIgICAi0OAhEnAhAEEi0IABItChETAAgAEAAlAAAR0C0CAAAtChMCLQgBECcCEQQOAAgBEQEnAxAEAQAiEAIRLQoREi0OBhIAIhICEi0OBRIAIhICEi0OCBIAIhICEi0OARIAIhICEi0OCRIAIhICEi0OChIAIhICEi0OCxIAIhICEi0ODBIAIhICEi0ODRIAIhICEi0OAxIAIhICEi0ODhIAIhICEi0ODxIAIhICEi0OAhItCAEBJwICBA4ACAECAScDAQQBACIBAgInAgMEDQAqAwIDLQoCBQwqBQMGFgoGBiQCAAYAAA5WLgyARgAFACIFAgUjAAAONS0IAQIAAAECAS0OAQInAgEEDS4IgEUABCMAAA5zDCoEAQMkAgADAAAPASMAAA6FLQsCAycCBQQNBiIFAgInAggEAwAqBQgGLQgBBAAIAQYBJwMEBAEAIgQCBi0OBQYAIgYCBi0OBQYnAggEAwAqBAgGACIDAgguAgAIgAMuAgAGgAQuAgAFgAUlAAAJrwAiBAIGLQsGBScCCAQCACoGCAM3CwADAAUtCgcBJgAiEAIFACoFBAYtCwYDLQsCBS4CAAWAAygAgAQEAA4lAAASZC4IgAUABgAiBgIIACoIBAktDgMJLQ4GAgEiAASASAADLQoDBCMAAA5zKACABAR4AA0AAACABIADJACAAwAAD3YqAQABBfeh86+lrdTKPAQCASYqAQABBb4eP/8+pPb6PAQCASYqAQABBer0JMEnbqRAPAQCASYlAAAPThwKAgUAKwIABgAAAAAAAAAAAQAAAAAAAAAABCoFBgctCAEFJwIGBAQACAEGAScDBQQBACIFAgYtCgYILgyARgAIACIIAgguDIBGAAgAIggCCC4MgEYACC0IAQYnAggEBQAIAQgBJwMGBAEAIgYCCC0KCAkuDIBGAAkAIgkCCS4MgEYACQAiCQIJLgyARgAJACIJAgktDgcJLQgBBwAAAQIBLQ4FBy0IAQUAAAECAS0OBgUtCAEGAAABAgEuDIBFAAYtCAEIAAABAgEuDIBEAAgtCwEJACIJAgktDgkBLgiARQAEIwAAEIgNIgAEgEoACSQCAAkAABFLIwAAEJ0kAgADAAAQqiMAABDcJwIBBAktCAAJLQoHCi0KBQstCgYMLQoIDS4IgEkADgAIAAEAJQAAEvItAgAAIwAAENwtCwgBCyIAAYBEAAIkAgACAAAQ+ScCAwQAPAYDAScCAQQJLQgACS0KBwotCgULLQoGDC0KCA0ACAABACUAABQWLQIAAC0LBwEtCwUCLQsGAy0OAQctDgIFLQ4DBi4MgEcACAEiAAKASAADLQsDASYMKgQCCSQCAAkAABFdIwAAEZsAIgECCgAqCgQLLQsLCScCCgQLLQgACy0KBwwtCgUNLQoGDi0KCA8tCgkQAAgACgAlAAAS8i0CAAAjAAARmwEiAASASAAJLQoJBCMAABCIKgEAAQUC3G4ngHYSnTwEAgEmKgEAAQVFp8pxGUHkFTwEAgEmJQAAD04tCAEDAAABAgEuDIBJAAMtCAEEAAABAgEuDIBGAAQnAgUEHygCAAYAAQAuCIBFAAIjAAASCgwqAgUHJAIABwAAEiEjAAASHC0LBAEmLQsEBwAiAQIJACoJAgotCwoIHAoICQAtCwMIBCoJCAoAKgcKCS0OCQQEKggGBy0OBwMBIgACgEgABy0KBwIjAAASCi4BgAOABgsAgAYAAoAHJACABwAAEn8jAAASii4AgAOABSMAABLxLgAAAYAFAQAAAYAEAAEBAIADgASACS4AgAOACi4AgAWACwsAgAqACYAMJACADAAAEt0uAYAKgAguBIAIgAsBAIAKAAKACgEAgAsAAoALIwAAEqwoAYAFBAABAwCABgACgAYjAAAS8SYlAAAPTi0LBAYLIgAGgEQAByQCAAcAABMUJwIIBAA8BggBLQsDBgsiAAaAQwAHJAIABwAAE6cjAAATLS0LAwYtCwEHLQsCCC0LBAkNIgAGgEMACiQCAAoAABNSJQAAFSQuAgAHgAMoAIAEBAAEJQAAEmQuCIAFAAoAIgoCCwAqCwYMLQ4FDAEiAAaASAAFDioGBQckAgAHAAATkiUAABG+LQ4KAS0OCAItDgUDLQ4JBCMAABQVJwIGBActCAAHLQoBCC0KAgktCgMKLQoECwAIAAYAJQAAFBYtAgAALQsBBi0LAgctCwQILgIABoADKACABAQABCUAABJkLgiABQAJASIACYBIAAotDgUKLQ4JAS0OBwIuDIBIAAMtDggEIwAAFBUmJQAAD04uCIBFAAUjAAAUJg0iAAWAQwAGJAIABgAAFJEjAAAUOy0LAgUtCwUGACIGAgYtDgYFLQgBBicCBwQFAAgBBwEnAwYEAQAiBQIHJwIIBAQAIgYCCT8PAAcACS0LAQUtCwMHLQsECC0OBQEtDgYCLQ4HAy0OCAQmLQsDBgwqBQYHJAIABwAAFKcjAAAVEy0LAgYAIgYCCAAqCAUJLQsJBy0LAQgAIggCCgAqCgULLQsLCQAqBwkKLQsDBy0LBAkuAgAGgAMoAIAEBAAFJQAAEmQuCIAFAAsAIgsCDAAqDAUNLQ4KDS0OCAEtDgsCLQ4HAy0OCQQjAAAVEwEiAAWASAAGLQoGBSMAABQmKgEAAQXFa8RaDhAAAjwEAgEm",
      "debug_symbols": "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",
      "brillig_names": [
        "_publish_message"
      ]
    },
    {
      "name": "compute_vaa_hash_unconstrained",
      "is_unconstrained": true,
      "custom_attributes": [
        "utility"
      ],
      "abi": {
        "parameters": [
          {
            "name": "body_bytes",
            "type": {
              "kind": "array",
              "length": 1860,
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              }
            },
            "visibility": "private"
          },
          {
            "name": "body_length",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "array",
            "length": 32,
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 8
            }
          },
          "visibility": "public"
        },
        "error_types": {
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3095323350861740601": {
            "error_kind": "fmtstring",
            "length": 132,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "11418088424205762236": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": []
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "compute_vaa_hash_unconstrained"
      ]
    },
    {
      "name": "expire_guardian_set",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "index",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBIBJJwAABAMnAgIEAScCAwQAHwoAAgADgEgdAIBIgEgELgiASAABJQAAAEwlAAAAcCgCAAEEgEknAgIEADsOAAIAASgAgEMEAAMoAIBEAQAAKACARQQAACgAgEYBAAEoAIBHBAABJiUAAAJSHgIAAgAeAgADADMqAAIAAwAEJAIABAAAAJQlAAACexwKAQIAJwIBAAAtCAEDJwIEBAQACAEEAScDAwQBACIDAgQtCgQFLQ4BBQAiBQIFLQ4BBQAiBQIFLQ4BBSsCAAQAAAAAAAAAAAIAAAAAAAAAAC0IAQUnAgYEBQAIAQYBJwMFBAEAIgUCBi0KBgctDgEHACIHAgctDgEHACIHAgctDgEHACIHAgctDgQHLQgBBAAAAQIBLQ4DBC0IAQMAAAECAS0OBQMtCAEFAAABAgEuDIBFAAUtCAEGAAABAgEuDIBEAAYnAgcAHScCCAQJLQgACS0KBAotCgMLLQoFDC0KBg0tCgcOAAgACAAlAAACjS0CAAAnAgcECC0IAAgtCgQJLQoDCi0KBQstCgYMLQoCDQAIAAcAJQAAAo0tAgAALQsGAgsiAAKARAAHJAIABwAAAdAnAggEADwGCAEnAgIEBy0IAActCgQILQoDCS0KBQotCgYLAAgAAgAlAAADsS0CAAAtCwMCASIAAoBHAAQtCwQDCioDAQILIgACgEQAASQCAAEAAAIhJQAABMQeAgABBikCAAIFAAFRgAAqAQIEDioBBAUkAgAFAAACRiUAAATWHAoEAQAwCgABAAMmKACABAR4AA0AAACABIADJACAAwAAAnoqAQABBfeh86+lrdTKPAQCASYqAQABBb4eP/8+pPb6PAQCASYlAAACUi0LBAYLIgAGgEQAByQCAAcAAAKvJwIIBAA8BggBLQsDBgsiAAaAQwAHJAIABwAAA0IjAAACyC0LAwYtCwEHLQsCCC0LBAkNIgAGgEMACiQCAAoAAALtJQAABOguAgAHgAMoAIAEBAAEJQAABPouCIAFAAoAIgoCCwAqCwYMLQ4FDAEiAAaARwAFDioGBQckAgAHAAADLSUAAATWLQ4KAS0OCAItDgUDLQ4JBCMAAAOwJwIGBActCAAHLQoBCC0KAgktCgMKLQoECwAIAAYAJQAAA7EtAgAALQsBBi0LAgctCwQILgIABoADKACABAQABCUAAAT6LgiABQAJASIACYBHAAotDgUKLQ4JAS0OBwIuDIBHAAMtDggEIwAAA7AmJQAAAlIuCIBFAAUjAAADwQ0iAAWAQwAGJAIABgAABDEjAAAD1i0LAgUtCwUGACIGAgYtDgYFJwIGBAQtCAEHJwIIBAUACAEIAScDBwQBACIFAggnAgkEBAAiBwIKPw8ACAAKLQsBBS0LAwYtCwQILQ4FAS0OBwItDgYDLQ4IBCYtCwMGDCoFBgckAgAHAAAERyMAAASzLQsCBgAiBgIIACoIBQktCwkHLQsBCAAiCAIKACoKBQstCwsJACoHCQotCwMHLQsECS4CAAaAAygAgAQEAAUlAAAE+i4IgAUACwAiCwIMACoMBQ0tDgoNLQ4IAS0OCwItDgcDLQ4JBCMAAASzASIABYBHAAYtCgYFIwAAA8EqAQABBQLcbieAdhKdPAQCASYqAQABBUWnynEZQeQVPAQCASYqAQABBcVrxFoOEAACPAQCASYuAYADgAYLAIAGAAKAByQAgAcAAAUVIwAABSAuAIADgAUjAAAFhy4AAAGABQEAAAGABAABAQCAA4AEgAkuAIADgAouAIAFgAsLAIAKgAmADCQAgAwAAAVzLgGACoAILgSACIALAQCACgACgAoBAIALAAKACyMAAAVCKAGABQQAAQMAgAYAAoAGIwAABYcm",
      "debug_symbols": "tZjRTiM7DIbfpddcJI4dJ7zKCqECZVWpKqgLRzpCvPvaM3amrZQIBu1N+9WT/GPHjjOdj83T7uH99/3++PzyZ3P762PzcNofDvvf94eXx+3b/uUo1o9N0I8YeXOLN5sIsLll/ZbfMQgkEogCmByKAAmQWEDHUDHI4MAG7BZ2S3FLyQY1OJBDnQECOugt5O4A1SAlB7+EbkG3kFuIDXJ0yAYcHMjBb1HQQUOuAhUceIYUogMZxOCADjY9QXKoBsktyceg3hQUqgG5ZVpnhWmdJ8gGUxQT+GD2wSU5uKX6dI1CATWKGcjB7o4xOfhg8MFgd8fkFq0WQAWdLkWCyAZEBjk4qKtZoRpwcmCDEh3IwQdXn17NQiE56HQpY4rkIGOSFBIBGiQwwOAgg1MSILWgQjVQV2dwi3o4gdZzKgq6haRasqYJZTWypglFMGt2ZigGmpQZ2KBKpCiCHHUWKWQDCA7oUAySj0G/pGWDsgisCz7B5MYEbKDrPEMxKG6Z/JEVY92MCiUEh2KgJTGDDS5aEjP4rKT+FIVqoNtzBjag6EAOPjj79OwW9uns04tP19pA2TtlWsMJygxVS2KGajD5rDD5TArkUA2SW7RdkNRG1SxTVMgG2rVmIIc65z0GbVtGxWlatJmaDZoNmi01W2o2bHrYbASNspNuLaM2I7cZuoIajJCsAU22yfmZ6hxGjOq9UbOp90Y6NynpWWHUbNoJCCfKTrrBjJoyhUbslKFRceJ2X2620sZ5MmKsTa/6PSBMcz8/bzZ+4N2/nXY7Pe/OTkA5F1+3p93xbXN7fD8cbjb/bQ/v06A/r9vj9P22PclVWbnd8Um+RfB5f9gpfd4ss0N/qpyiGW26LEytTUJycSESByJBW+ysERDOJPBCAvoS0jzZJLCG3CT4MpLUV5Bd7OtQELsKwzBq9TAkW90w6Mdh5H8bBpWWjdLPRhlIEJNL5BR7TtS+QqXgTlSi+MMwZEN3wxgWd9FD14q75NRE6MoNGIksGwQjLn7w1f4Y1Ka0A5eopSkkvPIC+wqQ2haT50taNAi/7gW5FxCg78WgOFlq2iTkFF6WM4nehQb3NRJ5IBiX8gZIlwqD6oRYowcCofY1BvVJ4FudUlin0HZ6jrQuDii15fQsI9/S4NiSyoNIIP1bjZhzaB2DyzoNefpzDa6wTkMep9pWg8GajnY8trxEOmvB1zseBnmRB2vvGiz/6BaNeLnbYFBhnL3M+WxFpZd8o/8xL/2vYq//pUEfzlhaoeNZ97o+mQcLWgq4RClIPYkvR1JDN5Kvnwacu6tBo9oIsZ0GwN2spNERn5pGSbF7NiYexbI8cV0eB/XrbkA72AqU/iPXoEJLyC2x8szbk8BRVuRUWs75fNbOv1Ed58+fud+Mh260xy75M1DWSeTmRSzrvEj1rMrXeUEQlubF6yTy0v9KXRfI0oYTrAsk4fLHhFYFwugJYcxrBCpSe4hdFUQNns8K6zxoNVWZfhjCtcCd/Nw+7k8Xb10/Veq03z4cdvbz+f34eHb17f9Xv+JvbV9PL4+7p/fTTpWWV7fy8QvklQvkcqf/4+Wn7PYb+furP+N0Nd7Iy9G7T3XmLw==",
      "brillig_names": [
        "expire_guardian_set"
      ]
    },
    {
      "name": "get_provider",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "structs::Provider",
            "fields": [
              {
                "name": "chain_id",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 16
                }
              },
              {
                "name": "evm_chain_id",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 16
                }
              }
            ]
          },
          "visibility": "public"
        },
        "error_types": {
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBIBGJwAABAMnAgEEACcCAgQAHwoAAQACgEQlAAAASyUAAABMLgIAAYBELgIAAoBFKAIAAwSARCcCBAQCOw4ABAADJiUAAAGRHgIAAgAeAgADADMqAAIAAwAEJwICAQEkAgAEAAAAdSUAAAG6JwICAAAtCAEDJwIEBAcACAEEAScDAwQBACIDAgQtCgQFLQ4CBQAiBQIFLQ4CBQAiBQIFLQ4CBQAiBQIFLQ4CBQAiBQIFLQ4CBQAiBQIFLQ4CBS0IAQIAAAECAS0OAwInAgMEACcCBAQGJwIFAAEnAgYEAS0KAwEjAAAA8QwqAQQDJAIAAwAAAUUjAAABAy0LAgEAKgEGAy0LAwInAgMEAgAqAQMFLQsFBBwKAgMDHAoDAQAcCgECAxwKBAMDHAoDAQAcCgEDAy0KAgEtCgMCJhwKAQMAACoFAwcvCgAHAAMtCwIHLgIAB4ADKACABAQAByUAAAHMLgiABQAIACIIAgkAKgkBCi0OAwotDggCACoBBgMtCgMBIwAAAPEoAIAEBHgADQAAAIAEgAMkAIADAAABuSoBAAEF96Hzr6Wt1Mo8BAIBJioBAAEFvh4//z6k9vo8BAIBJi4BgAOABgsAgAYAAoAHJACABwAAAecjAAAB8i4AgAOABSMAAAJZLgAAAYAFAQAAAYAEAAEBAIADgASACS4AgAOACi4AgAWACwsAgAqACYAMJACADAAAAkUuAYAKgAguBIAIgAsBAIAKAAKACgEAgAsAAoALIwAAAhQoAYAFBAABAwCABgACgAYjAAACWSY=",
      "debug_symbols": "tZbbbuIwEIbfJde58Nhje4ZXqaoqhVBFigJKYaUV4t13HDwJrOSoW7Y3+Pck+TwnG1+qXft+/njrhv3hs9q8XKr3sev77uOtP2ybU3cYxHqpTPohqDZYVxSqTawrlhkYGVlGqCswmAVYFVGEF2GtipCFAxVqQbWgWrxRgSo4i+BUUBZRl4i6KCmQFMgKZK8iA61xKjLQTv4EEdOiErCdFuUkKItp0UnELEgtaVFrRaQ83US2OAMq1AJqseKYdSKcuGoxiWQRN1zyx/ok/M0f50EFZTF5OInss4uoQi2k71DyOV6vdaWlfjuNbZsqfVd76YhjM7bDqdoM576vq19Nf55e+jw2wzSemlGeSiu0w05GAe67vk3qWi9fm/Kn4HzA/Lk0BPOMABMfILACMSmDN4ZBe4fAB4QtI5A4ZgSyCTMiPkbiygRCp3kgxCJhNQxmDQOAi2H4p8MIPxuGp7kaVK4GrSB89IoIDkpOcJnA3qgT7D08GYacYsUw1pobHc+NiQjL/vB/ubHSmQA45wLigpCz7ZGx0puRQP2I5FwxG7iCQAJF4F1V/wWx1EQkfw/BbkZwGbGaC7PkAqmIWGlPa+R/IDNER5whDsKXKUhGC4vkqMiw5j8wVhqdGebtKmfujPD89bIEpydXDPi9ygaLTyNgbtHgTQlh/fpmW85g5Mc+f5VZs+3GhwvSNdHGrnnv2zzdn4ft3dPT76M+0QvWcTxs2915bBNpuWXJzwubWg7/13SpkpnsOQppAmkSa+LXa/LjDw==",
      "brillig_names": [
        "get_provider"
      ]
    },
    {
      "name": "guardian_set_expired",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "index",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "boolean"
          },
          "visibility": "public"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBIBKJwAABAMnAgIEAScCAwQAHwoAAgADgEgdAIBIgEgELgiASAABJQAAAFIlAAAAdi4CAAGASSgCAAIEgEknAgMEATsOAAMAAigAgEMEAAMoAIBEAQAAKACARQQAACgAgEYBAAEoAIBHBAABJiUAAAJLHgIAAgAeAgADADMqAAIAAwAEJAIABAAAAJolAAACdBwKAQIAJwIBAAAtCAEDJwIEBAQACAEEAScDAwQBACIDAgQtCgQFLQ4BBQAiBQIFLQ4BBQAiBQIFLQ4BBSsCAAQAAAAAAAAAAAIAAAAAAAAAAC0IAQUnAgYEBQAIAQYBJwMFBAEAIgUCBi0KBgctDgEHACIHAgctDgEHACIHAgctDgEHACIHAgctDgQHLQgBBAAAAQIBLQ4DBC0IAQMAAAECAS0OBQMtCAEFAAABAgEuDIBFAAUtCAEGAAABAgEuDIBEAAYnAgcAHScCCAQJLQgACS0KBAotCgMLLQoFDC0KBg0tCgcOAAgACAAlAAAChi0CAAAnAgcECC0IAAgtCgQJLQoDCi0KBQstCgYMLQoCDQAIAAcAJQAAAoYtAgAALQsGAgsiAAKARAAHJAIABwAAAdYnAggEADwGCAEnAgIEBy0IAActCgQILQoDCS0KBQotCgYLAAgAAgAlAAADqi0CAAAtCwMCASIAAoBHAAQtCwQDCioDAQILIgACgEQAASQCAAEAAAInJQAABL0vCgADAAEcCgEDBRwKAwIAHAoCAQUeAgACBgwqAQIDLQoDASYoAIAEBHgADQAAAIAEgAMkAIADAAACcyoBAAEF96Hzr6Wt1Mo8BAIBJioBAAEFvh4//z6k9vo8BAIBJiUAAAJLLQsEBgsiAAaARAAHJAIABwAAAqgnAggEADwGCAEtCwMGCyIABoBDAAckAgAHAAADOyMAAALBLQsDBi0LAQctCwIILQsECQ0iAAaAQwAKJAIACgAAAuYlAAAEzy4CAAeAAygAgAQEAAQlAAAE4S4IgAUACgAiCgILACoLBgwtDgUMASIABoBHAAUOKgYFByQCAAcAAAMmJQAABW8tDgoBLQ4IAi0OBQMtDgkEIwAAA6knAgYEBy0IAActCgEILQoCCS0KAwotCgQLAAgABgAlAAADqi0CAAAtCwEGLQsCBy0LBAguAgAGgAMoAIAEBAAEJQAABOEuCIAFAAkBIgAJgEcACi0OBQotDgkBLQ4HAi4MgEcAAy0OCAQjAAADqSYlAAACSy4IgEUABSMAAAO6DSIABYBDAAYkAgAGAAAEKiMAAAPPLQsCBS0LBQYAIgYCBi0OBgUnAgYEBC0IAQcnAggEBQAIAQgBJwMHBAEAIgUCCCcCCQQEACIHAgo/DwAIAAotCwEFLQsDBi0LBAgtDgUBLQ4HAi0OBgMtDggEJi0LAwYMKgUGByQCAAcAAARAIwAABKwtCwIGACIGAggAKggFCS0LCQctCwEIACIIAgoAKgoFCy0LCwkAKgcJCi0LAwctCwQJLgIABoADKACABAQABSUAAAThLgiABQALACILAgwAKgwFDS0OCg0tDggBLQ4LAi0OBwMtDgkEIwAABKwBIgAFgEcABi0KBgUjAAADuioBAAEFAtxuJ4B2Ep08BAIBJioBAAEFxWvEWg4QAAI8BAIBJi4BgAOABgsAgAYAAoAHJACABwAABPwjAAAFBy4AgAOABSMAAAVuLgAAAYAFAQAAAYAEAAEBAIADgASACS4AgAOACi4AgAWACwsAgAqACYAMJACADAAABVouAYAKgAguBIAIgAsBAIAKAAKACgEAgAsAAoALIwAABSkoAYAFBAABAwCABgACgAYjAAAFbiYqAQABBUWnynEZQeQVPAQCASY=",
      "debug_symbols": "tZjRaiM7DIbfJde5sGXJtvoqSylpmy6BkJZse+BQ+u4reSRPEhizO2Vvki8a+x/JkuWZfG6e948fPx8Op5fXX5u7H5+bx/PheDz8fDi+Pu3eD68nsX5ugn5ESJs73Mp33dwV+U7yOwYBjAJRgQ0IBUhBLKBjMjpUg5Ic3FLdUt3C4JAngBAdyCAGB72F3B0SObAB+iV0C7mF3JKTQzEo4JANanTwW3Bw0JBZoU6QQnIoBjE6ZAMIDujABhrFBG5BH0N6U1Agg+yWts4NqkGLokE2qD64+uDKBuwWtumoUUxQDDSKCcjBpiP4YPDBCRzcotUCqKDTpUiQkkGODtmgqKtZgRzYoFVLg2LA0cEGUwgO3WLTKep0KWOC6CBjkhQSpeBQDTAbkAxOpCA3TTorg4NbdMFRBxexoNRG1lkICnILTAJabA1KdMgGmp0JJBcoC1XUeSQFNlDnJygGGsUEPib5JVR/skI1aG4oaNlMkA2aPw3c0vwpCtWA0wRVN+ME2SAGB3SwWVVLAquAlsQE2QCDAzpUA/LB5NOzW7JPLz69+HRtKSg7pbY1VNDamCBPwAEMms8NcFoxbj4rADi4RfsGSXJZC5KiAhtoQU5QDbR9ad6ZywQxhNgpO8Vui90G3QbdlrotdT3sNt1ORuykO8uoz8h9hi6gxhKDriA1W/O9kTqvUQgVoxigU3bS5aPUiJyg27SvETZiJz04jLoyJidtbkbkpD4b9fuWbit9nOcixtr1ar8Ht7lfX9uNn24P7+f9Xg+3i+NODsG33Xl/et/cnT6Ox+3mv93xow369bY7te/33VmuysrtT8/yLYIvh+Ne6Ws7zw7LU2OijDY9pszcJSQXVyJxIBK0n04aAeFCAq8kYFkCKxeTQA65S5TrSNKyQsXk6yC7d1FhGAazhyE5WgyDvh1G/rdhUO3ZqMvZqAMJKuQSOcUlJ3hZgSm4Eyxn1TfDiLAcxqi4MYRemPL8MKeUbtyA0Q6ZNwhGnP0oN/tjUJuxZpfg2hUS3niBywqQ+hYDeSCbNQj/3AtyLyDAsheD4ixS0yZRmNKsIXpXGmVZI5EHgnEub4B0rTCoTogcPRAIvKwxqE8C3+rykLVOoe/0HGldHFC55/QiI3+lUWJPahlEAunfashxGHrHKHWdRinJNQrDOg0OvYczDNZ0tOOx50XeH/PijodBXnIJ3jUK5AuNeL3bYFBhJXuZl4sVlV6ysv9dtOGb/pdGfThiPwtiCYt+pMGKlhrdj1JTWjzd03Ax+mpkCosSOI5kPuDxosJuRYahhDkUrIsSeZiW7gbCZS/nv8hsTnNma1jM7KhG5YXVWxjyciiDEq0VXELecGhJYhSJnErzOS+vrPOWpT/WuHz+zMvNeOhGf+yS0qjrJHL3ItZ1XqR+qAiu84IgzM2rrJPIc/+rvC6QucQTrAsk4fxiQqsCKdi3KuY1AtxbH9OqIDh4PhnWedBrSt7zvxnCrcC9/Nw9Hc5Xf7F+qdT5sHs87u3ny8fp6eLq+/9vfsX/on07vz7tnz/Oe1Wa/6eVjx/yh+cWMt3r27v8lB2+lXdy/Rn1as5ytd5/qTO/AQ==",
      "brillig_names": [
        "guardian_set_expired"
      ]
    },
    {
      "name": "init",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "initializer"
      ],
      "abi": {
        "parameters": [
          {
            "name": "chain_id",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 16
            },
            "visibility": "private"
          },
          {
            "name": "evm_chain_id",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 16
            },
            "visibility": "private"
          },
          {
            "name": "wormhole_address",
            "type": {
              "kind": "struct",
              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "token_address",
            "type": {
              "kind": "struct",
              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "2233873454491509486": {
            "error_kind": "string",
            "string": "Initializer address is not the contract deployer"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17618083556256589634": {
            "error_kind": "string",
            "string": "Initialization hash does not match"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "init"
      ]
    },
    {
      "name": "parse_vaa_unconstrained",
      "is_unconstrained": true,
      "custom_attributes": [
        "utility"
      ],
      "abi": {
        "parameters": [
          {
            "name": "bytes",
            "type": {
              "kind": "array",
              "length": 2000,
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              }
            },
            "visibility": "private"
          },
          {
            "name": "actual_length",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "tuple",
            "fields": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              },
              {
                "kind": "array",
                "length": 13,
                "type": {
                  "kind": "array",
                  "length": 66,
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 8
                  }
                }
              },
              {
                "kind": "array",
                "length": 1860,
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 8
                }
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "visibility": "public"
        },
        "error_types": {
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3095323350861740601": {
            "error_kind": "fmtstring",
            "length": 132,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "11418088424205762236": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": []
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "parse_vaa_unconstrained"
      ]
    },
    {
      "name": "process_message",
      "is_unconstrained": true,
      "custom_attributes": [
        "utility"
      ],
      "abi": {
        "parameters": [
          {
            "name": "message_ciphertext",
            "type": {
              "kind": "struct",
              "path": "std::collections::bounded_vec::BoundedVec",
              "fields": [
                {
                  "name": "storage",
                  "type": {
                    "kind": "array",
                    "length": 17,
                    "type": {
                      "kind": "field"
                    }
                  }
                },
                {
                  "name": "len",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "message_context",
            "type": {
              "kind": "struct",
              "path": "aztec::messages::processing::message_context::MessageContext",
              "fields": [
                {
                  "name": "tx_hash",
                  "type": {
                    "kind": "field"
                  }
                },
                {
                  "name": "unique_note_hashes_in_tx",
                  "type": {
                    "kind": "struct",
                    "path": "std::collections::bounded_vec::BoundedVec",
                    "fields": [
                      {
                        "name": "storage",
                        "type": {
                          "kind": "array",
                          "length": 64,
                          "type": {
                            "kind": "field"
                          }
                        }
                      },
                      {
                        "name": "len",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "first_nullifier_in_tx",
                  "type": {
                    "kind": "field"
                  }
                },
                {
                  "name": "recipient",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3095323350861740601": {
            "error_kind": "fmtstring",
            "length": 132,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "11418088424205762236": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": []
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "process_message"
      ]
    },
    {
      "name": "public_dispatch",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "selector",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "2233873454491509486": {
            "error_kind": "string",
            "string": "Initializer address is not the contract deployer"
          },
          "2830029349304997821": {
            "error_kind": "fmtstring",
            "length": 27,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5389888835557273632": {
            "error_kind": "string",
            "string": "insufficient fee"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "16930197311201387584": {
            "error_kind": "string",
            "string": "Function _publish_message can only be called internally"
          },
          "17618083556256589634": {
            "error_kind": "string",
            "string": "Initialization hash does not match"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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UZMCHAqTkgAAKlA9ky0Lk1EcClGUAhwKlJMAACpQPpQtC5RRHApRlQIcCpWUAAAqUD+VLQuVURwKUZYCHAqWlQAAKlBAli0LllEcClGXAhwKl5YAACpQQZctC5dRHApRmAIcCpiXAAAqUEKYLQuYURwKUZkCHAqZmAAAKlBDmS0LmVEcClGaAhwKmpkAACpQRJotC5pRHApRmwIcCpuaAAAqUEWbLQubURwKUZwCHAqcmwAAKlBGnC0LnFEcClGdAhwKnZwAACpQR50tC51RHApRngIcCp6dAAAqUEieLQueURwKUZ8CHAqfngAAKlBJny0Ln1EcClGgAhwKoJ8AACpQSqAtC6BRHApRoQIcCqGgAAAqUEuhLQuhURwKUaICHAqioQAAKlBMoi0LolEcClGjAhwKo6IAACpQTaMtC6NRHApRpAIcCqSjAAAqUE6kLQukURwKUaUCHAqlpAABIgBQgFMApS0LpVEcClGlAhwKpVAAJwKlBKYtCACmLQpPpy0KBagACAClACUAAQa8LQIAAC0Kp1EBIgBRgEsATy0LTwUcCgVRBBwKUU8ALQgBBQAAAQIBLgyARwAFLQgBUQAAAQIBLgyASQBRLQgBpQAAAQIBJwKmAMMtDqalJwKmBKctCACnLQoFqC0KUaktCqWqAAgApgAlAAEBhC0CAAAtCAGmJwKnBAMACAGnAScDpgQBACKmAqctCqeoLQ4GqAAiqAKoLQ5PqCcCTwSnLQgApy0KpqguCIBNAKkuCIBHAKoACABPACUAAPvzLQIAAC0KqAYLIgAGgEkATwsiAE+ARwCmJAIApgAAQbklAAD9by0LBU8tC1EFLQulUS0IAaUnAqYEVQAIAaYBJwOlBAEAIqUCpi0KpqctDlKnACKnAqctDlOnACKnAqctDlSnACKnAqctDlWnACKnAqctDlanACKnAqctDlenACKnAqctDlinACKnAqctDlmnACKnAqctDlqnACKnAqctDlunACKnAqctDlynACKnAqctDl2nACKnAqctDl6nACKnAqctDl+nACKnAqctDmCnACKnAqctDmGnACKnAqctDmKnACKnAqctDmOnACKnAqctDmSnACKnAqctDmWnACKnAqctDmanACKnAqctDmenACKnAqctDminACKnAqctDmmnACKnAqctDmqnACKnAqctDmunACKnAqctDmynACKnAqctDm2nACKnAqctDm6nACKnAqctDm+nACKnAqctDnCnACKnAqctDnGnACKnAqctDnKnACKnAqctDnOnACKnAqctDnSnACKnAqctDnWnACKnAqctDnanACKnAqctDnenACKnAqctDninACKnAqctDnmnACKnAqctDnqnACKnAqctDnunACKnAqctDnynACKnAqctDn2nACKnAqctDn6nACKnAqctDn+nACKnAqctDoCnACKnAqctDoGnACKnAqctDoKnACKnAqctDoOnACKnAqctDoSnACKnAqctDoWnACKnAqctDoanACKnAqctDoenACKnAqctDoinACKnAqctDomnACKnAqctDoqnACKnAqctDounACKnAqctDoynACKnAqctDo2nACKnAqctDo6nACKnAqctDo+nACKnAqctDpCnACKnAqctDpGnACKnAqctDpKnACKnAqctDpOnACKnAqctDpSnACKnAqctDpWnACKnAqctDpanACKnAqctDpenACKnAqctDpinACKnAqctDpmnACKnAqctDpqnACKnAqctDpunACKnAqctDpynACKnAqctDp2nACKnAqctDp6nACKnAqctDp+nACKnAqctDqCnACKnAqctDqGnACKnAqctDqKnACKnAqctDqOnACKnAqctDqSnACKnAqctDlCnLQulUAAiUAJQLQ5QpScCUASmLQgApi0KT6ctCgWoLQpRqS0KBqotCqWrAAgAUAAlAAEHMy0CAAAAIgICTy0LTwYnAlAEAgAqT1AFOw4ABgAFIwAARSYpAgAFAC5EtcYKKgEFBiQCAAYAAEVBIwAAUGwtCAEFJwIGBFYACAEGAScDBQQBACIFAgYfMIBUgEsABi0IAQYAAAECAS0OBQYtCAEFAAABAgEuDIBIAAUnAlAEUS0IAFEtCgZSLQoFUwAIAFAAJQABBZMtAgAALQpSTwEiAE+ASwBRLQtRUBwKUFICHApSUQABIgBPgE0AUi0LUlAcClBTAhwKU1IAASIAT4BGAFMtC1NQHApQVAIcClRTAAEiAE+ATgBULQtUUBwKUFUCHApVVAABIgBPgE8AVS0LVVAcClBWAhwKVlUAASIAT4BQAFYtC1ZQHApQVwIcCldWAAAqTwNXLQtXUBwKUFgCHApYVwABIgBPgFEAWC0LWFAcClBZAhwKWVgAACpP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ACKnAqctDlenACKnAqctDlinACKnAqctDlmnACKnAqctDlqnACKnAqctDlunACKnAqctDlynACKnAqctDl2nACKnAqctDl6nACKnAqctDl+nACKnAqctDmCnACKnAqctDmGnACKnAqctDmKnACKnAqctDmOnACKnAqctDmSnACKnAqctDmWnACKnAqctDmanACKnAqctDmenACKnAqctDminACKnAqctDmmnACKnAqctDmqnACKnAqctDmunACKnAqctDmynACKnAqctDm2nACKnAqctDm6nACKnAqctDm+nACKnAqctDnCnACKnAqctDnGnACKnAqctDnKnACKnAqctDnOnACKnAqctDnSnACKnAqctDnWnACKnAqctDnanACKnAqctDnenACKnAqctDninACKnAqctDnmnACKnAqctDnqnACKnAqctDnunACKnAqctDnynACKnAqctDn2nACKnAqctDn6nACKnAqctDn+nACKnAqctDoCnACKnAqctDoGnACKnAqctDoKnACKnAqctDoOnACKnAqctDoSnACKnAqctDoWnACKnAqctDoanACKnAqctDoenACKnAqctDoinACKnAqctDomnACKnAqctDoqnACKnAqctDounACKnAqctDoynACKnAqctDo2nACKnAqctDo6nACKnAqctDo+nACKnAqctDpCnACKnAqctDpGnACKnAqctDpKnACKnAqctDpOnACKnAqctDpSnACKnAqctDpWnACKnAqctDpanACKnAqctDpenACKnAqctDpinACKnAqctDpmnACKnAqctDpqnACKnAqctDpunACKnAqctDpynACKnAqctDp2nACKnAqctDp6nACKnAqctDp+nACKnAqctDqCnACKnAqctDqGnACKnAqctDqKnACKnAqctDqOnACKnAqctDk+nLQukTwAiTwJPLQ5PpCcCTwSmLQgApi0KpactCgWoLQpQqS0KBqotCqSrAAgATwAlAAEHMy0CAAAAIgICTy0LTwYnAlAEAgAqT1AFOw4ABgAFIwAAUGwpAgAFAPqGlqkKKgEFBiQCAAYAAFCHIwAAW7ItCAEFJwIGBFYACAEGAScDBQQBACIFAgYfMIBUgEsABi0IAQYAAAECAS0OBQYtCAEFAAABAgEuDIBIAAUnAlAEUS0IAFEtCgZSLQoFUwAIAFAAJQAB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pgQBACKmAqctCqeoLQ6lqAAiqAKoLQ4GqCcCpQSnLQgApy0KpqguCIBNAKkuCIBHAKoACAClACUAAPvzLQIAAC0KqAYLIgAGgEkApQsiAKWARwCmJAIApgAAWEUlAAD9by0LBaUtC1AFLQukUC0IAaQnAqYEVQAIAaYBJwOkBAEAIqQCpi0KpqctDlGnACKnAqctDlKnACKnAqctDlOnACKnAqctDlSnACKnAqctDlWnACKnAqctDlanACKnAqctDlenACKnAqctDlinACKnAqctDlmnACKnAqctDlqnACKnAqctDlunACKnAqctDlynACKnAqctDl2nACKnAqctDl6nACKnAqctDl+nACKnAqctDmCnACKnAqctDmGnACKnAqctDmKnACKnAqctDmOnACKnAqctDmSnACKnAqctDmWnACKnAqctDmanACKnAqctDmenACKnAqctDminACKnAqctDmmnACKnAqctDmqnACKnAqctDmunACKnAqctDmynACKnAqctDm2nACKnAqctDm6nACKnAqctDm+nACKnAqctDnCnACKnAqctDnGnACKnAqctDnKnACKnAqctDnOnACKnAqctDnSnACKnAqctDnWnACKnAqctDnanACKnAqctDnenACKnAqctDninACKnAqctDnmnACKnAqctDnqnACKnAqctDnunACKnAqctDnynACKnAqctDn2nACKnAqctDn6nACKnAqctDn+nACKnAqctDoCnACKnAqctDoGnACKnAqctDoKnACKnAqctDoOnACKnAqctDoSnACKnAqctDoWnACKnAqctDoanACKnAqctDoenACKnAqctDoinACKnAqctDomnACKnAqctDoqnACKnAqctDounACKnAqctDoynACKnAqctDo2nACKnAqctDo6nACKnAqctDo+nACKnAqctDpCnACKnAqctDpGnACKnAqctDpKnACKnAqctDpOnACKnAqctDpSnACKnAqctDpWnACKnAqctDpanACKnAqctDpenACKnAqctDpinACKnAqctDpmnACKnAqctDpqnACKnAqctDpunACKnAqctDpynACKnAqctDp2nACKnAqctDp6nACKnAqctDp+nACKnAqctDqCnACKnAqctDqGnACKnAqctDqKnACKnAqctDqOnACKnAqctDk+nLQukTwAiTwJPLQ5P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pKMAASIAT4BTAKQtC6RQHApQpAIcCqRPACcCpASlLQgApS0KBqYtCgWnAAgApAAlAAEGvC0CAAAtCqZQASIAUIBLAAYtCwYFHAoFUAQcClAGAC0IAQUAAAECAS4MgEcABS0IAVAAAAECAS4MgEkAUC0IAaQAAAECAScCpQDALQ6lpCcCpQSmLQgApi0KBactClCoLQqkqQAIAKUAJQABAYQtAgAAJwKlABAtCAGmJwKnBAMACAGnAScDpgQBACKmAqctCqeoLQ6lqAAiqAKoLQ4GqCcCpQSnLQgApy0KpqguCIBNAKkuCIBHAKoACAClACUAAPvzLQIAAC0KqAYLIgAGgEkApQsiAKWARwCmJAIApgAAY4slAAD9by0LBaUtC1AFLQukUC0IAaQnAqYEVQAIAaYBJwOkBAEAIqQCpi0KpqctDlGnACKnAqctDlKnACKnAqctDlOnACKnAqctDlSnACKnAqctDlWnACKnAqctDlanACKnAqctDlenACKnAqctDlinACKnAqctDlmnACKnAqctDlqnACKnAqctDlunACKnAqctDlynACKnAqctDl2nACKnAqctDl6nACKnAqctDl+nACKnAqctDmCnACKnAqctDmGnACKnAqctDmKnACKnAqctDmOnACKnAqctDmSnACKnAqctDmWnACKnAqctDmanACKnAqctDmenACKnAqctDminACKnAqctDmmnACKnAqctDmqnACKnAqctDmunACKnAqctDmynACKnAqctDm2nACKnAqctDm6nACKnAqctDm+nACKnAqctDnCnACKnAqctDnGnACKnAqctDnKnACKnAqctDnOnACKnAqctDnSnACKnAqctDnWnACKnAqctDnanACKnAqctDnenACKnAqctDninACKnAqctDnmnACKnAqctDnqnACKnAqctDnunACKnAqctDnynACKnAqctDn2nACKnAqctDn6nACKnAqctDn+nACKnAqctDoCnACKnAqctDoGnACKnAqctDoKnACKnAqctDoOnACKnAqctDoSnACKnAqctDoWnACKnAqctDoanACKnAqctDoenACKnAqctDoinACKnAqctDomnACKnAqctDoqnACKnAqctDounACKnAqctDoynACKnAqctDo2nACKnAqctDo6nACKnAqctDo+nACKnAqctDpCnACKnAqct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Kk9Fmi0LmlAcClCbAhwKm5oAACpPRpstC5tQHApQnAIcCpybAAAqT0ecLQucUBwKUJ0CHAqdnAAAKk9InS0LnVAcClCeAhwKnp0AACpPSZ4tC55QHApQnwIcCp+eAAAqT0qfLQufUBwKUKACHAqgnwAAKk9LoC0LoFAcClChAhwKoaAAACpPTKEtC6FQHApQogIcCqKhAAAqT02iLQuiUBwKUKMCHAqjogAAKk9Ooy0Lo1AcClCkAhwKpKMAASIAT4BTAKQtC6RQHApQpAIcCqRPACcCpASlLQgApS0KBqYtCgWnAAgApAAlAAEGvC0CAAAtCqZQASIAUIBLAAYtCwYFHAoFUAQcClAGAC0IAQUAAAECAS4MgEcABS0IAVAAAAECAS4MgEkAUC0IAaQAAAECAScCpQC/LQ6lpCcCpQSmLQgApi0KBactClCoLQqkqQAIAKUAJQABAYQtAgAAJwKlABEtCAGmJwKnBAMACAGnAScDpgQBACKmAqctCqeoLQ6lqAAiqAKoLQ4GqCcCpQSnLQgApy0KpqguCIBNAKkuCIBHAKoACAClACUAAPvzLQIAAC0KqAYLIgAGgEkApQsiAKWARwCmJAIApgAAbtElAAD9by0LBaUtC1AFLQukUC0IAaQnAqYEVQAIAaYBJwOkBAEAIqQCpi0KpqctDlGnACKnAqctDlKnACKnAqctDlOnACKnAqctDlSnACKnAqctDlWnACKnAqctDlanACKnAqctDlenACKnAqctDlinACKnAqctDlmnACKnAqctDlqnACKnAqctDlunACKnAqctDlynACKnAqctDl2nACKnAqctDl6nACKnAqctDl+nACKnAqctDmCnACKnAqctDmGnACKnAqctDmKnACKnAqctDmOnACKnAqctDmSnACKnAqctDmWnACKnAqctDmanACKnAqctDmenACKnAqctDminACKnAqctDmmnACKnAqctDmqnACKnAqctDmunACKnAqctDmynACKnAqctDm2nACKnAqctDm6nACKnAqctDm+nACKnAqctDnCnACKnAqctDnGnACKnAqctDnKnACKnAqctDnOnACKnAqctDnSnACKnAqctDnWnACKnAqctDnanACKnAqctDnenACKnAqctDninACKnAqctDnmnACKnAqctDnqnACKnAqctDnunACKnAqctDnynACKnAqctDn2nACKnAqctDn6nACKnAqctDn+nACKnAqctDoCnACKnAqctDoGnACKnAqctDoKnACKnAqctDoOnACKnAqctDoSnACKnAqctDoWnACKnAqctDoanACKnAqctDoenACKnAqctDoinACKnAqctDomnACKnAqctDoqnACKnAqctDounACKnAqctDoynACKnAqctDo2nACKnAqctDo6nACKnAqctDo+nACKnAqctDpCnACKnAqctDpGnACKnAqctDpKnACKnAqctDpOnACKnAqctDpSnACKnAqctDpWnACKnAqctDpanACKnAqctDpenACKnAqctDpinACKnAqctDpmnACKnAqctDpqnACKnAqctDpunACKnAqctDpynACKnAqctDp2nACKnAqctDp6nACKnAqctDp+nACKnAqctDqCnACKnAqctDqGnACKnAqctDqKnACKnAqctDqOnACKnAqctDk+nLQukTwAiTwJPLQ5PpCcCTwSmLQgApi0KpactCgWoLQpQqS0KBqotCqSrAAgATwAlAAEHMy0CAAAAIgICTy0LTwYnAlAEAgAqT1AFOw4ABgAFIwAAcj4pAgAFANsoEs0KKgEFBiQCAAYAAHJZIwAAfYQtCAEFJwIGBFYACAEGAScDBQQBACIFAgYfMIBUgEsABi0IAQYAAAECAS0OBQYtCAEFAAABAgEuDIBIAAUnAlAEUS0IAFEtCgZSLQoFUwAIAFAAJQABBZMtAgAALQpSTwEiAE+ASwBRLQtRUBwKUFICHApSUQABIgBPgE0AUi0LUlAcClBTAhwKU1IAASIAT4BGAFMtC1NQHApQVAIcClRTAAEiAE+ATgBULQtUUBwKUFUCHApVVAABIgBPgE8AVS0LVVAcClBWAhwKVlUAASIAT4BQAFYtC1ZQHApQVwIcCldWAAAqTwNXLQtXUBwKUFgCHApYVwABIgBPgFEAWC0LWFAcClBZAhwKWVgAACpPBFktC1lQHApQWgIcClpZAAAqTwhaLQtaUBwKUFsCHApbWgAAKk8JWy0LW1AcClBcAhwKXFsAACpPClwtC1xQHApQXQIcCl1cAAEiAE+ARABdLQtdUBwKUF4CHApeXQAAKk8LXi0LXlAcClBfAhwKX14AACpPDF8tC19QHApQYAIcCmBfAAAqTw1gLQtgUBwKUGECHAphYAAAKk8OYS0LYVAcClBiAhwKYmEAACpPD2ItC2JQHApQYwIcCmNiAAAqTxBjLQtjUBwKUGQCHApkYwAAKk8RZC0LZFAcClBlAhwKZWQAACpPEmUtC2VQHApQZgIcCmZlAAAqTxNmLQtmUBwKUGcCHApnZgAAKk8UZy0LZ1AcClBoAhwKaGcAACpPFWgtC2hQHApQaQIcCmloAAAqTxZpLQtpUBwKUGoCHApqaQAAKk8Xai0LalAcClBrAhwKa2oAACpPGGstC2tQHApQbAIcCmxrAAAqTxlsLQtsUBwKUG0CHAptbAAAKk8abS0LbVAcClBuAhwKbm0AACpPG24tC25QHApQbwIcCm9uAAEiAE+AUgBvLQtvUBwKUHACHApwbwAAKk8ccC0LcFAcClBxAhwKcXAAACpPHXEtC3FQHApQcgIcCnJxAAAqTx5yLQtyUBwKUHMCHApzcgAAKk8fcy0Lc1AcClB0AhwKdHMAACpPIHQtC3RQHApQdQIcCnV0AAAqTyF1LQt1UBwKUHYCHAp2dQAAKk8idi0LdlAcClB3AhwKd3YAACpPI3ctC3dQHApQeAIcCnh3AAAqTyR4LQt4UBwKUHkCHAp5eAAAKk8leS0LeVAcClB6AhwKenkAACpPJnotC3pQHApQewIcCnt6AAAqTyd7LQt7UBwKUHwCHAp8ewABIgBPgEMAfC0LfFAcClB9AhwKfXwAACpPKH0tC31QHApQfgIcCn59AAAqTyl+LQt+UBwKUH8CHAp/fgAAKk8qfy0Lf1AcClCAAhwKgH8AACpPK4AtC4BQHApQgQIcCoGAAAAqTyyBLQuBUBwKUIICHAqCgQAAKk8tgi0LglAcClCDAhwKg4IAACpPLoMtC4NQHApQhAIcCoSDAAAqTy+ELQuEUBwKUIUCHAqFhAAAKk8whS0LhVAcClCGAhwKhoUAACpPMYYtC4ZQHApQhwIcCoeGAAAqTzKHLQuHUBwKUIgCHAqIhwAAKk8ziC0LiFAcClCJAhwKiYgAACpPNIktC4lQHApQigIcCoqJAAAqTzWKLQuKUBwKUIsCHAqLigAAKk82iy0Li1AcClCMAhwKjIsAACpPN4wtC4xQHApQjQIcCo2MAAAqTziNLQuNUBwKUI4CHAqOjQAAKk85ji0LjlAcClCPAhwKj44AACpPOo8tC49QHApQkAIcCpCPAAAqTzuQLQuQUBwKUJECHAqRkAAAKk88kS0LkVAcClCSAhwKkpEAACpPPZItC5JQHApQkwIcCpOSAAAqTz6TLQuTUBwKUJQCHAqUkwAAKk8/lC0LlFAcClCVAhwKlZQAACpPQJUtC5VQHApQlgIcCpaVAAAqT0GWLQuWUBwKUJcCHAqXlgAAKk9Cly0Ll1AcClCYAhwKmJcAACpPQ5gtC5hQHApQmQIcCpmYAAAqT0SZLQuZUBwKUJoCHAqamQAAKk9Fmi0LmlAcClCbAhwKm5oAACpPRpstC5tQHApQnAIcCpybAAAqT0ecLQucUBwKUJ0CHAqdnAAAKk9InS0LnVAcClCeAhwKnp0AACpPSZ4tC55QHApQnwIcCp+eAAAqT0qfLQufUBwKUKACHAqgnwAAKk9LoC0LoFAcClChAhwKoaAAACpPTKEtC6FQHApQogIcCqKhAAAqT02iLQuiUBwKUKMCHAqjogAAKk9Ooy0Lo1AcClCkAhwKpKMAASIAT4BTAKQtC6RQHApQpAIcCqRPACcCpASlLQgApS0KBqYtCgWnAAgApAAlAAEGvC0CAAAtCqZQASIAUIBLAAYtCwYFHAoFUAQcClAGAC0IAQUAAAECAS4MgEcABS0IAVAAAAECAS4MgEkAUC0IAaQAAAECAScCpQC+LQ6lpCcCpQSmLQgApi0KBactClCoLQqkqQAIAKUAJQABAYQtAgAAJwKlABItCAGmJwKnBAMACAGnAScDpgQBACKmAqctCqeoLQ6lqAAiqAKoLQ4GqCcCpQSnLQgApy0KpqguCIBNAKkuCIBHAKoACAClACUAAPvzLQIAAC0KqAYLIgAGgEkApQsiAKWARwCmJAIApgAAehclAAD9by0LBaUtC1AFLQukUC0IAaQnAqYEVQAIAaYBJwOkBAEAIqQCpi0KpqctDlGnACKnAqctDlKnACKnAqctDlOnACKnAqctDlSnACKnAqctDlWnACKnAqctDlanACKnAqctDlenACKnAqctDlinACKnAqctDlmnACKnAqctDlqnACKnAqctDlunACKnAqctDlynACKnAqctDl2nACKnAqctDl6nACKnAqctDl+nACKnAqctDmCnACKnAqctDmGnACKnAqctDmKnACKnAqctDmOnACKnAqctDmSnACKnAqctDmWnACKnAqctDmanACKnAqctDmenACKnAqctDminACKnAqctDmmnACKnAqctDmqnACKnAqctDmunACKnAqctDmynACKnAqctDm2nACKnAqctDm6nACKnAqctDm+nACKnAqctDnCnACKnAqctDnGnACKnAqctDnKnACKnAqctDnOnACKnAqctDnSnACKnAqctDnWnACKnAqctDnanACKnAqctDnenACKnAqctDninACKnAqctDnmnACKnAqctDnqnACKnAqctDnunACKnAqctDnynACKnAqctDn2nACKnAqctDn6nACKnAqctDn+nACKnAqctDoCnACKnAqctDoGnACKnAqctDoKnACKnAqctDoOnACKnAqctDoSnACKnAqctDoWnACKnAqctDoanACKnAqctDoenACKnAqctDoinACKnAqctDomnACKnAqctDoqnACKnAqctDounACKnAqctDoynACKnAqctDo2nACKnAqctDo6nACKnAqctDo+nACKnAqctDpCnACKnAqctDpGnACKnAqctDpKnACKnAqctDpOnACKnAqctDpSnACKnAqctDpWnACKnAqctDpanACKnAqctDpenACKnAqctDpinACKnAqctDpmnACKnAqctDpqnACKnAqctDpunACKnAqctDpynACKnAqctDp2nACKnAqctDp6nACKnAqctDp+nACKnAqctDqCnACKnAqctDqGnACKnAqctDqKnACKnAqctDqOnACKnAqctDk+nLQukTwAiTwJPLQ5PpCcCTwSmLQgApi0KpactCgWoLQpQqS0KBqotCqSrAAgATwAlAAEHMy0CAAAAIgICTy0LTwYnAlAEAgAqT1AFOw4ABgAFIwAAfYQpAgAFAL41jmUKKgEFBiQCAAYAAH2fIwAAiMotCAEFJwIGBFYACAEGAScDBQQBACIFAgYfMIBUgEsABi0IAQYAAAECAS0OBQYtCAEFAAABAgEuDIBIAAUnAlAEUS0IAFEtCgZSLQoFUwAIAFAAJQABBZMtAgAALQpSTwEiAE+ASwBRLQtRUBwKUFICHApSUQABIgBPgE0AUi0LUlAcClBTAhwKU1IAASIAT4BGAFMtC1NQHApQVAIcClRTAAEiAE+ATgBULQtUUBwKUFUCHApVVAABIgBPgE8AVS0LVVAcClBWAhwKVlUAASIAT4BQAFYtC1ZQHApQVwIcCldWAAAqTwNXLQtXUBwKUFgC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DlOnACKnAqctDlSnACKnAqctDlWnACKnAqctDlanACKnAqctDlenACKnAqctDlinACKnAqctDlmnACKnAqctDlqnACKnAqctDlunACKnAqctDlynACKnAqctDl2nACKnAqctDl6nACKnAqctDl+nACKnAqctDmCnACKnAqctDmGnACKnAqctDmKnACKnAqctDmOnACKnAqctDmSnACKnAqctDmWnACKnAqctDmanACKnAqctDmenACKnAqctDminACKnAqctDmmnACKnAqctDmqnACKnAqctDmunACKnAqctDmynACKnAqctDm2nACKnAqctDm6nACKnAqctDm+nACKnAqctDnCnACKnAqctDnGnACKnAqctDnKnACKnAqctDnOnACKnAqctDnSnACKnAqctDnWnACKnAqctDnanACKnAqctDnenACKnAqctDninACKnAqctDnmnACKnAqctDnqnACKnAqctDnunACKnAqctDnynACKnAqctDn2nACKnAqctDn6nACKnAqctDn+nACKnAqctDoCnACKnAqctDoGnACKnAqctDoKnACKnAqctDoOnACKnAqctDoSnACKnAqctDoWnACKnAqctDoanACKnAqctDoenACKnAqctDoinACKnAqctDomnACKnAqctDoqnACKnAqctDounACKnAqctDoynACKnAqctDo2nACKnAqctDo6nACKnAqctDo+nACKnAqctDpCnACKnAqctDpGnACKnAqctDpKnACKnAqctDpOnACKnAqctDpSnACKnAqctDpWnACKnAqctDpanACKnAqctDpenACKnAqctDpinACKnAqctDpmnACKnAqctDpqnACKnAqctDpunACKnAqctDpynACKnAqctDp2nACKnAqctDp6nACKnAqctDp+nACKnAqctDqCnACKnAqctDqGnACKnAqctDqKnACKnAqctDqOnACKnAqctDk+nLQukTwAiTwJPLQ5PpCcCTwSmLQgApi0KpactCgWoLQpQqS0KBqotCqSrAAgATwAlAAEHMy0CAAAAIgICTy0LTwYnAlAEAgAqT1AFOw4ABgAFIwAAiMopAgAFADHpr/cKKgEFBiQCAAYAAIjlIwAAlBAtCAEFJwIGBFYACAEGAScDBQQBACIFAgYfMIBUgEsABi0IAQYAAAECAS0OBQYtCAEFAAABAgEu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JQABAYQtAgAAJwKlABQtCAGmJwKnBAMACAGnAScDpgQBACKmAqctCqeoLQ6lqAAiqAKoLQ4GqCcCpQSnLQgApy0KpqguCIBNAKkuCIBHAKoACAClACUAAPvzLQIAAC0KqAYLIgAGgEkApQsiAKWARwCmJAIApgAAkKMlAAD9by0LBaUtC1AFLQukUC0IAaQnAqYEVQAIAaYBJwOkBAEAIqQCpi0KpqctDlGnACKnAqctDlKnACKnAqctDlOnACKnAqctDlSnACKnAqctDlWnACKnAqctDlanACKnAqctDlenACKnAqctDlinACKnAqctDlmnACKnAqctDlqnACKnAqctDlunACKnAqctDlynACKnAqctDl2nACKnAqctDl6nACKnAqctDl+nACKnAqctDmCnACKnAqctDmGnACKnAqctDmKnACKnAqctDmOnACKnAqctDmSnACKnAqctDmWnACKnAqctDmanACKnAqctDmenACKnAqctDminACKnAqctDmmnACKnAqctDmqnACKnAqctDmunACKnAqctDmynACKnAqctDm2nACKnAqctDm6nACKnAqctDm+nACKnAqctDnCnACKnAqctDnGnACKnAqctDnKnACKnAqctDnOnACKnAqctDnSnACKnAqctDnWnACKnAqctDnanACKnAqctDnenACKnAqctDninACKnAqctDnmnACKnAqctDnqnACKnAqctDnunACKnAqctDnynACKnAqctDn2nACKnAqctDn6nACKnAqctDn+nACKnAqctDoCnACKnAqctDoGnACKnAqctDoKnACKnAqctDoOnACKnAqctDoSnACKnAqctDoWnACKnAqctDoanACKnAqctDoenACKnAqctDoinACKnAqctDomnACKnAqctDoqnACKnAqctDounACKnAqctDoynACKnAqctDo2nACKnAqctDo6nACKnAqctDo+nACKnAqctDpCnACKnAqctDpGnACKnAqctDpKnACKnAqctDpOnACKnAqctDpSnACKnAqctDpWnACKnAqctDpanACKnAqctDpenACKnAqctDpinACKnAqctDpmnACKnAqctDpqnACKnAqctDpunACKnAqctDpynACKnAqctDp2nACKnAqctDp6nACKnAqctDp+nACKnAqctDqCnACKnAqctDqGnACKnAqctDqKn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LQuiUBwKUKMCHAqjogAAKk9Ooy0Lo1AcClCkAhwKpKMAASIAT4BTAKQtC6RQHApQpAIcCqRPACcCpASlLQgApS0KBqYtCgWnAAgApAAlAAEGvC0CAAAtCqZQASIAUIBLAAYtCwYFHAoFUAQcClAGAC0IAQUAAAECAS4MgEcABS0IAVAAAAECAS4MgEkAUC0IAaQAAAECAScCpQC7LQ6lpCcCpQSmLQgApi0KBactClCoLQqkqQAIAKUAJQABAYQtAgAAJwKlABUtCAGmJwKnBAMACAGnAScDpgQBACKmAqctCqeoLQ6lqAAiqAKoLQ4GqCcCpQSnLQgApy0KpqguCIBNAKkuCIBHAKoACAClACUAAPvzLQIAAC0KqAYLIgAGgEkApQsiAKWARwCmJAIApgAAm+klAAD9by0LBaUtC1AFLQukUC0IAaQnAqYEVQAIAaYBJwOkBAEAIqQCpi0KpqctDlGnACKnAqctDlKnACKnAqctDlOnACKnAqctDlSnACKnAqctDlWnACKnAqctDlanACKnAqctDlenACKnAqctDlinACKnAqctDlmnACKnAqctDlqnACKnAqctDlunACKnAqctDlynACKnAqctDl2nACKnAqctDl6nACKnAqctDl+nACKnAqctDmCnACKnAqctDmGnACKnAqctDmKnACKnAqctDmOnACKnAqctDmSnACKnAqctDmWnACKnAqctDmanACKnAqctDmenACKnAqctDminACKnAqctDmmnACKnAqctDmqnACKnAqctDmunACKnAqctDmynACKnAqctDm2nACKnAqctDm6nACKnAqctDm+nACKnAqctDnCnACKnAqctDnGnACKnAqctDnKnACKnAqctDnOnACKnAqctDnSnACKnAqctDnWnACKnAqctDnanACKnAqctDnenACKnAqctDninACKnAqctDnmnACKnAqctDnqnACKnAqctDnunACKnAqctDnynACKnAqctDn2nACKnAqctDn6nACKnAqctDn+nACKnAqctDoCnACKnAqctDoGnACKnAqctDoKnACKnAqctDoOnACKnAqctDoSnACKnAqctDoWnACKnAqctDoanACKnAqctDoenACKnAqctDoinACKnAqctDomnACKnAqctDoqnACKnAqctDounACKnAqctDoynACKnAqctDo2nACKn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HApQmQIcCpmYAAAqT0SZLQuZUBwKUJoCHAqamQAAKk9Fmi0LmlAcClCbAhwKm5oAACpPRpstC5tQHApQnAIcCpybAAAqT0ecLQucUBwKUJ0CHAqdnAAAKk9InS0LnVAcClCeAhwKnp0AACpPSZ4tC55QHApQnwIcCp+eAAAqT0qfLQufUBwKUKACHAqgnwAAKk9LoC0LoFAcClChAhwKoaAAACpPTKEtC6FQHApQogIcCqKhAAAqT02iLQuiUBwKUKMCHAqjogAAKk9Ooy0Lo1AcClCkAhwKpKMAASIAT4BTAKQtC6RQHApQpAIcCqRPACcCpASlLQgApS0KBqYtCgWnAAgApAAlAAEGvC0CAAAtCqZQASIAUIBLAAYtCwYFHAoFUAQcClAGAC0IAQUAAAECAS4MgEcABS0IAVAAAAECAS4MgEkAUC0IAaQAAAECAScCpQC6LQ6lpCcCpQSmLQgApi0KBactClCoLQqkqQAIAKUAJQABAYQtAgAAJwKlABYtCAGmJwKnBAMACAGnAScDpgQBACKmAqctCqeoLQ6lqAAiqAKoLQ4GqCcCpQSnLQgApy0KpqguCIBNAKkuCIBHAKoACAClACUAAPvzLQIAAC0KqAYLIgAGgEkApQsiAKWARwCmJAIApgAApy8lAAD9by0LBaUtC1AFLQukUC0IAaQnAqYEVQAIAaYBJwOkBAEAIqQCpi0KpqctDlGnACKnAqctDlKnACKnAqctDlOnACKnAqctDlSnACKnAqctDlWnACKnAqctDlanACKnAqctDlenACKnAqctDlinACKnAqctDlmnACKnAqctDlqnACKnAqctDlunACKnAqctDlynACKnAqctDl2nACKnAqctDl6nACKnAqctDl+nACKnAqctDmCnACKnAqctDmGnACKnAqctDmKnACKnAqctDmOnACKnAqctDmSnACKnAqctDmWnACKnAqctDmanACKnAqctDmenACKnAqctDminACKnAqctDmmnACKnAqctDmqnACKnAqctDmunACKnAqctDmynACKnAqctDm2nACKnAqctDm6nACKnAqctDm+nACKnAqctDnCnACKnAqctDnGnACKnAqctDnKnACKnAqctDnOnACKnAqctDnSnACKnAqctDnWnACKnAqctDnanACKnAqctDnenACKnAqctDninACKnAqctDnmnACKnAqctDnqnACKnAqctDnunACKnAqctDnynACKnAqctDn2nACKnAqctDn6nACKnAqctDn+nACKnAqctDoCnACKnAqctDoGnACKnAqctDoKnACKnAqctDoOnACKnAqctDoSnACKnAqctDoWnACKnAqctDoanACKnAqctDoenACKnAqctDoinACKnAqctDomnACKnAqctDoqnACKnAqctDounACKnAqctDoynACKnAqctDo2nACKnAqctDo6nACKnAqctDo+nACKnAqctDpCnACKnAqctDpGnACKnAqctDpKnACKnAqctDpOnACKnAqctDpSnACKnAqctDpWnACKnAqctDpanACKnAqctDpenACKnAqctDpinACKnAqctDpmnACKnAqctDpqnACKnAqctDpunACKnAqctDpynACKnAqctDp2nACKnAqctDp6nACKnAqctDp+nACKnAqctDqCnACKnAqctDqGnACKnAqctDqKnACKnAqctDqOnACKnAqctDk+nLQukTwAiTwJPLQ5PpCcCTwSmLQgApi0KpactCgWoLQpQqS0KBqotCqSrAAgATwAlAAEHMy0CAAAAIgICTy0LTwYnAlAEAgAqT1AFOw4ABgAFIwAAqpwpAgAFABUxTmEKKgEFBiQCAAYAAKq3IwAAteItCAEFJwIGBFYACAEGAScDBQQBACIFAgYfMIBUgEsABi0IAQYAAAECAS0OBQYtCAEFAAABAgEuDIBIAAUnAlAEUS0IAFEtCgZSLQoFUwAIAFAAJQABBZMtAgAALQpSTwEiAE+ASwBRLQtRUBwKUFICHApSUQABIgBPgE0AUi0LUlAcClBTAhwKU1IAASIAT4BGAFMtC1NQHApQVAIcClRTAAEiAE+ATgBULQtUUBwKUFUCHApVVAABIgBPgE8AVS0LVVAcClBWAhwKVlUAASIAT4BQAFYtC1ZQHApQVwIcCldWAAAqTwNXLQtXUBwKUFgCHApYVwABIgBPgFEAWC0LWFAcClBZAhwKWVgAACpPBFktC1lQHApQWgIcClpZAAAqTwhaLQtaUBwKUFsCHApbWgAAKk8JWy0LW1AcClBcAhwKXFsAACpPClwtC1xQHApQXQIcCl1cAAEiAE+ARABdLQtdUBwKUF4CHApeXQAAKk8LXi0LXlAcClBfAhwKX14AACpPDF8tC19QHApQ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ACKnAqctDmWnACKnAqctDmanACKnAqctDmenACKnAqctDminACKnAqctDmmnACKnAqctDmqnACKnAqctDmunACKnAqctDmynACKnAqctDm2nACKnAqctDm6nACKnAqctDm+nACKnAqctDnCnACKnAqctDnGnACKnAqctDnKnACKnAqctDnOnACKnAqctDnSnACKnAqctDnWnACKnAqctDnanACKnAqctDnenACKnAqctDninACKnAqctDnmnACKnAqctDnqnACKnAqctDnunACKnAqctDnynACKnAqctDn2nACKnAqctDn6nACKnAqctDn+nACKnAqctDoCnACKnAqctDoGnACKnAqctDoKnACKnAqctDoOnACKnAqctDoSnACKnAqctDoWnACKnAqctDoanACKnAqctDoenACKnAqctDoinACKnAqctDomnACKnAqctDoqnACKnAqctDounACKnAqctDoynACKnAqctDo2nACKnAqctDo6nACKnAqctDo+nACKnAqctDpCnACKnAqctDpGnACKnAqctDpKnACKnAqctDpOnACKnAqctDpSnACKnAqctDpWnACKnAqctDpanACKnAqctDpenACKnAqctDpinACKnAqctDpmnACKnAqctDpqnACKnAqctDpunACKnAqctDpynACKnAqctDp2nACKnAqctDp6nACKnAqctDp+nACKnAqctDqCnACKnAqctDqGnACKnAqctDqKnACKnAqctDqOnACKnAqctDk+nLQukTwAiTwJPLQ5PpCcCTwSmLQgApi0KpactCgWoLQpQqS0KBqotCqSrAAgATwAlAAEHMy0CAAAAIgICTy0LTwYnAlAEAgAqT1AFOw4ABgAFIwAAteIpAgAFAEMAu8gKKgEFBiQCAAYAALX9IwAAwSgtCAEFJwIGBFYACAEGAScDBQQBACIFAgYfMIBUgEsABi0IAQYAAAECAS0OBQYtCAEFAAABAgEuDIBIAAUnAlAEUS0IAFEtCgZSLQoFUwAIAFAAJQABBZMtAgAALQpSTwEiAE+ASwBRLQtRUBwKUFICHApSUQABIgBPgE0AUi0LUlAcClBTAhwKU1IAASIAT4BGAFMtC1NQHApQVAIcClRTAAEiAE+ATgBULQtUUBwKUFUCHApVVAABIgBPgE8AVS0LVVAcClBWAhwKVlUAASIAT4BQAFYtC1ZQHApQVwIcCldWAAAqTwNXLQtXUBwKUFgCHApYVwABIgBPgFEAWC0LWFAcClBZAhwKWVgAACpPBFktC1lQHApQWgIcClpZAAAqTwhaLQtaUBwKUFsCHApbWgAAKk8JWy0LW1AcClBcAhwKXFsAACpPClwtC1xQHApQXQIcCl1cAAEiAE+ARABdLQtdUBwKUF4CHApeXQAAKk8LXi0LXlAcClBfAhwKX14AACpPDF8tC19QHApQYAIcCmBfAAAqTw1gLQtgUBwKUGECHAphYAAAKk8OYS0LYVAcClBiAhwKYmEAACpPD2ItC2JQHApQYwIcCmNiAAAqTxBjLQtjUBwKUGQCHApkYwAAKk8RZC0LZFAcClBlAhwKZWQAACpPEmUtC2VQHApQZgIcCmZlAAAqTxNmLQtmUBwKUGcCHApnZgAAKk8UZy0LZ1AcClBoAhwKaGcAACpPFWgtC2hQHApQaQIcCmloAAAqTxZpLQtpUBwKUGoCHApqaQAAKk8Xai0LalAcClBrAhwKa2oAACpPGGstC2tQHApQbAIcCmxrAAAqTxlsLQtsUBwKUG0CHAptbAAAKk8abS0LbVAcClBuAhwKbm0AACpPG24tC25QHApQbwIcCm9uAAEiAE+AUgBvLQtvUBwKUHACHApwbwAAKk8ccC0LcFAcClBxAhwKcXAAACpPHXEtC3FQHApQcgIcCnJxAAAqTx5yLQtyUBwKUHMCHApzcgAAKk8fcy0Lc1AcClB0AhwKdHMAACpPIHQtC3RQHApQdQIcCnV0AAAqTyF1LQt1UBwKUHYCHAp2dQAAKk8idi0LdlAcClB3AhwKd3YAACpPI3ctC3dQHApQeAIcCnh3AAAqTyR4LQt4UBwKUHkCHAp5eAAAKk8leS0LeVAcClB6AhwKenkAACpPJnotC3pQHApQewIcCnt6AAAqTyd7LQt7UBwKUHwCHAp8ewABIgBPgEMAfC0LfFAcClB9AhwKfXwAACpPKH0tC31QHApQfgIcCn59AAAqTyl+LQt+UBwKUH8CHAp/fgAAKk8qfy0Lf1AcClCAAhwKgH8AACpPK4AtC4BQHApQgQIcCoGAAAAqTyyBLQuBUBwKUIICHAqCgQAAKk8tgi0LglAcClCDAhwKg4IAACpPLoMtC4NQHApQhAIcCoSDAAAqTy+ELQuEUBwKUIUCHAqFhAAAKk8whS0LhVAcClCGAhwKhoUAACpPMYYtC4ZQHApQhwIcCoeGAAAqTzKHLQuHUBwKUIgCHAqIhwAAKk8ziC0LiFAcClCJAhwKiYgAACpPNIktC4lQHApQigIcCoqJAAAqTzWKLQuKUBwKUIsCHAqLigAAKk82iy0Li1AcClCMAhwKjIsAACpPN4wtC4xQHApQjQIcCo2MAAAqTziNLQuNUBwKUI4CHAqOjQAAKk85ji0LjlAcClCPAhwKj44AACpPOo8tC49QHApQkAIcCpCPAAAqTzuQLQuQUBwKUJECHAqRkAAAKk88kS0LkVAcClCSAhwKkpEAACpPPZItC5JQHApQkwIcCpOSAAAqTz6TLQuTUBwKUJQCHAqUkwAAKk8/lC0LlFAcClCVAhwKlZQAACpPQJUtC5VQHApQlgIcCpaVAAAqT0GWLQuWUBwKUJcCHAqXlgAAKk9Cly0Ll1AcClCYAhwKmJcAACpPQ5gtC5hQHApQmQIcCpmYAAAqT0SZLQuZUBwKUJoCHAqamQAAKk9Fmi0LmlAcClCbAhwKm5oAACpPRpstC5tQHApQnAIcCpybAAAqT0ecLQucUBwKUJ0CHAqdnAAAKk9InS0LnVAcClCeAhwKnp0AACpPSZ4tC55QHApQnwIcCp+eAAAqT0qfLQufUBwKUKACHAqgnwAAKk9LoC0LoFAcClChAhwKoaAAACpPTKEtC6FQHApQogIcCqKhAAAqT02iLQuiUBwKUKMCHAqjogAAKk9Ooy0Lo1AcClCkAhwKpKMAASIAT4BTAKQtC6RQHApQpAIcCqRPACcCpASlLQgApS0KBqYtCgWnAAgApAAlAAEGvC0CAAAtCqZQASIAUIBLAAYtCwYFHAoFUAQcClAGAC0IAQUAAAECAS4MgEcABS0IAVAAAAECAS4MgEkAUC0IAaQAAAECAScCpQC4LQ6lpCcCpQSmLQgApi0KBactClCoLQqkqQAIAKUAJQABAYQtAgAAJwKlABgtCAGmJwKnBAMACAGnAScDpgQBACKmAqctCqeoLQ6lqAAiqAKoLQ4GqCcCpQSnLQgApy0KpqguCIBNAKkuCIBHAKoACAClACUAAPvzLQIAAC0KqAYLIgAGgEkApQsiAKWARwCmJAIApgAAvbslAAD9by0LBaUtC1AFLQukUC0IAaQnAqYEVQAIAaYBJwOkBAEAIqQCpi0KpqctDlGnACKnAqctDlKnACKnAqctDlOnACKnAqctDlSnACKnAqctDlWnACKnAqctDlanACKnAqctDlenACKnAqctDlinACKnAqctDlmnACKnAqctDlqnACKnAqctDlunACKnAqctDlynACKnAqctDl2nACKnAqctDl6nACKnAqctDl+nACKnAqctDmCnACKnAqctDmGnACKnAqctDmKnACKnAqctDmOnACKnAqctDmSnACKnAqctDmWnACKnAqctDmanACKnAqctDmenACKnAqctDminACKnAqctDmmnACKnAqctDmqnACKnAqctDmunACKnAqctDmynACKnAqctDm2nACKnAqctDm6nACKnAqctDm+nACKnAqctDnCnACKnAqctDnGnACKnAqctDnKnACKnAqctDnOnACKnAqctDnSnACKnAqctDnWnACKnAqctDnanACKnAqctDnenACKnAqctDninACKnAqctDnmnACKnAqctDnqnACKnAqctDnunACKnAqctDnynACKnAqctDn2nACKnAqctDn6nACKnAqctDn+nACKnAqctDoCnACKnAqctDoGnACKnAqctDoKnACKnAqctDoOnACKnAqctDoSnACKnAqctDoWnACKnAqctDoanACKnAqctDoenACKnAqctDoinACKnAqctDomnACKnAqctDoqnACKnAqctDounACKnAqctDoynACKnAqctDo2nACKnAqctDo6nACKnAqctDo+nACKnAqctDpCnACKnAqctDpGnACKnAqctDpKnACKnAqctDpOnACKnAqctDpSnACKnAqctDpWnACKnAqctDpanACKnAqctDpenACKnAqctDpinACKnAqctDpmnACKnAqctDpqnACKnAqctDpunACKnAqctDpynACKnAqctDp2nACKnAqctDp6nACKnAqctDp+nACKnAqctDqCnACKnAqctDqGnACKnAqctDqKnACKnAqctDqOnACKnAqctDk+nLQukTwAiTwJPLQ5PpCcCTwSmLQgApi0KpactCgWoLQpQqS0KBqotCqSrAAgATwAlAAEHMy0CAAAAIgICTy0LTwYnAlAEAgAqT1AFOw4ABgAFIwAAwSgpAgAFAF2pN04KKgEFBiQCAAYAAMFDIwAAzG4tCAEFJwIGBFYACAEGAScDBQQBACIFAgYf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LQ6lpCcCpQSmLQgApi0KBactClCoLQqkqQAIAKUAJQABAYQtAgAAJwKlABktCAGmJwKnBAMACAGnAScDpgQBACKmAqctCqeoLQ6lqAAiqAKoLQ4GqCcCpQSnLQgApy0KpqguCIBNAKkuCIBHAKoACAClACUAAPvzLQIAAC0KqAYLIgAGgEkApQsiAKWARwCmJAIApgAAyQElAAD9by0LBaUtC1AFLQukUC0IAaQnAqYEVQAIAaYBJwOkBAEAIqQCpi0KpqctDlGnACKnAqctDlKnACKnAqctDlOnACKnAqctDlSnACKnAqctDlWnACKnAqctDlanACKnAqctDlenACKnAqctDlinACKnAqctDlmnACKnAqctDlqnACKnAqctDlunACKnAqctDlynACKnAqctDl2nACKnAqctDl6nACKnAqctDl+nACKnAqctDmCnACKnAqctDmGnACKnAqctDmKnACKnAqctDmOnACKnAqctDmSnACKnAqctDmWnACKnAqctDmanACKnAqctDmenACKnAqctDminACKnAqctDmmnACKnAqctDmqnACKnAqctDmunACKnAqctDmynACKnAqctDm2nACKnAqctDm6nACKnAqctDm+nACKnAqctDnCnACKnAqctDnGnACKnAqctDnKnACKnAqctDnOnACKnAqctDnSnACKnAqctDnWnACKnAqctDnanACKnAqctDnenACKnAqctDninACKnAqctDnmnACKnAqctDnqnACKnAqctDnunACKnAqctDnynACKnAqctDn2nACKnAqctDn6nACKnAqctDn+nACKnAqctDoCnACKnAqctDoGnACKnAqctDoKnACKnAqctDoOnACKnAqctDoSnACKnAqctDoWnACKnAqctDoanACKnAqctDoenACKnAqctDoinACKnAqctDomnACKnAqctDoqnACKnAqctDounACKnAqctDoynACKnAqctDo2nACKnAqctDo6nACKnAqctDo+nACKnAqctDpCnACKnAqctDpGnACKnAqctDpKnACKnAqctDpOnACKnAqctDpSnACKnAqctDpWnACKnAqctDpanACKnAqctDpenACKnAqctDpinACKnAqctDpmnACKnAqctDpqnACKnAqctDpunACKnAqctDpynACKnAqctDp2nACKnAqctDp6nACKnAqct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AhwKoaAAACpPTKEtC6FQHApQogIcCqKhAAAqT02iLQuiUBwKUKMCHAqjogAAKk9Ooy0Lo1AcClCkAhwKpKMAASIAT4BTAKQtC6RQHApQpAIcCqRPACcCpASlLQgApS0KBqYtCgWnAAgApAAlAAEGvC0CAAAtCqZQASIAUIBLAAYtCwYFHAoFUAQcClAGAC0IAQUAAAECAS4MgEcABS0IAVAAAAECAS4MgEkAUC0IAaQAAAECAScCpQC2LQ6lpCcCpQSmLQgApi0KBactClCoLQqkqQAIAKUAJQABAYQtAgAAJwKlABotCAGmJwKnBAMACAGnAScDpgQBACKmAqctCqeoLQ6lqAAiqAKoLQ4GqCcCpQSnLQgApy0KpqguCIBNAKkuCIBHAKoACAClACUAAPvzLQIAAC0KqAYLIgAGgEkApQsiAKWARwCmJAIApgAA1EclAAD9by0LBaUtC1AFLQukUC0IAaQnAqYEVQAIAaYBJwOkBAEAIqQCpi0KpqctDlGnACKnAqctDlKnACKnAqctDlOnACKnAqctDlSnACKnAqctDlWnACKnAqctDlanACKnAqctDlenACKnAqctDlinACKnAqctDlmnACKnAqctDlqnACKnAqctDlunACKnAqctDlynACKnAqctDl2nACKnAqctDl6nACKnAqctDl+nACKnAqctDmCnACKnAqctDmGnACKnAqctDmKnACKnAqctDmOnACKnAqctDmSnACKnAqctDmWnACKnAqctDmanACKnAqctDmenACKnAqctDminACKnAqctDmmnACKnAqctDmqnACKnAqctDmunACKnAqctDmynACKnAqctDm2nACKnAqctDm6nACKnAqctDm+nACKnAqctDnCnACKnAqctDnGnACKnAqctDnKnACKnAqctDnOnACKnAqctDnSnACKnAqctDnWnACKnAqctDnanACKnAqctDnenACKnAqctDninACKnAqctDnmnACKnAqctDnqnACKnAqctDnunACKnAqctDnynACKnAqctDn2nACKnAqctDn6nACKnAqctDn+nACKnAqctDoCnACKnAqctDoGnACKnAqctDoKnACKnAqctDoOnACKnAqctDoSnACKnAqctDoWnACKnAqctDoanACKnAqctDoenACKnAqctDoinACKnAqctDomnACKnAqctDoqnACKnAqctDounACKnAqctDoynACKnAqctDo2nACKnAqctDo6nACKnAqctDo+nACKnAqctDpCnACKnAqctDpGnACKnAqctDpKnACKnAqctDpOnACKnAqctDpSnACKnAqctDpWnACKnAqctDpanACKnAqctDpenACKnAqctDpinACKnAqctDpmnACKnAqctDpqnACKnAqctDpunACKnAqctDpynACKnAqctDp2nACKnAqctDp6nACKnAqctDp+nACKnAqctDqCnACKnAqctDqGnACKnAqctDqKnACKnAqctDqOnACKnAqctDk+nLQukTwAiTwJPLQ5PpCcCTwSmLQgApi0KpactCgWoLQpQqS0KBqotCqSrAAgATwAlAAEHMy0CAAAAIgICTy0LTwYnAlAEAgAqT1AFOw4ABgAFIwAA17QpAgAFAD9t1E4KKgEFBiQCAAYAANfPIwAA4votCAEFJwIGBFYACAEGAScDBQQBACIFAgYfMIBUgEsABi0IAQYAAAECAS0OBQYtCAEFAAABAgEuDIBIAAUnAlAEUS0IAFEtCgZSLQoFUwAIAFAAJQABBZMtAgAALQpSTwEiAE+ASwBRLQtRUBwKUFICHApSUQABIgBPgE0AUi0LUlAcClBTAhwKU1IAASIAT4BGAFMtC1NQHApQVAIcClRTAAEiAE+ATgBULQtUUBwKUFUCHApVVAABIgBPgE8AVS0LVVAcClBWAhwKVlUAASIAT4BQAFYtC1ZQHApQVwIcCldWAAAqTwNXLQtXUBwKUFgCHApYVwABIgBPgFEAWC0LWFAcClBZAhwKWVgAACpPBFktC1lQHApQWgIcClpZAAAqTwhaLQtaUBwKUFsCHApbWgAAKk8JWy0LW1AcClBcAhwKXFsAACpPClwtC1xQHApQXQIcCl1cAAEiAE+ARABdLQtdUBwKUF4CHApeXQAAKk8LXi0LXlAcClBfAhwKX14AACpPDF8tC19QHApQYAIcCmBfAAAqTw1gLQtgUBwKUGECHAphYAAAKk8OYS0LYVAcClBiAhwKYmEAACpPD2ItC2JQHApQYwIcCmNiAAAqTxBjLQtjUBwKUGQCHApkYwAAKk8RZC0LZFAcClBlAhwKZWQAACpPEmUtC2VQHApQZgIcCmZlAAAqTxNmLQtmUBwKUGcCHApnZgAAKk8UZy0LZ1AcClBoAhwKaGcAACpPFWgtC2hQHApQaQIcCmloAAAqTxZpLQtpUBwKUGoCHApqaQAAKk8Xai0LalAcClBrAhwKa2oAACpPGGstC2tQHApQbAIcCmxrAAAqTxlsLQtsUBwKUG0CHAptbAAAKk8abS0LbVAcClBuAhwKbm0AACpPG24tC25QHApQbwIcCm9uAAEiAE+AUgBvLQtvUBwKUHACHApwbwAAKk8ccC0LcFAcClBxAhwKcXAAACpPHXEtC3FQHApQcgIcCnJxAAAqTx5yLQtyUBwKUHMCHApzcgAAKk8fcy0Lc1AcClB0AhwKdHMAACpPIHQtC3RQHApQdQIcCnV0AAAqTyF1LQt1UBwKUHYCHAp2dQAAKk8idi0LdlAcClB3AhwKd3YAACpPI3ctC3dQHApQeAIcCnh3AAAqTyR4LQt4UBwKUHkCHAp5eAAAKk8leS0LeVAcClB6AhwKenkAACpPJnotC3pQHApQewIcCnt6AAAqTyd7LQt7UBwKUHwCHAp8ewABIgBPgEMAfC0LfFAcClB9AhwKfXwAACpPKH0tC31QHApQfgIcCn59AAAqTyl+LQt+UBwKUH8CHAp/fgAAKk8qfy0Lf1AcClCAAhwKgH8AACpPK4AtC4BQHApQgQIcCoGAAAAqTyyBLQuBUBwKUIICHAqCgQAAKk8tgi0LglAcClCDAhwKg4IAACpPLoMtC4NQHApQhAIcCoSDAAAqTy+ELQuEUBwKUIUCHAqFhAAAKk8whS0LhVAcClCGAhwKhoUAACpPMYYtC4ZQHApQhwIcCoeGAAAqTzKHLQuHUBwKUIgCHAqIhwAAKk8ziC0LiFAcClCJAhwKiYgAACpPNIktC4lQHApQigIcCoqJAAAqTzWKLQuKUBwKUIsCHAqLigAAKk82iy0Li1AcClCMAhwKjIsAACpPN4wtC4xQHApQjQIcCo2MAAAqTziNLQuNUBwKUI4CHAqOjQAAKk85ji0LjlAcClCPAhwKj44AACpPOo8tC49QHApQkAIcCpCPAAAqTzuQLQuQUBwKUJECHAqRkAAAKk88kS0LkVAcClCSAhwKkpEAACpPPZItC5JQHApQkwIcCpOSAAAqTz6TLQuTUBwKUJQCHAqUkwAAKk8/lC0LlFAcClCVAhwKlZQAACpPQJUtC5VQHApQlgIcCpaVAAAqT0GWLQuWUBwKUJcCHAqXlgAAKk9Cly0Ll1AcClCYAhwKmJcAACpPQ5gtC5hQHApQmQIcCpmYAAAqT0SZLQuZUBwKUJoCHAqamQAAKk9Fmi0LmlAcClCbAhwKm5oAACpPRpstC5tQHApQnAIcCpybAAAqT0ecLQucUBwKUJ0CHAqdnAAAKk9InS0LnVAcClCeAhwKnp0AACpPSZ4tC55QHApQnwIcCp+eAAAqT0qfLQufUBwKUKACHAqgnwAAKk9LoC0LoFAcClChAhwKoaAAACpPTKEtC6FQHApQogIcCqKhAAAqT02iLQuiUBwKUKMCHAqjogAAKk9Ooy0Lo1AcClCkAhwKpKMAASIAT4BTAKQtC6RQHApQpAIcCqRPACcCpASlLQgApS0KBqYtCgWnAAgApAAlAAEGvC0CAAAtCqZQASIAUIBLAAYtCwYFHAoFUAQcClAGAC0IAQUAAAECAS4MgEcABS0IAVAAAAECAS4MgEkAUC0IAaQAAAECAScCpQC1LQ6lpCcCpQSmLQgApi0KBactClCoLQqkqQAIAKUAJQABAYQtAgAAJwKlABstCAGmJwKnBAMACAGnAScDpgQBACKmAqctCqeoLQ6lqAAiqAKoLQ4GqCcCpQSnLQgApy0KpqguCIBNAKkuCIBHAKoACAClACUAAPvzLQIAAC0KqAYLIgAGgEkApQsiAKWARwCmJAIApgAA340lAAD9by0LBaUtC1AFLQukUC0IAaQnAqYEVQAIAaYBJwOkBAEAIqQCpi0KpqctDlGnACKnAqctDlKnACKnAqctDlOnACKnAqctDlSnACKnAqctDlWnACKnAqctDlanACKnAqctDlenACKnAqctDlinACKnAqctDlmnACKnAqctDlqnACKnAqctDlunACKnAqctDlynACKnAqctDl2nACKnAqctDl6nACKnAqctDl+nACKnAqctDmCnACKnAqctDmGnACKnAqctDmKnACKnAqctDmOnACKnAqctDmSnACKnAqctDmWnACKnAqctDmanACKnAqctDmenACKnAqctDminACKnAqctDmmnACKnAqctDmqnACKnAqctDmunACKnAqctDmynACKnAqctDm2nACKnAqctDm6nACKnAqctDm+nACKnAqctDnCnACKnAqctDnGnACKnAqctDnKnACKnAqctDnOnACKnAqctDnSnACKnAqctDnWnACKnAqctDnanACKnAqctDnenACKnAqctDninACKnAqctDnmnACKnAqctDnqnACKnAqctDnunACKnAqctDnynACKnAqctDn2nACKnAqctDn6nACKnAqctDn+nACKnAqctDoCnACKnAqctDoGnACKnAqctDoKnACKnAqctDoOnACKnAqctDoSnACKnAqctDoWnACKnAqctDoanACKnAqctDoenACKnAqctDoinACKnAqctDomnACKnAqctDoqnACKnAqctDounACKnAqctDoynACKnAqctDo2nACKnAqctDo6nACKnAqctDo+nACKnAqctDpCnACKnAqctDpGnACKnAqctDpKnACKnAqctDpOnACKnAqctDpSnACKnAqctDpWnACKnAqctDpanACKnAqctDpenACKnAqctDpinACKnAqctDpmnACKnAqctDpqnACKnAqctDpunACKnAqctDpynACKnAqctDp2nACKnAqctDp6nACKnAqctDp+nACKnAqctDqCnACKnAqctDqGnACKnAqctDqKnACKnAqctDqOnACKnAqctDk+nLQukTwAiTwJPLQ5PpCcCTwSmLQgApi0KpactCgWoLQpQqS0KBqotCqSrAAgATwAlAAEHMy0CAAAAIgICTy0LTwYnAlAEAgAqT1AFOw4ABgAFIwAA4vopAgAFAIGsE/AKKgEFBiQCAAYAAOMVIwAA7kAtCAEFJwIGBFYACAEGAScDBQQBACIFAgYfMIBUgEsABi0IAQYAAAECAS0OBQYtCAEFAAABAgEuDIBIAAUnAlAEUS0IAFEtCgZSLQoFUwAIAFAAJQABBZMtAgAALQpSTwEiAE+ASwBRLQtRUBwKUFICHApSUQABIgBPgE0AUi0LUlAcClBTAhwKU1IAASIAT4BGAFMtC1NQHApQVAIcClRTAAEiAE+ATgBULQtUUBwKUFUCHApVVAABIgBPgE8AVS0LVVAcClBWAhwKVlUAASIAT4BQAFYtC1ZQHApQVwIcCldWAAAqTwNXLQtXUBwKUFcCHApXAwABIgBPgFEAVy0LV1AcClBYAhwKWFcAACpPBFgtC1hQHApQWAIcClgEAAAqTwhYLQtYUBwKUFgCHApYCAAAKk8JWC0LWFAcClBYAhwKWAkAACpPClgtC1hQHApQWAIcClgKAAEiAE+ARABYLQtYUBwKUFkCHApZWAAA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Dg5eACJeAl4tDg9eACJeAl4tDhBeACJeAl4tDhFeACJeAl4tDhJeACJeAl4tDhNeACJeAl4tDhReACJeAl4tDhVeACJeAl4tDhZeACJeAl4tDhdeACJeAl4tDhheACJeAl4tDhleACJeAl4tDhpeACJeAl4tDhteACJeAl4tDlleACJeAl4tDhxeACJeAl4tDh1eACJeAl4tDh5eACJeAl4tDh9eACJeAl4tDiBeACJeAl4tDiFeACJeAl4tDiJeACJeAl4tDiNeACJeAl4tDiReACJeAl4tDiVeACJeAl4tDiZeACJeAl4tDideACJeAl4tDlpeACJeAl4tDiheACJeAl4tDileACJeAl4tDipeACJeAl4tDiteACJeAl4tDixeACJeAl4tDi1eACJeAl4tDi5eACJeAl4tDi9eACJeAl4tDjBeACJeAl4tDjFeACJeAl4tDjJeACJeAl4tDjNeACJeAl4tDjReACJeAl4tDjVeACJeAl4tDjZeACJeAl4tDjdeACJeAl4tDjheACJeAl4tDjleACJeAl4tDjpeACJeAl4tDjteACJeAl4tDjxeACJeAl4tDj1eACJeAl4tDj5eACJeAl4tDj9eACJeAl4tDkBeACJeAl4tDkFeACJeAl4tDkJeACJeAl4tDkNeACJeAl4tDkReACJeAl4tDkVeACJeAl4tDkZeACJeAl4tDkdeACJeAl4tDkheACJeAl4tDkleACJeAl4tDkpeACJeAl4tDkteACJeAl4tDkxeACJeAl4tDk1eACJeAl4tDk5eACJeAl4tDk9eLQtbAwAiAwIDLQ4DWycCAwRdLQgAXS0KXF4tCgVfLQpQYC0KBmEtCltiAAgAAwAlAAEHMy0CAAAAIgICBS0LBQQnAgYEAgAqBQYDOw4ABAADIwAA7kApAgADAJT/ZHUKKgEDBCQCAAQAAO5bIwAA7+ItCAEDJwIEBAIACAEEAScDAwQBACIDAgQfMIBLgEsABC0IAQQAAAECAS0OAwQtCAEDAAABAgEuDIBIAAMnAgYECC0IAAgtCgQJLQoDCgAIAAYAJQABB4gtAgAALQoJBQEiAAWASwAELQsEAxwKAwUEHAoFBAAtCAEDAAABAgEuDIBHAAMtCAEFAAABAgEuDIBJAAUtCAEGAAABAgEnAggAoi0OCAYnAggECS0IAAktCgMKLQoF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",
      "debug_symbols": "",
      "brillig_names": [
        "public_dispatch"
      ]
    },
    {
      "name": "publish_message_in_private",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs",
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::call_context::CallContext",
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::block_header::BlockHeader",
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::content_commitment::ContentCommitment",
                          "fields": [
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::state_reference::StateReference",
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::partial_state_reference::PartialStateReference",
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::global_variables::GlobalVariables",
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::transaction::tx_context::TxContext",
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::gas_settings::GasSettings",
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "nonce",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 64
            },
            "visibility": "private"
          },
          {
            "name": "payloads",
            "type": {
              "kind": "array",
              "length": 8,
              "type": {
                "kind": "array",
                "length": 31,
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 8
                }
              }
            },
            "visibility": "private"
          },
          {
            "name": "message_fee",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 128
            },
            "visibility": "private"
          },
          {
            "name": "consistency",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 8
            },
            "visibility": "private"
          },
          {
            "name": "from",
            "type": {
              "kind": "struct",
              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "token_nonce",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::call_context::CallContext",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ]
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "include_by_timestamp",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::include_by_timestamp::IncludeByTimestamp",
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "kind": "struct",
                        "path": "std::option::Option",
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest",
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint",
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::note_hash::NoteHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::nullifier::Nullifier",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::private_call_request::PrivateCallRequest",
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::call_context::CallContext",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "calldata_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "calldata_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message",
                          "fields": [
                            {
                              "name": "recipient",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "content",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::private_log::PrivateLogData",
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::log::Log",
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            },
                            {
                              "name": "length",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::log_hash::LogHash",
                          "fields": [
                            {
                              "name": "value",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "length",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::block_header::BlockHeader",
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::content_commitment::ContentCommitment",
                        "fields": [
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::state_reference::StateReference",
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::partial_state_reference::PartialStateReference",
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::global_variables::GlobalVariables",
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::address::eth_address::EthAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::transaction::tx_context::TxContext",
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::gas_settings::GasSettings",
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "visibility": "databus"
        },
        "error_types": {
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3095323350861740601": {
            "error_kind": "fmtstring",
            "length": 132,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5389888835557273632": {
            "error_kind": "string",
            "string": "insufficient fee"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "11418088424205762236": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": []
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "discover_new_messages",
        "store_in_execution_cache_oracle_wrapper",
        "call_private_function_internal",
        "store_in_execution_cache_oracle_wrapper",
        "notify_enqueued_public_function_call_wrapper",
        "directive_invert"
      ],
      "verification_key": "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\nPa5YgJ+q7saoanj0s7xh8Z1ucGk1m79H5/kH"
    },
    {
      "name": "publish_message_in_public",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "nonce",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 64
            },
            "visibility": "private"
          },
          {
            "name": "payloads",
            "type": {
              "kind": "array",
              "length": 8,
              "type": {
                "kind": "array",
                "length": 31,
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 8
                }
              }
            },
            "visibility": "private"
          },
          {
            "name": "message_fee",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 128
            },
            "visibility": "private"
          },
          {
            "name": "consistency",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 8
            },
            "visibility": "private"
          },
          {
            "name": "from",
            "type": {
              "kind": "struct",
              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "token_nonce",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 64
          },
          "visibility": "public"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5389888835557273632": {
            "error_kind": "string",
            "string": "insufficient fee"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "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",
      "brillig_names": [
        "publish_message_in_public"
      ]
    },
    {
      "name": "set_guardian1",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "guardian",
            "type": {
              "kind": "struct",
              "path": "structs::Guardian",
              "fields": [
                {
                  "name": "address",
                  "type": {
                    "kind": "struct",
                    "path": "structs::Guardian_PK",
                    "fields": [
                      {
                        "name": "value0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "index",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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HBsAHAodHAAcCh4dABwKHx4AHAogHwAcCiEgABwKIiEAHAojIgAcCiQjABwKJSQAHAomJQAcCicmABwKKCcAHAopKAAcCiopABwKKyoAHAosKwAcCi0sABwKLi0AHAovLgAcCjAvABwKMTAAHAoyMQAcCjMyABwKNDMAHAo1NAAcCjY1ABwKNzYAHAo4NwAcCjk4ABwKOjkAHAo7OgAcCjw7ABwKPTwAHAo+PQAcCj8+ABwKQD8AHApBQAAcCkJBABwKQ0IAHApEQwAcCkVEABwKRkUAHApHRgAcCkhHABwKSUgAHApKSQAcCktKABwKTEsAHApNTAAcCk5NABwKT04AHApQTwAcClFQABwKUlEAHApTUgAcClRTAC0IAVQnAlgEVQAIAVgBJwNUBAEAIlQCWC0KWFktDlVZACJZAlktDgFZACJZAlktDgJZACJZAlktDgNZACJZAlktDgRZACJZAlktDgVZACJZAlktDgZZACJZAlktDgdZACJZAlktDghZACJZAlktDglZACJZAlktDgpZACJZAlktDgtZACJZAlktDgxZACJZAlktDg1ZACJZAlktDg5ZACJZAlktDg9ZACJZAlktDhBZACJZAlktDhFZACJZAlktDhJZACJZAlktDhNZACJZAlktDhRZACJZAlktDhVZACJZAlktDhZZACJZAlktDhdZACJZAlktDhhZACJZAlktDhlZACJZAlktDhpZACJZAlktDhtZACJZAlktDhxZACJZAlktDh1ZACJZAlktDh5ZACJZAlktDh9ZACJZAlktDiBZACJZAlktDiFZACJZAlktDiJZACJZAlktDiNZACJZAlktDiRZACJZAlktDiVZACJZAlktDiZZACJZAlktDidZACJZAlktDihZACJZAlktDilZACJZAlktDipZACJZAlktDitZACJZAlktDixZACJZAlktDi1ZACJZAlktDi5ZACJZAlktDi9ZACJZAlktDjBZACJZAlktDjFZACJZAlktDjJZACJZAlktDjNZACJZAlktDjRZACJZAlktDjVZACJZAlktDjZZACJZAlktDjdZACJZAlktDjhZACJZAlktDjlZACJZAlktDjpZACJZAlktDjtZACJZAlktDjxZACJZAlktDj1ZACJZAlktDj5ZACJZAlktDj9ZACJZAlktDkBZACJZAlktDkFZACJZAlktDkJZACJZAlktDkNZACJZAlktDkRZACJZAlktDkVZACJZAlktDkZZACJZAlktDkdZACJZAlktDkhZACJZAlktDklZACJZAlktDkpZACJZAlktDktZACJZAlktDkxZACJZAlktDk1ZACJZAlktDk5ZACJZAlktDk9ZACJZAlktDlBZACJZAlktDlFZACJZAlktDlJZACJZAlktDlNZJwIBBFQuCIBFAFYjAAALPgwqVgECJAIAAgAAC1EjAAALUCYcClYCAAAqVwIDACJUAgQAKgRWBS0LBQIwCgACAAMBIgBWgEcAAi0KAlYjAAALPigAgAQEeAANAAAAgASAAyQAgAMAAAuoKgEAAQX3ofOvpa3UyjwEAgEmKgEAAQW+Hj//PqT2+jwEAgEmJQAAC4AtCwQGCyIABoBEAAckAgAHAAAL3ScCCAQAPAYIAS0LAwYLIgAGgEMAByQCAAcAAAxwIwAAC/YtCwMGLQsBBy0LAggtCwQJDSIABoBDAAokAgAKAAAMGyUAAA4ELgIAB4ADKACABAQABCUAAA4WLgiABQAKACIKAgsAKgsGDC0OBQwBIgAGgEcABQ4qBgUHJAIABwAADFslAAAOpC0OCgEtDggCLQ4FAy0OCQQjAAAM3icCBgQHLQgABy0KAQgtCgIJLQoDCi0KBAsACAAGACUAAAzfLQIAAC0LAQYtCwIHLQsECC4CAAaAAygAgAQEAAQlAAAOFi4IgAUACQEiAAmARwAKLQ4FCi0OCQEtDgcCLgyARwADLQ4IBCMAAAzeJiUAAAuALgiARQAFIwAADO8NIgAFgEMABiQCAAYAAA1fIwAADQQtCwIFLQsFBgAiBgIGLQ4GBScCBgQELQgBBycCCAQFAAgBCAEnAwcEAQAiBQIIJwIJBAQAIgcCCj8PAAgACi0LAQUtCwMGLQsECC0OBQEtDgcCLQ4GAy0OCAQmLQsDBgwqBQYHJAIABwAADXUjAAAN4S0LAgYAIgYCCAAqCAUJLQsJBy0LAQgAIggCCgAqCgULLQsLCQAqBwkKLQsDBy0LBAkuAgAGgAMoAIAEBAAFJQAADhYuCIAFAAsAIgsCDAAqDAUNLQ4KDS0OCAEtDgsCLQ4HAy0OCQQjAAAN4QEiAAWARwAGLQoGBSMAAAzvKgEAAQUC3G4ngHYSnTwEAgEmKgEAAQXFa8RaDhAAAjwEAgEmLgGAA4AGCwCABgACgAckAIAHAAAOMSMAAA48LgCAA4AFIwAADqMuAAABgAUBAAABgAQAAQEAgAOABIAJLgCAA4AKLgCABYALCwCACoAJgAwkAIAMAAAOjy4BgAqACC4EgAiACwEAgAoAAoAKAQCACwACgAsjAAAOXigBgAUEAAEDAIAGAAKABiMAAA6jJioBAAEFRafKcRlB5BU8BAIBJg==",
      "debug_symbols": "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",
      "brillig_names": [
        "set_guardian1"
      ]
    },
    {
      "name": "set_guardian10",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "guardian",
            "type": {
              "kind": "struct",
              "path": "structs::Guardian",
              "fields": [
                {
                  "name": "address",
                  "type": {
                    "kind": "struct",
                    "path": "structs::Guardian_PK",
                    "fields": [
                      {
                        "name": "value0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "index",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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HBsAHAodHAAcCh4dABwKHx4AHAogHwAcCiEgABwKIiEAHAojIgAcCiQjABwKJSQAHAomJQAcCicmABwKKCcAHAopKAAcCiopABwKKyoAHAosKwAcCi0sABwKLi0AHAovLgAcCjAvABwKMTAAHAoyMQAcCjMyABwKNDMAHAo1NAAcCjY1ABwKNzYAHAo4NwAcCjk4ABwKOjkAHAo7OgAcCjw7ABwKPTwAHAo+PQAcCj8+ABwKQD8AHApBQAAcCkJBABwKQ0IAHApEQwAcCkVEABwKRkUAHApHRgAcCkhHABwKSUgAHApKSQAcCktKABwKTEsAHApNTAAcCk5NABwKT04AHApQTwAcClFQABwKUlEAHApTUgAcClRTAC0IAVQnAlgEVQAIAVgBJwNUBAEAIlQCWC0KWFktDlVZACJZAlktDgFZACJZAlktDgJZACJZAlktDgNZACJZAlktDgRZACJZAlktDgVZACJZAlktDgZZACJZAlktDgdZACJZAlktDghZACJZAlktDglZACJZAlktDgpZACJZAlktDgtZACJZAlktDgxZACJZAlktDg1ZACJZAlktDg5ZACJZAlktDg9ZACJZAlktDhBZACJZAlktDhFZACJZAlktDhJZACJZAlktDhNZACJZAlktDhRZACJZAlktDhVZACJZAlktDhZZACJZAlktDhdZACJZAlktDhhZACJZAlktDhlZACJZAlktDhpZACJZAlktDhtZACJZAlktDhxZACJZAlktDh1ZACJZAlktDh5ZACJZAlktDh9ZACJZAlktDiBZACJZAlktDiFZACJZAlktDiJZACJZAlktDiNZACJZAlktDiRZACJZAlktDiVZACJZAlktDiZZACJZAlktDidZACJZAlktDihZACJZAlktDilZACJZAlktDipZACJZAlktDitZACJZAlktDixZACJZAlktDi1ZACJZAlktDi5ZACJZAlktDi9ZACJZAlktDjBZACJZAlktDjFZACJZAlktDjJZACJZAlktDjNZACJZAlktDjRZACJZAlktDjVZACJZAlktDjZZACJZAlktDjdZACJZAlktDjhZACJZAlktDjlZACJZAlktDjpZACJZAlktDjtZACJZAlktDjxZACJZAlktDj1ZACJZAlktDj5ZACJZAlktDj9ZACJZAlktDkBZACJZAlktDkFZACJZAlktDkJZACJZAlktDkNZACJZAlktDkRZACJZAlktDkVZACJZAlktDkZZACJZAlktDkdZACJZAlktDkhZACJZAlktDklZACJZAlktDkpZACJZAlktDktZACJZAlktDkxZACJZAlktDk1ZACJZAlktDk5ZACJZAlktDk9ZACJZAlktDlBZACJZAlktDlFZACJZAlktDlJZACJZAlktDlNZJwIBBFQuCIBFAFYjAAALPgwqVgECJAIAAgAAC1EjAAALUCYcClYCAAAqVwIDACJUAgQAKgRWBS0LBQIwCgACAAMBIgBWgEcAAi0KAlYjAAALPigAgAQEeAANAAAAgASAAyQAgAMAAAuoKgEAAQX3ofOvpa3UyjwEAgEmKgEAAQW+Hj//PqT2+jwEAgEmJQAAC4AtCwQGCyIABoBEAAckAgAHAAAL3ScCCAQAPAYIAS0LAwYLIgAGgEMAByQCAAcAAAxwIwAAC/YtCwMGLQsBBy0LAggtCwQJDSIABoBDAAokAgAKAAAMGyUAAA4ELgIAB4ADKACABAQABCUAAA4WLgiABQAKACIKAgsAKgsGDC0OBQwBIgAGgEcABQ4qBgUHJAIABwAADFslAAAOpC0OCgEtDggCLQ4FAy0OCQQjAAAM3icCBgQHLQgABy0KAQgtCgIJLQoDCi0KBAsACAAGACUAAAzfLQIAAC0LAQYtCwIHLQsECC4CAAaAAygAgAQEAAQlAAAOFi4IgAUACQEiAAmARwAKLQ4FCi0OCQEtDgcCLgyARwADLQ4IBCMAAAzeJiUAAAuALgiARQAFIwAADO8NIgAFgEMABiQCAAYAAA1fIwAADQQtCwIFLQsFBgAiBgIGLQ4GBScCBgQELQgBBycCCAQFAAgBCAEnAwcEAQAiBQIIJwIJBAQAIgcCCj8PAAgACi0LAQUtCwMGLQsECC0OBQEtDgcCLQ4GAy0OCAQmLQsDBgwqBQYHJAIABwAADXUjAAAN4S0LAgYAIgYCCAAqCAUJLQsJBy0LAQgAIggCCgAqCgULLQsLCQAqBwkKLQsDBy0LBAkuAgAGgAMoAIAEBAAFJQAADhYuCIAFAAsAIgsCDAAqDAUNLQ4KDS0OCAEtDgsCLQ4HAy0OCQQjAAAN4QEiAAWARwAGLQoGBSMAAAzvKgEAAQUC3G4ngHYSnTwEAgEmKgEAAQXFa8RaDhAAAjwEAgEmLgGAA4AGCwCABgACgAckAIAHAAAOMSMAAA48LgCAA4AFIwAADqMuAAABgAUBAAABgAQAAQEAgAOABIAJLgCAA4AKLgCABYALCwCACoAJgAwkAIAMAAAOjy4BgAqACC4EgAiACwEAgAoAAoAKAQCACwACgAsjAAAOXigBgAUEAAEDAIAGAAKABiMAAA6jJioBAAEFRafKcRlB5BU8BAIBJg==",
      "debug_symbols": "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",
      "brillig_names": [
        "set_guardian10"
      ]
    },
    {
      "name": "set_guardian11",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "guardian",
            "type": {
              "kind": "struct",
              "path": "structs::Guardian",
              "fields": [
                {
                  "name": "address",
                  "type": {
                    "kind": "struct",
                    "path": "structs::Guardian_PK",
                    "fields": [
                      {
                        "name": "value0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "index",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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HBsAHAodHAAcCh4dABwKHx4AHAogHwAcCiEgABwKIiEAHAojIgAcCiQjABwKJSQAHAomJQAcCicmABwKKCcAHAopKAAcCiopABwKKyoAHAosKwAcCi0sABwKLi0AHAovLgAcCjAvABwKMTAAHAoyMQAcCjMyABwKNDMAHAo1NAAcCjY1ABwKNzYAHAo4NwAcCjk4ABwKOjkAHAo7OgAcCjw7ABwKPTwAHAo+PQAcCj8+ABwKQD8AHApBQAAcCkJBABwKQ0IAHApEQwAcCkVEABwKRkUAHApHRgAcCkhHABwKSUgAHApKSQAcCktKABwKTEsAHApNTAAcCk5NABwKT04AHApQTwAcClFQABwKUlEAHApTUgAcClRTAC0IAVQnAlgEVQAIAVgBJwNUBAEAIlQCWC0KWFktDlVZACJZAlktDgFZACJZAlktDgJZACJZAlktDgNZACJZAlktDgRZACJZAlktDgVZACJZAlktDgZZACJZAlktDgdZACJZAlktDghZACJZAlktDglZACJZAlktDgpZACJZAlktDgtZACJZAlktDgxZACJZAlktDg1ZACJZAlktDg5ZACJZAlktDg9ZACJZAlktDhBZACJZAlktDhFZACJZAlktDhJZACJZAlktDhNZACJZAlktDhRZACJZAlktDhVZACJZAlktDhZZACJZAlktDhdZACJZAlktDhhZACJZAlktDhlZACJZAlktDhpZACJZAlktDhtZACJZAlktDhxZACJZAlktDh1ZACJZAlktDh5ZACJZAlktDh9ZACJZAlktDiBZACJZAlktDiFZACJZAlktDiJZACJZAlktDiNZACJZAlktDiRZACJZAlktDiVZACJZAlktDiZZACJZAlktDidZACJZAlktDihZACJZAlktDilZACJZAlktDipZACJZAlktDitZACJZAlktDixZACJZAlktDi1ZACJZAlktDi5ZACJZAlktDi9ZACJZAlktDjBZACJZAlktDjFZACJZAlktDjJZACJZAlktDjNZACJZAlktDjRZACJZAlktDjVZACJZAlktDjZZACJZAlktDjdZACJZAlktDjhZACJZAlktDjlZACJZAlktDjpZACJZAlktDjtZACJZAlktDjxZACJZAlktDj1ZACJZAlktDj5ZACJZAlktDj9ZACJZAlktDkBZACJZAlktDkFZACJZAlktDkJZACJZAlktDkNZACJZAlktDkRZACJZAlktDkVZACJZAlktDkZZACJZAlktDkdZACJZAlktDkhZACJZAlktDklZACJZAlktDkpZACJZAlktDktZACJZAlktDkxZACJZAlktDk1ZACJZAlktDk5ZACJZAlktDk9ZACJZAlktDlBZACJZAlktDlFZACJZAlktDlJZACJZAlktDlNZJwIBBFQuCIBFAFYjAAALPgwqVgECJAIAAgAAC1EjAAALUCYcClYCAAAqVwIDACJUAgQAKgRWBS0LBQIwCgACAAMBIgBWgEcAAi0KAlYjAAALPigAgAQEeAANAAAAgASAAyQAgAMAAAuoKgEAAQX3ofOvpa3UyjwEAgEmKgEAAQW+Hj//PqT2+jwEAgEmJQAAC4AtCwQGCyIABoBEAAckAgAHAAAL3ScCCAQAPAYIAS0LAwYLIgAGgEMAByQCAAcAAAxwIwAAC/YtCwMGLQsBBy0LAggtCwQJDSIABoBDAAokAgAKAAAMGyUAAA4ELgIAB4ADKACABAQABCUAAA4WLgiABQAKACIKAgsAKgsGDC0OBQwBIgAGgEcABQ4qBgUHJAIABwAADFslAAAOpC0OCgEtDggCLQ4FAy0OCQQjAAAM3icCBgQHLQgABy0KAQgtCgIJLQoDCi0KBAsACAAGACUAAAzfLQIAAC0LAQYtCwIHLQsECC4CAAaAAygAgAQEAAQlAAAOFi4IgAUACQEiAAmARwAKLQ4FCi0OCQEtDgcCLgyARwADLQ4IBCMAAAzeJiUAAAuALgiARQAFIwAADO8NIgAFgEMABiQCAAYAAA1fIwAADQQtCwIFLQsFBgAiBgIGLQ4GBScCBgQELQgBBycCCAQFAAgBCAEnAwcEAQAiBQIIJwIJBAQAIgcCCj8PAAgACi0LAQUtCwMGLQsECC0OBQEtDgcCLQ4GAy0OCAQmLQsDBgwqBQYHJAIABwAADXUjAAAN4S0LAgYAIgYCCAAqCAUJLQsJBy0LAQgAIggCCgAqCgULLQsLCQAqBwkKLQsDBy0LBAkuAgAGgAMoAIAEBAAFJQAADhYuCIAFAAsAIgsCDAAqDAUNLQ4KDS0OCAEtDgsCLQ4HAy0OCQQjAAAN4QEiAAWARwAGLQoGBSMAAAzvKgEAAQUC3G4ngHYSnTwEAgEmKgEAAQXFa8RaDhAAAjwEAgEmLgGAA4AGCwCABgACgAckAIAHAAAOMSMAAA48LgCAA4AFIwAADqMuAAABgAUBAAABgAQAAQEAgAOABIAJLgCAA4AKLgCABYALCwCACoAJgAwkAIAMAAAOjy4BgAqACC4EgAiACwEAgAoAAoAKAQCACwACgAsjAAAOXigBgAUEAAEDAIAGAAKABiMAAA6jJioBAAEFRafKcRlB5BU8BAIBJg==",
      "debug_symbols": "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",
      "brillig_names": [
        "set_guardian11"
      ]
    },
    {
      "name": "set_guardian12",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "guardian",
            "type": {
              "kind": "struct",
              "path": "structs::Guardian",
              "fields": [
                {
                  "name": "address",
                  "type": {
                    "kind": "struct",
                    "path": "structs::Guardian_PK",
                    "fields": [
                      {
                        "name": "value0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "index",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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HBsAHAodHAAcCh4dABwKHx4AHAogHwAcCiEgABwKIiEAHAojIgAcCiQjABwKJSQAHAomJQAcCicmABwKKCcAHAopKAAcCiopABwKKyoAHAosKwAcCi0sABwKLi0AHAovLgAcCjAvABwKMTAAHAoyMQAcCjMyABwKNDMAHAo1NAAcCjY1ABwKNzYAHAo4NwAcCjk4ABwKOjkAHAo7OgAcCjw7ABwKPTwAHAo+PQAcCj8+ABwKQD8AHApBQAAcCkJBABwKQ0IAHApEQwAcCkVEABwKRkUAHApHRgAcCkhHABwKSUgAHApKSQAcCktKABwKTEsAHApNTAAcCk5NABwKT04AHApQTwAcClFQABwKUlEAHApTUgAcClRTAC0IAVQnAlgEVQAIAVgBJwNUBAEAIlQCWC0KWFktDlVZACJZAlktDgFZACJZAlktDgJZACJZAlktDgNZACJZAlktDgRZACJZAlktDgVZACJZAlktDgZZACJZAlktDgdZACJZAlktDghZACJZAlktDglZACJZAlktDgpZACJZAlktDgtZACJZAlktDgxZACJZAlktDg1ZACJZAlktDg5ZACJZAlktDg9ZACJZAlktDhBZACJZAlktDhFZACJZAlktDhJZACJZAlktDhNZACJZAlktDhRZACJZAlktDhVZACJZAlktDhZZACJZAlktDhdZACJZAlktDhhZACJZAlktDhlZACJZAlktDhpZACJZAlktDhtZACJZAlktDhxZACJZAlktDh1ZACJZAlktDh5ZACJZAlktDh9ZACJZAlktDiBZACJZAlktDiFZACJZAlktDiJZACJZAlktDiNZACJZAlktDiRZACJZAlktDiVZACJZAlktDiZZACJZAlktDidZACJZAlktDihZACJZAlktDilZACJZAlktDipZACJZAlktDitZACJZAlktDixZACJZAlktDi1ZACJZAlktDi5ZACJZAlktDi9ZACJZAlktDjBZACJZAlktDjFZACJZAlktDjJZACJZAlktDjNZACJZAlktDjRZACJZAlktDjVZACJZAlktDjZZACJZAlktDjdZACJZAlktDjhZACJZAlktDjlZACJZAlktDjpZACJZAlktDjtZACJZAlktDjxZACJZAlktDj1ZACJZAlktDj5ZACJZAlktDj9ZACJZAlktDkBZACJZAlktDkFZACJZAlktDkJZACJZAlktDkNZACJZAlktDkRZACJZAlktDkVZACJZAlktDkZZACJZAlktDkdZACJZAlktDkhZACJZAlktDklZACJZAlktDkpZACJZAlktDktZACJZAlktDkxZACJZAlktDk1ZACJZAlktDk5ZACJZAlktDk9ZACJZAlktDlBZACJZAlktDlFZACJZAlktDlJZACJZAlktDlNZJwIBBFQuCIBFAFYjAAALPgwqVgECJAIAAgAAC1EjAAALUCYcClYCAAAqVwIDACJUAgQAKgRWBS0LBQIwCgACAAMBIgBWgEcAAi0KAlYjAAALPigAgAQEeAANAAAAgASAAyQAgAMAAAuoKgEAAQX3ofOvpa3UyjwEAgEmKgEAAQW+Hj//PqT2+jwEAgEmJQAAC4AtCwQGCyIABoBEAAckAgAHAAAL3ScCCAQAPAYIAS0LAwYLIgAGgEMAByQCAAcAAAxwIwAAC/YtCwMGLQsBBy0LAggtCwQJDSIABoBDAAokAgAKAAAMGyUAAA4ELgIAB4ADKACABAQABCUAAA4WLgiABQAKACIKAgsAKgsGDC0OBQwBIgAGgEcABQ4qBgUHJAIABwAADFslAAAOpC0OCgEtDggCLQ4FAy0OCQQjAAAM3icCBgQHLQgABy0KAQgtCgIJLQoDCi0KBAsACAAGACUAAAzfLQIAAC0LAQYtCwIHLQsECC4CAAaAAygAgAQEAAQlAAAOFi4IgAUACQEiAAmARwAKLQ4FCi0OCQEtDgcCLgyARwADLQ4IBCMAAAzeJiUAAAuALgiARQAFIwAADO8NIgAFgEMABiQCAAYAAA1fIwAADQQtCwIFLQsFBgAiBgIGLQ4GBScCBgQELQgBBycCCAQFAAgBCAEnAwcEAQAiBQIIJwIJBAQAIgcCCj8PAAgACi0LAQUtCwMGLQsECC0OBQEtDgcCLQ4GAy0OCAQmLQsDBgwqBQYHJAIABwAADXUjAAAN4S0LAgYAIgYCCAAqCAUJLQsJBy0LAQgAIggCCgAqCgULLQsLCQAqBwkKLQsDBy0LBAkuAgAGgAMoAIAEBAAFJQAADhYuCIAFAAsAIgsCDAAqDAUNLQ4KDS0OCAEtDgsCLQ4HAy0OCQQjAAAN4QEiAAWARwAGLQoGBSMAAAzvKgEAAQUC3G4ngHYSnTwEAgEmKgEAAQXFa8RaDhAAAjwEAgEmLgGAA4AGCwCABgACgAckAIAHAAAOMSMAAA48LgCAA4AFIwAADqMuAAABgAUBAAABgAQAAQEAgAOABIAJLgCAA4AKLgCABYALCwCACoAJgAwkAIAMAAAOjy4BgAqACC4EgAiACwEAgAoAAoAKAQCACwACgAsjAAAOXigBgAUEAAEDAIAGAAKABiMAAA6jJioBAAEFRafKcRlB5BU8BAIBJg==",
      "debug_symbols": "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",
      "brillig_names": [
        "set_guardian12"
      ]
    },
    {
      "name": "set_guardian13",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "guardian",
            "type": {
              "kind": "struct",
              "path": "structs::Guardian",
              "fields": [
                {
                  "name": "address",
                  "type": {
                    "kind": "struct",
                    "path": "structs::Guardian_PK",
                    "fields": [
                      {
                        "name": "value0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "index",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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HBsAHAodHAAcCh4dABwKHx4AHAogHwAcCiEgABwKIiEAHAojIgAcCiQjABwKJSQAHAomJQAcCicmABwKKCcAHAopKAAcCiopABwKKyoAHAosKwAcCi0sABwKLi0AHAovLgAcCjAvABwKMTAAHAoyMQAcCjMyABwKNDMAHAo1NAAcCjY1ABwKNzYAHAo4NwAcCjk4ABwKOjkAHAo7OgAcCjw7ABwKPTwAHAo+PQAcCj8+ABwKQD8AHApBQAAcCkJBABwKQ0IAHApEQwAcCkVEABwKRkUAHApHRgAcCkhHABwKSUgAHApKSQAcCktKABwKTEsAHApNTAAcCk5NABwKT04AHApQTwAcClFQABwKUlEAHApTUgAcClRTAC0IAVQnAlgEVQAIAVgBJwNUBAEAIlQCWC0KWFktDlVZACJZAlktDgFZACJZAlktDgJZACJZAlktDgNZACJZAlktDgRZACJZAlktDgVZACJZAlktDgZZACJZAlktDgdZACJZAlktDghZACJZAlktDglZACJZAlktDgpZACJZAlktDgtZACJZAlktDgxZACJZAlktDg1ZACJZAlktDg5ZACJZAlktDg9ZACJZAlktDhBZACJZAlktDhFZACJZAlktDhJZACJZAlktDhNZACJZAlktDhRZACJZAlktDhVZACJZAlktDhZZACJZAlktDhdZACJZAlktDhhZACJZAlktDhlZACJZAlktDhpZACJZAlktDhtZACJZAlktDhxZACJZAlktDh1ZACJZAlktDh5ZACJZAlktDh9ZACJZAlktDiBZACJZAlktDiFZACJZAlktDiJZACJZAlktDiNZACJZAlktDiRZACJZAlktDiVZACJZAlktDiZZACJZAlktDidZACJZAlktDihZACJZAlktDilZACJZAlktDipZACJZAlktDitZACJZAlktDixZACJZAlktDi1ZACJZAlktDi5ZACJZAlktDi9ZACJZAlktDjBZACJZAlktDjFZACJZAlktDjJZACJZAlktDjNZACJZAlktDjRZACJZAlktDjVZACJZAlktDjZZACJZAlktDjdZACJZAlktDjhZACJZAlktDjlZACJZAlktDjpZACJZAlktDjtZACJZAlktDjxZACJZAlktDj1ZACJZAlktDj5ZACJZAlktDj9ZACJZAlktDkBZACJZAlktDkFZACJZAlktDkJZACJZAlktDkNZACJZAlktDkRZACJZAlktDkVZACJZAlktDkZZACJZAlktDkdZACJZAlktDkhZACJZAlktDklZACJZAlktDkpZACJZAlktDktZACJZAlktDkxZACJZAlktDk1ZACJZAlktDk5ZACJZAlktDk9ZACJZAlktDlBZACJZAlktDlFZACJZAlktDlJZACJZAlktDlNZJwIBBFQuCIBFAFYjAAALPgwqVgECJAIAAgAAC1EjAAALUCYcClYCAAAqVwIDACJUAgQAKgRWBS0LBQIwCgACAAMBIgBWgEcAAi0KAlYjAAALPigAgAQEeAANAAAAgASAAyQAgAMAAAuoKgEAAQX3ofOvpa3UyjwEAgEmKgEAAQW+Hj//PqT2+jwEAgEmJQAAC4AtCwQGCyIABoBEAAckAgAHAAAL3ScCCAQAPAYIAS0LAwYLIgAGgEMAByQCAAcAAAxwIwAAC/YtCwMGLQsBBy0LAggtCwQJDSIABoBDAAokAgAKAAAMGyUAAA4ELgIAB4ADKACABAQABCUAAA4WLgiABQAKACIKAgsAKgsGDC0OBQwBIgAGgEcABQ4qBgUHJAIABwAADFslAAAOpC0OCgEtDggCLQ4FAy0OCQQjAAAM3icCBgQHLQgABy0KAQgtCgIJLQoDCi0KBAsACAAGACUAAAzfLQIAAC0LAQYtCwIHLQsECC4CAAaAAygAgAQEAAQlAAAOFi4IgAUACQEiAAmARwAKLQ4FCi0OCQEtDgcCLgyARwADLQ4IBCMAAAzeJiUAAAuALgiARQAFIwAADO8NIgAFgEMABiQCAAYAAA1fIwAADQQtCwIFLQsFBgAiBgIGLQ4GBScCBgQELQgBBycCCAQFAAgBCAEnAwcEAQAiBQIIJwIJBAQAIgcCCj8PAAgACi0LAQUtCwMGLQsECC0OBQEtDgcCLQ4GAy0OCAQmLQsDBgwqBQYHJAIABwAADXUjAAAN4S0LAgYAIgYCCAAqCAUJLQsJBy0LAQgAIggCCgAqCgULLQsLCQAqBwkKLQsDBy0LBAkuAgAGgAMoAIAEBAAFJQAADhYuCIAFAAsAIgsCDAAqDAUNLQ4KDS0OCAEtDgsCLQ4HAy0OCQQjAAAN4QEiAAWARwAGLQoGBSMAAAzvKgEAAQUC3G4ngHYSnTwEAgEmKgEAAQXFa8RaDhAAAjwEAgEmLgGAA4AGCwCABgACgAckAIAHAAAOMSMAAA48LgCAA4AFIwAADqMuAAABgAUBAAABgAQAAQEAgAOABIAJLgCAA4AKLgCABYALCwCACoAJgAwkAIAMAAAOjy4BgAqACC4EgAiACwEAgAoAAoAKAQCACwACgAsjAAAOXigBgAUEAAEDAIAGAAKABiMAAA6jJioBAAEFRafKcRlB5BU8BAIBJg==",
      "debug_symbols": "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",
      "brillig_names": [
        "set_guardian13"
      ]
    },
    {
      "name": "set_guardian14",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "guardian",
            "type": {
              "kind": "struct",
              "path": "structs::Guardian",
              "fields": [
                {
                  "name": "address",
                  "type": {
                    "kind": "struct",
                    "path": "structs::Guardian_PK",
                    "fields": [
                      {
                        "name": "value0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "index",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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HBsAHAodHAAcCh4dABwKHx4AHAogHwAcCiEgABwKIiEAHAojIgAcCiQjABwKJSQAHAomJQAcCicmABwKKCcAHAopKAAcCiopABwKKyoAHAosKwAcCi0sABwKLi0AHAovLgAcCjAvABwKMTAAHAoyMQAcCjMyABwKNDMAHAo1NAAcCjY1ABwKNzYAHAo4NwAcCjk4ABwKOjkAHAo7OgAcCjw7ABwKPTwAHAo+PQAcCj8+ABwKQD8AHApBQAAcCkJBABwKQ0IAHApEQwAcCkVEABwKRkUAHApHRgAcCkhHABwKSUgAHApKSQAcCktKABwKTEsAHApNTAAcCk5NABwKT04AHApQTwAcClFQABwKUlEAHApTUgAcClRTAC0IAVQnAlgEVQAIAVgBJwNUBAEAIlQCWC0KWFktDlVZACJZAlktDgFZACJZAlktDgJZACJZAlktDgNZACJZAlktDgRZACJZAlktDgVZACJZAlktDgZZACJZAlktDgdZACJZAlktDghZACJZAlktDglZACJZAlktDgpZACJZAlktDgtZACJZAlktDgxZACJZAlktDg1ZACJZAlktDg5ZACJZAlktDg9ZACJZAlktDhBZACJZAlktDhFZACJZAlktDhJZACJZAlktDhNZACJZAlktDhRZACJZAlktDhVZACJZAlktDhZZACJZAlktDhdZACJZAlktDhhZACJZAlktDhlZACJZAlktDhpZACJZAlktDhtZACJZAlktDhxZACJZAlktDh1ZACJZAlktDh5ZACJZAlktDh9ZACJZAlktDiBZACJZAlktDiFZACJZAlktDiJZACJZAlktDiNZACJZAlktDiRZACJZAlktDiVZACJZAlktDiZZACJZAlktDidZACJZAlktDihZACJZAlktDilZACJZAlktDipZACJZAlktDitZACJZAlktDixZACJZAlktDi1ZACJZAlktDi5ZACJZAlktDi9ZACJZAlktDjBZACJZAlktDjFZACJZAlktDjJZACJZAlktDjNZACJZAlktDjRZACJZAlktDjVZACJZAlktDjZZACJZAlktDjdZACJZAlktDjhZACJZAlktDjlZACJZAlktDjpZACJZAlktDjtZACJZAlktDjxZACJZAlktDj1ZACJZAlktDj5ZACJZAlktDj9ZACJZAlktDkBZACJZAlktDkFZACJZAlktDkJZACJZAlktDkNZACJZAlktDkRZACJZAlktDkVZACJZAlktDkZZACJZAlktDkdZACJZAlktDkhZACJZAlktDklZACJZAlktDkpZACJZAlktDktZACJZAlktDkxZACJZAlktDk1ZACJZAlktDk5ZACJZAlktDk9ZACJZAlktDlBZACJZAlktDlFZACJZAlktDlJZACJZAlktDlNZJwIBBFQuCIBFAFYjAAALPgwqVgECJAIAAgAAC1EjAAALUCYcClYCAAAqVwIDACJUAgQAKgRWBS0LBQIwCgACAAMBIgBWgEcAAi0KAlYjAAALPigAgAQEeAANAAAAgASAAyQAgAMAAAuoKgEAAQX3ofOvpa3UyjwEAgEmKgEAAQW+Hj//PqT2+jwEAgEmJQAAC4AtCwQGCyIABoBEAAckAgAHAAAL3ScCCAQAPAYIAS0LAwYLIgAGgEMAByQCAAcAAAxwIwAAC/YtCwMGLQsBBy0LAggtCwQJDSIABoBDAAokAgAKAAAMGyUAAA4ELgIAB4ADKACABAQABCUAAA4WLgiABQAKACIKAgsAKgsGDC0OBQwBIgAGgEcABQ4qBgUHJAIABwAADFslAAAOpC0OCgEtDggCLQ4FAy0OCQQjAAAM3icCBgQHLQgABy0KAQgtCgIJLQoDCi0KBAsACAAGACUAAAzfLQIAAC0LAQYtCwIHLQsECC4CAAaAAygAgAQEAAQlAAAOFi4IgAUACQEiAAmARwAKLQ4FCi0OCQEtDgcCLgyARwADLQ4IBCMAAAzeJiUAAAuALgiARQAFIwAADO8NIgAFgEMABiQCAAYAAA1fIwAADQQtCwIFLQsFBgAiBgIGLQ4GBScCBgQELQgBBycCCAQFAAgBCAEnAwcEAQAiBQIIJwIJBAQAIgcCCj8PAAgACi0LAQUtCwMGLQsECC0OBQEtDgcCLQ4GAy0OCAQmLQsDBgwqBQYHJAIABwAADXUjAAAN4S0LAgYAIgYCCAAqCAUJLQsJBy0LAQgAIggCCgAqCgULLQsLCQAqBwkKLQsDBy0LBAkuAgAGgAMoAIAEBAAFJQAADhYuCIAFAAsAIgsCDAAqDAUNLQ4KDS0OCAEtDgsCLQ4HAy0OCQQjAAAN4QEiAAWARwAGLQoGBSMAAAzvKgEAAQUC3G4ngHYSnTwEAgEmKgEAAQXFa8RaDhAAAjwEAgEmLgGAA4AGCwCABgACgAckAIAHAAAOMSMAAA48LgCAA4AFIwAADqMuAAABgAUBAAABgAQAAQEAgAOABIAJLgCAA4AKLgCABYALCwCACoAJgAwkAIAMAAAOjy4BgAqACC4EgAiACwEAgAoAAoAKAQCACwACgAsjAAAOXigBgAUEAAEDAIAGAAKABiMAAA6jJioBAAEFRafKcRlB5BU8BAIBJg==",
      "debug_symbols": "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",
      "brillig_names": [
        "set_guardian14"
      ]
    },
    {
      "name": "set_guardian15",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "guardian",
            "type": {
              "kind": "struct",
              "path": "structs::Guardian",
              "fields": [
                {
                  "name": "address",
                  "type": {
                    "kind": "struct",
                    "path": "structs::Guardian_PK",
                    "fields": [
                      {
                        "name": "value0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "index",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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HBsAHAodHAAcCh4dABwKHx4AHAogHwAcCiEgABwKIiEAHAojIgAcCiQjABwKJSQAHAomJQAcCicmABwKKCcAHAopKAAcCiopABwKKyoAHAosKwAcCi0sABwKLi0AHAovLgAcCjAvABwKMTAAHAoyMQAcCjMyABwKNDMAHAo1NAAcCjY1ABwKNzYAHAo4NwAcCjk4ABwKOjkAHAo7OgAcCjw7ABwKPTwAHAo+PQAcCj8+ABwKQD8AHApBQAAcCkJBABwKQ0IAHApEQwAcCkVEABwKRkUAHApHRgAcCkhHABwKSUgAHApKSQAcCktKABwKTEsAHApNTAAcCk5NABwKT04AHApQTwAcClFQABwKUlEAHApTUgAcClRTAC0IAVQnAlgEVQAIAVgBJwNUBAEAIlQCWC0KWFktDlVZACJZAlktDgFZACJZAlktDgJZACJZAlktDgNZACJZAlktDgRZACJZAlktDgVZACJZAlktDgZZACJZAlktDgdZACJZAlktDghZACJZAlktDglZACJZAlktDgpZACJZAlktDgtZACJZAlktDgxZACJZAlktDg1ZACJZAlktDg5ZACJZAlktDg9ZACJZAlktDhBZACJZAlktDhFZACJZAlktDhJZACJZAlktDhNZACJZAlktDhRZACJZAlktDhVZACJZAlktDhZZACJZAlktDhdZACJZAlktDhhZACJZAlktDhlZACJZAlktDhpZACJZAlktDhtZACJZAlktDhxZACJZAlktDh1ZACJZAlktDh5ZACJZAlktDh9ZACJZAlktDiBZACJZAlktDiFZACJZAlktDiJZACJZAlktDiNZACJZAlktDiRZACJZAlktDiVZACJZAlktDiZZACJZAlktDidZACJZAlktDihZACJZAlktDilZACJZAlktDipZACJZAlktDitZACJZAlktDixZACJZAlktDi1ZACJZAlktDi5ZACJZAlktDi9ZACJZAlktDjBZACJZAlktDjFZACJZAlktDjJZACJZAlktDjNZACJZAlktDjRZACJZAlktDjVZACJZAlktDjZZACJZAlktDjdZACJZAlktDjhZACJZAlktDjlZACJZAlktDjpZACJZAlktDjtZACJZAlktDjxZACJZAlktDj1ZACJZAlktDj5ZACJZAlktDj9ZACJZAlktDkBZACJZAlktDkFZACJZAlktDkJZACJZAlktDkNZACJZAlktDkRZACJZAlktDkVZACJZAlktDkZZACJZAlktDkdZACJZAlktDkhZACJZAlktDklZACJZAlktDkpZACJZAlktDktZACJZAlktDkxZACJZAlktDk1ZACJZAlktDk5ZACJZAlktDk9ZACJZAlktDlBZACJZAlktDlFZACJZAlktDlJZACJZAlktDlNZJwIBBFQuCIBFAFYjAAALPgwqVgECJAIAAgAAC1EjAAALUCYcClYCAAAqVwIDACJUAgQAKgRWBS0LBQIwCgACAAMBIgBWgEcAAi0KAlYjAAALPigAgAQEeAANAAAAgASAAyQAgAMAAAuoKgEAAQX3ofOvpa3UyjwEAgEmKgEAAQW+Hj//PqT2+jwEAgEmJQAAC4AtCwQGCyIABoBEAAckAgAHAAAL3ScCCAQAPAYIAS0LAwYLIgAGgEMAByQCAAcAAAxwIwAAC/YtCwMGLQsBBy0LAggtCwQJDSIABoBDAAokAgAKAAAMGyUAAA4ELgIAB4ADKACABAQABCUAAA4WLgiABQAKACIKAgsAKgsGDC0OBQwBIgAGgEcABQ4qBgUHJAIABwAADFslAAAOpC0OCgEtDggCLQ4FAy0OCQQjAAAM3icCBgQHLQgABy0KAQgtCgIJLQoDCi0KBAsACAAGACUAAAzfLQIAAC0LAQYtCwIHLQsECC4CAAaAAygAgAQEAAQlAAAOFi4IgAUACQEiAAmARwAKLQ4FCi0OCQEtDgcCLgyARwADLQ4IBCMAAAzeJiUAAAuALgiARQAFIwAADO8NIgAFgEMABiQCAAYAAA1fIwAADQQtCwIFLQsFBgAiBgIGLQ4GBScCBgQELQgBBycCCAQFAAgBCAEnAwcEAQAiBQIIJwIJBAQAIgcCCj8PAAgACi0LAQUtCwMGLQsECC0OBQEtDgcCLQ4GAy0OCAQmLQsDBgwqBQYHJAIABwAADXUjAAAN4S0LAgYAIgYCCAAqCAUJLQsJBy0LAQgAIggCCgAqCgULLQsLCQAqBwkKLQsDBy0LBAkuAgAGgAMoAIAEBAAFJQAADhYuCIAFAAsAIgsCDAAqDAUNLQ4KDS0OCAEtDgsCLQ4HAy0OCQQjAAAN4QEiAAWARwAGLQoGBSMAAAzvKgEAAQUC3G4ngHYSnTwEAgEmKgEAAQXFa8RaDhAAAjwEAgEmLgGAA4AGCwCABgACgAckAIAHAAAOMSMAAA48LgCAA4AFIwAADqMuAAABgAUBAAABgAQAAQEAgAOABIAJLgCAA4AKLgCABYALCwCACoAJgAwkAIAMAAAOjy4BgAqACC4EgAiACwEAgAoAAoAKAQCACwACgAsjAAAOXigBgAUEAAEDAIAGAAKABiMAAA6jJioBAAEFRafKcRlB5BU8BAIBJg==",
      "debug_symbols": "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",
      "brillig_names": [
        "set_guardian15"
      ]
    },
    {
      "name": "set_guardian16",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "guardian",
            "type": {
              "kind": "struct",
              "path": "structs::Guardian",
              "fields": [
                {
                  "name": "address",
                  "type": {
                    "kind": "struct",
                    "path": "structs::Guardian_PK",
                    "fields": [
                      {
                        "name": "value0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "index",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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HBsAHAodHAAcCh4dABwKHx4AHAogHwAcCiEgABwKIiEAHAojIgAcCiQjABwKJSQAHAomJQAcCicmABwKKCcAHAopKAAcCiopABwKKyoAHAosKwAcCi0sABwKLi0AHAovLgAcCjAvABwKMTAAHAoyMQAcCjMyABwKNDMAHAo1NAAcCjY1ABwKNzYAHAo4NwAcCjk4ABwKOjkAHAo7OgAcCjw7ABwKPTwAHAo+PQAcCj8+ABwKQD8AHApBQAAcCkJBABwKQ0IAHApEQwAcCkVEABwKRkUAHApHRgAcCkhHABwKSUgAHApKSQAcCktKABwKTEsAHApNTAAcCk5NABwKT04AHApQTwAcClFQABwKUlEAHApTUgAcClRTAC0IAVQnAlgEVQAIAVgBJwNUBAEAIlQCWC0KWFktDlVZACJZAlktDgFZACJZAlktDgJZACJZAlktDgNZACJZAlktDgRZACJZAlktDgVZACJZAlktDgZZACJZAlktDgdZACJZAlktDghZACJZAlktDglZACJZAlktDgpZACJZAlktDgtZACJZAlktDgxZACJZAlktDg1ZACJZAlktDg5ZACJZAlktDg9ZACJZAlktDhBZACJZAlktDhFZACJZAlktDhJZACJZAlktDhNZACJZAlktDhRZACJZAlktDhVZACJZAlktDhZZACJZAlktDhdZACJZAlktDhhZACJZAlktDhlZACJZAlktDhpZACJZAlktDhtZACJZAlktDhxZACJZAlktDh1ZACJZAlktDh5ZACJZAlktDh9ZACJZAlktDiBZACJZAlktDiFZACJZAlktDiJZACJZAlktDiNZACJZAlktDiRZACJZAlktDiVZACJZAlktDiZZACJZAlktDidZACJZAlktDihZACJZAlktDilZACJZAlktDipZACJZAlktDitZACJZAlktDixZACJZAlktDi1ZACJZAlktDi5ZACJZAlktDi9ZACJZAlktDjBZACJZAlktDjFZACJZAlktDjJZACJZAlktDjNZACJZAlktDjRZACJZAlktDjVZACJZAlktDjZZACJZAlktDjdZACJZAlktDjhZACJZAlktDjlZACJZAlktDjpZACJZAlktDjtZACJZAlktDjxZACJZAlktDj1ZACJZAlktDj5ZACJZAlktDj9ZACJZAlktDkBZACJZAlktDkFZACJZAlktDkJZACJZAlktDkNZACJZAlktDkRZACJZAlktDkVZACJZAlktDkZZACJZAlktDkdZACJZAlktDkhZACJZAlktDklZACJZAlktDkpZACJZAlktDktZACJZAlktDkxZACJZAlktDk1ZACJZAlktDk5ZACJZAlktDk9ZACJZAlktDlBZACJZAlktDlFZACJZAlktDlJZACJZAlktDlNZJwIBBFQuCIBFAFYjAAALPgwqVgECJAIAAgAAC1EjAAALUCYcClYCAAAqVwIDACJUAgQAKgRWBS0LBQIwCgACAAMBIgBWgEcAAi0KAlYjAAALPigAgAQEeAANAAAAgASAAyQAgAMAAAuoKgEAAQX3ofOvpa3UyjwEAgEmKgEAAQW+Hj//PqT2+jwEAgEmJQAAC4AtCwQGCyIABoBEAAckAgAHAAAL3ScCCAQAPAYIAS0LAwYLIgAGgEMAByQCAAcAAAxwIwAAC/YtCwMGLQsBBy0LAggtCwQJDSIABoBDAAokAgAKAAAMGyUAAA4ELgIAB4ADKACABAQABCUAAA4WLgiABQAKACIKAgsAKgsGDC0OBQwBIgAGgEcABQ4qBgUHJAIABwAADFslAAAOpC0OCgEtDggCLQ4FAy0OCQQjAAAM3icCBgQHLQgABy0KAQgtCgIJLQoDCi0KBAsACAAGACUAAAzfLQIAAC0LAQYtCwIHLQsECC4CAAaAAygAgAQEAAQlAAAOFi4IgAUACQEiAAmARwAKLQ4FCi0OCQEtDgcCLgyARwADLQ4IBCMAAAzeJiUAAAuALgiARQAFIwAADO8NIgAFgEMABiQCAAYAAA1fIwAADQQtCwIFLQsFBgAiBgIGLQ4GBScCBgQELQgBBycCCAQFAAgBCAEnAwcEAQAiBQIIJwIJBAQAIgcCCj8PAAgACi0LAQUtCwMGLQsECC0OBQEtDgcCLQ4GAy0OCAQmLQsDBgwqBQYHJAIABwAADXUjAAAN4S0LAgYAIgYCCAAqCAUJLQsJBy0LAQgAIggCCgAqCgULLQsLCQAqBwkKLQsDBy0LBAkuAgAGgAMoAIAEBAAFJQAADhYuCIAFAAsAIgsCDAAqDAUNLQ4KDS0OCAEtDgsCLQ4HAy0OCQQjAAAN4QEiAAWARwAGLQoGBSMAAAzvKgEAAQUC3G4ngHYSnTwEAgEmKgEAAQXFa8RaDhAAAjwEAgEmLgGAA4AGCwCABgACgAckAIAHAAAOMSMAAA48LgCAA4AFIwAADqMuAAABgAUBAAABgAQAAQEAgAOABIAJLgCAA4AKLgCABYALCwCACoAJgAwkAIAMAAAOjy4BgAqACC4EgAiACwEAgAoAAoAKAQCACwACgAsjAAAOXigBgAUEAAEDAIAGAAKABiMAAA6jJioBAAEFRafKcRlB5BU8BAIBJg==",
      "debug_symbols": "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",
      "brillig_names": [
        "set_guardian16"
      ]
    },
    {
      "name": "set_guardian17",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "guardian",
            "type": {
              "kind": "struct",
              "path": "structs::Guardian",
              "fields": [
                {
                  "name": "address",
                  "type": {
                    "kind": "struct",
                    "path": "structs::Guardian_PK",
                    "fields": [
                      {
                        "name": "value0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "index",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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HBsAHAodHAAcCh4dABwKHx4AHAogHwAcCiEgABwKIiEAHAojIgAcCiQjABwKJSQAHAomJQAcCicmABwKKCcAHAopKAAcCiopABwKKyoAHAosKwAcCi0sABwKLi0AHAovLgAcCjAvABwKMTAAHAoyMQAcCjMyABwKNDMAHAo1NAAcCjY1ABwKNzYAHAo4NwAcCjk4ABwKOjkAHAo7OgAcCjw7ABwKPTwAHAo+PQAcCj8+ABwKQD8AHApBQAAcCkJBABwKQ0IAHApEQwAcCkVEABwKRkUAHApHRgAcCkhHABwKSUgAHApKSQAcCktKABwKTEsAHApNTAAcCk5NABwKT04AHApQTwAcClFQABwKUlEAHApTUgAcClRTAC0IAVQnAlgEVQAIAVgBJwNUBAEAIlQCWC0KWFktDlVZACJZAlktDgFZACJZAlktDgJZACJZAlktDgNZACJZAlktDgRZACJZAlktDgVZACJZAlktDgZZACJZAlktDgdZACJZAlktDghZACJZAlktDglZACJZAlktDgpZACJZAlktDgtZACJZAlktDgxZACJZAlktDg1ZACJZAlktDg5ZACJZAlktDg9ZACJZAlktDhBZACJZAlktDhFZACJZAlktDhJZACJZAlktDhNZACJZAlktDhRZACJZAlktDhVZACJZAlktDhZZACJZAlktDhdZACJZAlktDhhZACJZAlktDhlZACJZAlktDhpZACJZAlktDhtZACJZAlktDhxZACJZAlktDh1ZACJZAlktDh5ZACJZAlktDh9ZACJZAlktDiBZACJZAlktDiFZACJZAlktDiJZACJZAlktDiNZACJZAlktDiRZACJZAlktDiVZACJZAlktDiZZACJZAlktDidZACJZAlktDihZACJZAlktDilZACJZAlktDipZACJZAlktDitZACJZAlktDixZACJZAlktDi1ZACJZAlktDi5ZACJZAlktDi9ZACJZAlktDjBZACJZAlktDjFZACJZAlktDjJZACJZAlktDjNZACJZAlktDjRZACJZAlktDjVZACJZAlktDjZZACJZAlktDjdZACJZAlktDjhZACJZAlktDjlZACJZAlktDjpZACJZAlktDjtZACJZAlktDjxZACJZAlktDj1ZACJZAlktDj5ZACJZAlktDj9ZACJZAlktDkBZACJZAlktDkFZACJZAlktDkJZACJZAlktDkNZACJZAlktDkRZACJZAlktDkVZACJZAlktDkZZACJZAlktDkdZACJZAlktDkhZACJZAlktDklZACJZAlktDkpZACJZAlktDktZACJZAlktDkxZACJZAlktDk1ZACJZAlktDk5ZACJZAlktDk9ZACJZAlktDlBZACJZAlktDlFZACJZAlktDlJZACJZAlktDlNZJwIBBFQuCIBFAFYjAAALPgwqVgECJAIAAgAAC1EjAAALUCYcClYCAAAqVwIDACJUAgQAKgRWBS0LBQIwCgACAAMBIgBWgEcAAi0KAlYjAAALPigAgAQEeAANAAAAgASAAyQAgAMAAAuoKgEAAQX3ofOvpa3UyjwEAgEmKgEAAQW+Hj//PqT2+jwEAgEmJQAAC4AtCwQGCyIABoBEAAckAgAHAAAL3ScCCAQAPAYIAS0LAwYLIgAGgEMAByQCAAcAAAxwIwAAC/YtCwMGLQsBBy0LAggtCwQJDSIABoBDAAokAgAKAAAMGyUAAA4ELgIAB4ADKACABAQABCUAAA4WLgiABQAKACIKAgsAKgsGDC0OBQwBIgAGgEcABQ4qBgUHJAIABwAADFslAAAOpC0OCgEtDggCLQ4FAy0OCQQjAAAM3icCBgQHLQgABy0KAQgtCgIJLQoDCi0KBAsACAAGACUAAAzfLQIAAC0LAQYtCwIHLQsECC4CAAaAAygAgAQEAAQlAAAOFi4IgAUACQEiAAmARwAKLQ4FCi0OCQEtDgcCLgyARwADLQ4IBCMAAAzeJiUAAAuALgiARQAFIwAADO8NIgAFgEMABiQCAAYAAA1fIwAADQQtCwIFLQsFBgAiBgIGLQ4GBScCBgQELQgBBycCCAQFAAgBCAEnAwcEAQAiBQIIJwIJBAQAIgcCCj8PAAgACi0LAQUtCwMGLQsECC0OBQEtDgcCLQ4GAy0OCAQmLQsDBgwqBQYHJAIABwAADXUjAAAN4S0LAgYAIgYCCAAqCAUJLQsJBy0LAQgAIggCCgAqCgULLQsLCQAqBwkKLQsDBy0LBAkuAgAGgAMoAIAEBAAFJQAADhYuCIAFAAsAIgsCDAAqDAUNLQ4KDS0OCAEtDgsCLQ4HAy0OCQQjAAAN4QEiAAWARwAGLQoGBSMAAAzvKgEAAQUC3G4ngHYSnTwEAgEmKgEAAQXFa8RaDhAAAjwEAgEmLgGAA4AGCwCABgACgAckAIAHAAAOMSMAAA48LgCAA4AFIwAADqMuAAABgAUBAAABgAQAAQEAgAOABIAJLgCAA4AKLgCABYALCwCACoAJgAwkAIAMAAAOjy4BgAqACC4EgAiACwEAgAoAAoAKAQCACwACgAsjAAAOXigBgAUEAAEDAIAGAAKABiMAAA6jJioBAAEFRafKcRlB5BU8BAIBJg==",
      "debug_symbols": "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",
      "brillig_names": [
        "set_guardian17"
      ]
    },
    {
      "name": "set_guardian18",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "guardian",
            "type": {
              "kind": "struct",
              "path": "structs::Guardian",
              "fields": [
                {
                  "name": "address",
                  "type": {
                    "kind": "struct",
                    "path": "structs::Guardian_PK",
                    "fields": [
                      {
                        "name": "value0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "index",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBICdJwAABAMnAlYEVScCVwQAHwoAVgBXgEgdAIBIgEgCHQCASYBJAh0AgEqASgIdAIBLgEsCHQCATIBMAh0AgE2ATQIdAIBOgE4CHQCAT4BPAh0AgFCAUAIdAIBRgFECHQCAUoBSAh0AgFOAUwIdAIBUgFQCHQCAVYBVAh0AgFaAVgIdAIBXgFcCHQCAWIBYAh0AgFmAWQIdAIBagFoCHQCAW4BbAh0AgFyAXAIdAIBdgF0CHQCAXoBeAh0AgF+AXwIdAIBggGACHQCAYYBhAh0AgGKAYgIdAIBjgGMCHQCAZIBkAh0AgGWAZQIdAIBmgGYCHQCAZ4BnAh0AgGiAaAIdAIBpgGkCHQCAaoBqAh0AgGuAawIdAIBsgGwCHQCAbYBtAh0AgG6AbgIdAIBvgG8CHQCAcIBwAh0AgHGAcQIdAIBygHICHQCAc4BzAh0AgHSAdAIdAIB1gHUCHQCAdoB2Ah0AgHeAdwIdAIB4gHgCHQCAeYB5Ah0AgHqAegIdAIB7gHsCHQCAfIB8Ah0AgH2AfQIdAIB+gH4CHQCAf4B/Ah0AgICAgAIdAICBgIECHQCAgoCCAh0AgIOAgwIdAICEgIQCHQCAhYCFAh0AgIaAhgIdAICHgIcCHQCAiICIAh0AgImAiQIdAICKgIoCHQCAi4CLAh0AgIyAjAIdAICNgI0CHQCAjoCOAh0AgI+AjwIdAICQgJACHQCAkYCRAh0AgJKAkgIdAICTgJMCHQCAlICUAh0AgJWAlQIdAICWgJYCHQCAl4CXAh0AgJiAmAIdAICZgJkCHQCAmoCaAh0AgJuAmwIdAICcgJwELgiASAABLgiASQACLgiASgADLgiASwAELgiATAAFLgiATQAGLgiATgAHLgiATwAILgiAUAAJLgiAUQAKLgiAUgALLgiAUwAMLgiAVAANLgiAVQAOLgiAVgAPLgiAVwAQLgiAWAARLgiAWQASLgiAWgATLgiAWwAULgiAXAAVLgiAXQAWLgiAXgAXLgiAXwAYLgiAYAAZLgiAYQAaLgiAYgAbLgiAYwAcLgiAZAAdLgiAZQAeLgiAZgAfLgiAZwAgLgiAaAAhLgiAaQAiLgiAagAjLgiAawAkLgiAbAAlLgiAbQAmLgiAbgAnLgiAbwAoLgiAcAApLgiAcQAqLgiAcgArLgiAcwAsLgiAdAAtLgiAdQAuLgiAdgAvLgiAdwAwLgiAeAAxLgiAeQAyLgiAegAzLgiAewA0LgiAfAA1LgiAfQA2LgiAfgA3LgiAfwA4LgiAgAA5LgiAgQA6LgiAggA7LgiAgwA8LgiAhAA9LgiAhQA+LgiAhgA/LgiAhwBALgiAiABBLgiAiQBCLgiAigBDLgiAiwBELgiAjABFLgiAjQBGLgiAjgBHLgiAjwBILgiAkABJLgiAkQBKLgiAkgBLLgiAkwBMLgiAlABNLgiAlQBOLgiAlgBPLgiAlwBQLgiAmABRLgiAmQBSLgiAmgBTLgiAmwBULgiAnABVJQAABJAlAAAEtCgCAAEEgJ0nAgIEADsOAAIAASgAgEMEAAMoAIBEAQAAKACARQQAACgAgEYBAAEoAIBHBAABJiUAAAuAHgIAVwAeAgBYADMqAFcAWABZJAIAWQAABNglAAALqRwKVVcAJwJVAAAtCAFYJwJZBAQACAFZAScDWAQBACJYAlktCllaLQ5VWgAiWgJaLQ5VWgAiWgJaLQ5VWisCAFkAAAAAAAAAAAIAAAAAAAAAAC0IAVonAlsEBQAIAVsBJwNaBAEAIloCWy0KW1wtDlVcACJcAlwtDlVcACJcAlwtDlVcACJcAlwtDllcLQgBWQAAAQIBLQ5YWS0IAVgAAAECAS0OWlgtCAFaAAABAgEuDIBFAFotCAFbAAABAgEuDIBEAFsnAlwAGycCXQReLQgAXi0KWV8tClhgLQpaYS0KW2ItClxjAAgAXQAlAAALuy0CAAAnAlwEXS0IAF0tClleLQpYXy0KWmAtClthLQpXYgAIAFwAJQAAC7stAgAALQtbVwsiAFeARABcJAIAXAAABhQnAl0EADwGXQEnAlcEXC0IAFwtClldLQpYXi0KWl8tCltgAAgAVwAlAAAM3y0CAAAtC1lXLQtYXC0LWl0tDldZLQ5cWC0OXVouDIBGAFsBIgBcgEcAWC0LWFcKKldVWAsiAFiARABVJAIAVQAABn8lAAAN8hwKAVUAHAoCAQAcCgMCABwKBAMAHAoFBAAcCgYFABwKBwYAHAoIBwAcCgkIABwKCgkAHAoLCgAcCgwLABwKDQwAHAoODQAcCg8OABwKEA8AHAoREAAcChIRABwKExIAHAoUEwAcChUUABwKFhUAHAoXFgAcChgXABwKGRgAHAoaGQAcChsaABwKHBsAHAodHAAcCh4dABwKHx4AHAogHwAcCiEgABwKIiEAHAojIgAcCiQjABwKJSQAHAomJQAcCicmABwKKCcAHAopKAAcCiopABwKKyoAHAosKwAcCi0sABwKLi0AHAovLgAcCjAvABwKMTAAHAoyMQAcCjMyABwKNDMAHAo1NAAcCjY1ABwKNzYAHAo4NwAcCjk4ABwKOjkAHAo7OgAcCjw7ABwKPTwAHAo+PQAcCj8+ABwKQD8AHApBQAAcCkJBABwKQ0IAHApEQwAcCkVEABwKRkUAHApHRgAcCkhHABwKSUgAHApKSQAcCktKABwKTEsAHApNTAAcCk5NABwKT04AHApQTwAcClFQABwKUlEAHApTUgAcClRTAC0IAVQnAlgEVQAIAVgBJwNUBAEAIlQCWC0KWFktDlVZACJZAlktDgFZACJZAlktDgJZACJZAlktDgNZACJZAlktDgRZACJZAlktDgVZACJZAlktDgZZACJZAlktDgdZACJZAlktDghZACJZAlktDglZACJZAlktDgpZACJZAlktDgtZACJZAlktDgxZACJZAlktDg1ZACJZAlktDg5ZACJZAlktDg9ZACJZAlktDhBZACJZAlktDhFZACJZAlktDhJZACJZAlktDhNZACJZAlktDhRZACJZAlktDhVZACJZAlktDhZZACJZAlktDhdZACJZAlktDhhZACJZAlktDhlZACJZAlktDhpZACJZAlktDhtZACJZAlktDhxZACJZAlktDh1ZACJZAlktDh5ZACJZAlktDh9ZACJZAlktDiBZACJZAlktDiFZACJZAlktDiJZACJZAlktDiNZACJZAlktDiRZACJZAlktDiVZACJZAlktDiZZACJZAlktDidZACJZAlktDihZACJZAlktDilZACJZAlktDipZACJZAlktDitZACJZAlktDixZACJZAlktDi1ZACJZAlktDi5ZACJZAlktDi9ZACJZAlktDjBZACJZAlktDjFZACJZAlktDjJZACJZAlktDjNZACJZAlktDjRZACJZAlktDjVZACJZAlktDjZZACJZAlktDjdZACJZAlktDjhZACJZAlktDjlZACJZAlktDjpZACJZAlktDjtZACJZAlktDjxZACJZAlktDj1ZACJZAlktDj5ZACJZAlktDj9ZACJZAlktDkBZACJZAlktDkFZACJZAlktDkJZACJZAlktDkNZACJZAlktDkRZACJZAlktDkVZACJZAlktDkZZACJZAlktDkdZACJZAlktDkhZACJZAlktDklZACJZAlktDkpZACJZAlktDktZACJZAlktDkxZACJZAlktDk1ZACJZAlktDk5ZACJZAlktDk9ZACJZAlktDlBZACJZAlktDlFZACJZAlktDlJZACJZAlktDlNZJwIBBFQuCIBFAFYjAAALPgwqVgECJAIAAgAAC1EjAAALUCYcClYCAAAqVwIDACJUAgQAKgRWBS0LBQIwCgACAAMBIgBWgEcAAi0KAlYjAAALPigAgAQEeAANAAAAgASAAyQAgAMAAAuoKgEAAQX3ofOvpa3UyjwEAgEmKgEAAQW+Hj//PqT2+jwEAgEmJQAAC4AtCwQGCyIABoBEAAckAgAHAAAL3ScCCAQAPAYIAS0LAwYLIgAGgEMAByQCAAcAAAxwIwAAC/YtCwMGLQsBBy0LAggtCwQJDSIABoBDAAokAgAKAAAMGyUAAA4ELgIAB4ADKACABAQABCUAAA4WLgiABQAKACIKAgsAKgsGDC0OBQwBIgAGgEcABQ4qBgUHJAIABwAADFslAAAOpC0OCgEtDggCLQ4FAy0OCQQjAAAM3icCBgQHLQgABy0KAQgtCgIJLQoDCi0KBAsACAAGACUAAAzfLQIAAC0LAQYtCwIHLQsECC4CAAaAAygAgAQEAAQlAAAOFi4IgAUACQEiAAmARwAKLQ4FCi0OCQEtDgcCLgyARwADLQ4IBCMAAAzeJiUAAAuALgiARQAFIwAADO8NIgAFgEMABiQCAAYAAA1fIwAADQQtCwIFLQsFBgAiBgIGLQ4GBScCBgQELQgBBycCCAQFAAgBCAEnAwcEAQAiBQIIJwIJBAQAIgcCCj8PAAgACi0LAQUtCwMGLQsECC0OBQEtDgcCLQ4GAy0OCAQmLQsDBgwqBQYHJAIABwAADXUjAAAN4S0LAgYAIgYCCAAqCAUJLQsJBy0LAQgAIggCCgAqCgULLQsLCQAqBwkKLQsDBy0LBAkuAgAGgAMoAIAEBAAFJQAADhYuCIAFAAsAIgsCDAAqDAUNLQ4KDS0OCAEtDgsCLQ4HAy0OCQQjAAAN4QEiAAWARwAGLQoGBSMAAAzvKgEAAQUC3G4ngHYSnTwEAgEmKgEAAQXFa8RaDhAAAjwEAgEmLgGAA4AGCwCABgACgAckAIAHAAAOMSMAAA48LgCAA4AFIwAADqMuAAABgAUBAAABgAQAAQEAgAOABIAJLgCAA4AKLgCABYALCwCACoAJgAwkAIAMAAAOjy4BgAqACC4EgAiACwEAgAoAAoAKAQCACwACgAsjAAAOXigBgAUEAAEDAIAGAAKABiMAAA6jJioBAAEFRafKcRlB5BU8BAIBJg==",
      "debug_symbols": "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",
      "brillig_names": [
        "set_guardian18"
      ]
    },
    {
      "name": "set_guardian19",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "guardian",
            "type": {
              "kind": "struct",
              "path": "structs::Guardian",
              "fields": [
                {
                  "name": "address",
                  "type": {
                    "kind": "struct",
                    "path": "structs::Guardian_PK",
                    "fields": [
                      {
                        "name": "value0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "index",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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HBsAHAodHAAcCh4dABwKHx4AHAogHwAcCiEgABwKIiEAHAojIgAcCiQjABwKJSQAHAomJQAcCicmABwKKCcAHAopKAAcCiopABwKKyoAHAosKwAcCi0sABwKLi0AHAovLgAcCjAvABwKMTAAHAoyMQAcCjMyABwKNDMAHAo1NAAcCjY1ABwKNzYAHAo4NwAcCjk4ABwKOjkAHAo7OgAcCjw7ABwKPTwAHAo+PQAcCj8+ABwKQD8AHApBQAAcCkJBABwKQ0IAHApEQwAcCkVEABwKRkUAHApHRgAcCkhHABwKSUgAHApKSQAcCktKABwKTEsAHApNTAAcCk5NABwKT04AHApQTwAcClFQABwKUlEAHApTUgAcClRTAC0IAVQnAlgEVQAIAVgBJwNUBAEAIlQCWC0KWFktDlVZACJZAlktDgFZACJZAlktDgJZACJZAlktDgNZACJZAlktDgRZACJZAlktDgVZACJZAlktDgZZACJZAlktDgdZACJZAlktDghZACJZAlktDglZACJZAlktDgpZACJZAlktDgtZACJZAlktDgxZACJZAlktDg1ZACJZAlktDg5ZACJZAlktDg9ZACJZAlktDhBZACJZAlktDhFZACJZAlktDhJZACJZAlktDhNZACJZAlktDhRZACJZAlktDhVZACJZAlktDhZZACJZAlktDhdZACJZAlktDhhZACJZAlktDhlZACJZAlktDhpZACJZAlktDhtZACJZAlktDhxZACJZAlktDh1ZACJZAlktDh5ZACJZAlktDh9ZACJZAlktDiBZACJZAlktDiFZACJZAlktDiJZACJZAlktDiNZACJZAlktDiRZACJZAlktDiVZACJZAlktDiZZACJZAlktDidZACJZAlktDihZACJZAlktDilZACJZAlktDipZACJZAlktDitZACJZAlktDixZACJZAlktDi1ZACJZAlktDi5ZACJZAlktDi9ZACJZAlktDjBZACJZAlktDjFZACJZAlktDjJZACJZAlktDjNZACJZAlktDjRZACJZAlktDjVZACJZAlktDjZZACJZAlktDjdZACJZAlktDjhZACJZAlktDjlZACJZAlktDjpZACJZAlktDjtZACJZAlktDjxZACJZAlktDj1ZACJZAlktDj5ZACJZAlktDj9ZACJZAlktDkBZACJZAlktDkFZACJZAlktDkJZACJZAlktDkNZACJZAlktDkRZACJZAlktDkVZACJZAlktDkZZACJZAlktDkdZACJZAlktDkhZACJZAlktDklZACJZAlktDkpZACJZAlktDktZACJZAlktDkxZACJZAlktDk1ZACJZAlktDk5ZACJZAlktDk9ZACJZAlktDlBZACJZAlktDlFZACJZAlktDlJZACJZAlktDlNZJwIBBFQuCIBFAFYjAAALPgwqVgECJAIAAgAAC1EjAAALUCYcClYCAAAqVwIDACJUAgQAKgRWBS0LBQIwCgACAAMBIgBWgEcAAi0KAlYjAAALPigAgAQEeAANAAAAgASAAyQAgAMAAAuoKgEAAQX3ofOvpa3UyjwEAgEmKgEAAQW+Hj//PqT2+jwEAgEmJQAAC4AtCwQGCyIABoBEAAckAgAHAAAL3ScCCAQAPAYIAS0LAwYLIgAGgEMAByQCAAcAAAxwIwAAC/YtCwMGLQsBBy0LAggtCwQJDSIABoBDAAokAgAKAAAMGyUAAA4ELgIAB4ADKACABAQABCUAAA4WLgiABQAKACIKAgsAKgsGDC0OBQwBIgAGgEcABQ4qBgUHJAIABwAADFslAAAOpC0OCgEtDggCLQ4FAy0OCQQjAAAM3icCBgQHLQgABy0KAQgtCgIJLQoDCi0KBAsACAAGACUAAAzfLQIAAC0LAQYtCwIHLQsECC4CAAaAAygAgAQEAAQlAAAOFi4IgAUACQEiAAmARwAKLQ4FCi0OCQEtDgcCLgyARwADLQ4IBCMAAAzeJiUAAAuALgiARQAFIwAADO8NIgAFgEMABiQCAAYAAA1fIwAADQQtCwIFLQsFBgAiBgIGLQ4GBScCBgQELQgBBycCCAQFAAgBCAEnAwcEAQAiBQIIJwIJBAQAIgcCCj8PAAgACi0LAQUtCwMGLQsECC0OBQEtDgcCLQ4GAy0OCAQmLQsDBgwqBQYHJAIABwAADXUjAAAN4S0LAgYAIgYCCAAqCAUJLQsJBy0LAQgAIggCCgAqCgULLQsLCQAqBwkKLQsDBy0LBAkuAgAGgAMoAIAEBAAFJQAADhYuCIAFAAsAIgsCDAAqDAUNLQ4KDS0OCAEtDgsCLQ4HAy0OCQQjAAAN4QEiAAWARwAGLQoGBSMAAAzvKgEAAQUC3G4ngHYSnTwEAgEmKgEAAQXFa8RaDhAAAjwEAgEmLgGAA4AGCwCABgACgAckAIAHAAAOMSMAAA48LgCAA4AFIwAADqMuAAABgAUBAAABgAQAAQEAgAOABIAJLgCAA4AKLgCABYALCwCACoAJgAwkAIAMAAAOjy4BgAqACC4EgAiACwEAgAoAAoAKAQCACwACgAsjAAAOXigBgAUEAAEDAIAGAAKABiMAAA6jJioBAAEFRafKcRlB5BU8BAIBJg==",
      "debug_symbols": "tZrdThw5E4bvhWMO2j/lKudWoigiCVkhIRKx4ZM+Rdz7ujyuZ4ZI3dqd7J7AQw1+y2/bVe1u+Hnz5f7Tyx8fH56+fvvz5t37nzefnh8eHx/++Pj47fPdj4dvTyP682bzLylv/eZdvR2Q6s07nTAiaXPKOig5FQmqY1ySSSOW5+/JBlWoBzVijZgSUwuyDGlQT1BbVDbP5nMpOUESVPi0EKvE6jnWg6RAFtQypEFKNm1B5lejT6pQD+oF0kV1y1ALShskQe5tEbHC7xWfQXaqCSI21+NEFbKg6e1EjFBGqAQZMUPFvZ3IvS3SRbIlSKAYIalAMRfJxHyvZd+IUlxFJvWgqkGSIZ99c2oJEqgHaYE0yBhhqHRiHZUeKm0rUKi0lCCBGDH3pFdUKwUaY4vv4lZzkK/WIgtqY0SZKs2ClJgSM2JGrBPrEdOtQMQSsUQsE8vECrFCrBKrxISYEMOH4kPxofhQfCg+FB+KD8OH4cPwYfgwfBg+DB+GD8OH4cPwYfgwfBg+DB+GD8OH4cPwYfjo+Oj46Pjo+Oj46Pjo+Oj46Pjo+Oj46Pjo+Oj46Pjo+Oj46Pjo+OjhI2/hYxCxRCwRy8QysUKsEKvEKjEhJsQasUZMiSmx6UMnaVDPUMTSliFiXt2LJChvUIV6UCmQBVWUK8qCsvewEzWUG9kayko2RRlvCW8Jb6mHct4SFMo5bVCFIlvOBYpsuWQosuWKciWboCxkE5Qb2RrKSjZF2chmKHey9VCeZ4FFFYpsJRUospWcochWSoIi2zwzLCJbRVnIJig3sjWUlWyKspHNUO5k6yj3yFa3AkW2mjIU2eaZYVFkm2eGRQKhXCuEspBNUG5kaygr2RRlI5uhbGTrKPfIJlSeUHlC5UmKbELlSRYolKVUCOVaIJSFbFTePD0sQlnJRuWJko3KEyMblSd0lUbltS2yNSqv0VUaldfoKo3Ka3SVRuU1ukqj8hpdpVF5ja7SqLxGV2lUXqOrNCqv0VUaldfoKkrlKV1FqTylqyiVp3QVpfKUrqJUntJVlMpTuopSeUpXUSpP6SpK5SldRak8pasolad0FaXyjK5iVJ7RVYzKM7qKUXlGVzEqz+gqRuUZXcWoPKOrnM4W3cn3VR2nw9y9Zmqa5LHs5P1gETHvB7VO8li5vSnzPl3FaY5oTl5biyzId90iDfKVqerk/aDapBbkNbOoQhZk/F7nU7/OdXgryffQieasTqRBvnMWWVAh5vOTzcn3y4l8vyyyIN8lixjhPWwRY71zSZrUg7xzLdJF8766SKAYMe+ri4jlAqFSUPFdItnJr/MiC/K9sagHTR+T3Me8ptl9LOpBFrHinVV8HxSvPKmTWpDvzkUC9bVf5j1vUeyhec9bREyJKTEjZsQ6ej1i8+l4UQvyjrmoQoyY17RM8qsxY3P2J+rLx3wSXkRs7ogT+Vjf49X7xiJi3jdEJ7Ug7xuLQlm2DdKglCELygUixnoI6yGsh1RyzH1QX19vb+Jtzscfz/f3/jLn4vXOeOnz/e75/unHzbunl8fH25v/3T2+zF/68/vd0/z+4+55fDp2/P3Tl/F9CH59eLx3er09j972h473Ja2u4eM9Se9IjEP0G5F0ILL54/9JY6v5QqK+kcj7EuOAoUtirEpDQt86KfsK4zEwrsPoy7sKhzZ6Dxsp9V0b8ts22n9rQ4zVsP3VsAMJUQmJVtLeJPq+QpctJtFF0m/aGG8xd20cbu5xmmFz64UR+WUa+UjkXCCjeZ3nob/Ux8HeHG8cQqIbCqM/vlWo+wr+zLMkxgOOnDWk/v1ZSMxiPMHvz+Jgc46DVkiMk1Y5awy9Nxq6r1EkjNR03t7jtvpW4WB3jptxCiPjZr2vcbA/x2PHkpCyXadApY+HgOt8jOMga3qxIv9IQxOLqgdOcvlvNcY7zo2OoXadxnirGBra83Ua/VzxPR9c06OKr6zLeGnddis+H6xL0y26ho6ntbNGeltt+WCHaYttrhdXdPSSK/tfrXv9rxz14bol+l/W3XmUgytqBY3xRLV7NyhHC1usKV7MLlpg+mUi9V9RObjLN0pf03bRivs/cCOZu9t4SZT253F0WTO3pvGKfP/QZEcdnZobWK+RsK1H+7C0teskLP2uROLAYeOp87pZsDeGhO1J1KN1HffY86mlXdyc9O8fyS9P023/1nIkkThEptHNrpNozCLZdbMo/Vxr/bpZSN7OrVivk2jnbm79OiMXbTRfZ6TU82OWXGVEayyI1naNQK/CkfwqE+NNVQjk62bAnuoqv2nhV4EP48e7zw/Pb/5B4tWlnh/uPj3erx+/vjx9vvj0x/+/xyfxDxbfn799vv/y8nzvSuf/shhf3o8Xq7fjz7Afxt/P/MfxHH8rYv7jeLnw3m/5urUPrz6ZvwA=",
      "brillig_names": [
        "set_guardian19"
      ]
    },
    {
      "name": "set_guardian2",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "guardian",
            "type": {
              "kind": "struct",
              "path": "structs::Guardian",
              "fields": [
                {
                  "name": "address",
                  "type": {
                    "kind": "struct",
                    "path": "structs::Guardian_PK",
                    "fields": [
                      {
                        "name": "value0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "index",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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HBsAHAodHAAcCh4dABwKHx4AHAogHwAcCiEgABwKIiEAHAojIgAcCiQjABwKJSQAHAomJQAcCicmABwKKCcAHAopKAAcCiopABwKKyoAHAosKwAcCi0sABwKLi0AHAovLgAcCjAvABwKMTAAHAoyMQAcCjMyABwKNDMAHAo1NAAcCjY1ABwKNzYAHAo4NwAcCjk4ABwKOjkAHAo7OgAcCjw7ABwKPTwAHAo+PQAcCj8+ABwKQD8AHApBQAAcCkJBABwKQ0IAHApEQwAcCkVEABwKRkUAHApHRgAcCkhHABwKSUgAHApKSQAcCktKABwKTEsAHApNTAAcCk5NABwKT04AHApQTwAcClFQABwKUlEAHApTUgAcClRTAC0IAVQnAlgEVQAIAVgBJwNUBAEAIlQCWC0KWFktDlVZACJZAlktDgFZACJZAlktDgJZACJZAlktDgNZACJZAlktDgRZACJZAlktDgVZACJZAlktDgZZACJZAlktDgdZACJZAlktDghZACJZAlktDglZACJZAlktDgpZACJZAlktDgtZACJZAlktDgxZACJZAlktDg1ZACJZAlktDg5ZACJZAlktDg9ZACJZAlktDhBZACJZAlktDhFZACJZAlktDhJZACJZAlktDhNZACJZAlktDhRZACJZAlktDhVZACJZAlktDhZZACJZAlktDhdZACJZAlktDhhZACJZAlktDhlZACJZAlktDhpZACJZAlktDhtZACJZAlktDhxZACJZAlktDh1ZACJZAlktDh5ZACJZAlktDh9ZACJZAlktDiBZACJZAlktDiFZACJZAlktDiJZACJZAlktDiNZACJZAlktDiRZACJZAlktDiVZACJZAlktDiZZACJZAlktDidZACJZAlktDihZACJZAlktDilZACJZAlktDipZACJZAlktDitZACJZAlktDixZACJZAlktDi1ZACJZAlktDi5ZACJZAlktDi9ZACJZAlktDjBZACJZAlktDjFZACJZAlktDjJZACJZAlktDjNZACJZAlktDjRZACJZAlktDjVZACJZAlktDjZZACJZAlktDjdZACJZAlktDjhZACJZAlktDjlZACJZAlktDjpZACJZAlktDjtZACJZAlktDjxZACJZAlktDj1ZACJZAlktDj5ZACJZAlktDj9ZACJZAlktDkBZACJZAlktDkFZACJZAlktDkJZACJZAlktDkNZACJZAlktDkRZACJZAlktDkVZACJZAlktDkZZACJZAlktDkdZACJZAlktDkhZACJZAlktDklZACJZAlktDkpZACJZAlktDktZACJZAlktDkxZACJZAlktDk1ZACJZAlktDk5ZACJZAlktDk9ZACJZAlktDlBZACJZAlktDlFZACJZAlktDlJZACJZAlktDlNZJwIBBFQuCIBFAFYjAAALPgwqVgECJAIAAgAAC1EjAAALUCYcClYCAAAqVwIDACJUAgQAKgRWBS0LBQIwCgACAAMBIgBWgEcAAi0KAlYjAAALPigAgAQEeAANAAAAgASAAyQAgAMAAAuoKgEAAQX3ofOvpa3UyjwEAgEmKgEAAQW+Hj//PqT2+jwEAgEmJQAAC4AtCwQGCyIABoBEAAckAgAHAAAL3ScCCAQAPAYIAS0LAwYLIgAGgEMAByQCAAcAAAxwIwAAC/YtCwMGLQsBBy0LAggtCwQJDSIABoBDAAokAgAKAAAMGyUAAA4ELgIAB4ADKACABAQABCUAAA4WLgiABQAKACIKAgsAKgsGDC0OBQwBIgAGgEcABQ4qBgUHJAIABwAADFslAAAOpC0OCgEtDggCLQ4FAy0OCQQjAAAM3icCBgQHLQgABy0KAQgtCgIJLQoDCi0KBAsACAAGACUAAAzfLQIAAC0LAQYtCwIHLQsECC4CAAaAAygAgAQEAAQlAAAOFi4IgAUACQEiAAmARwAKLQ4FCi0OCQEtDgcCLgyARwADLQ4IBCMAAAzeJiUAAAuALgiARQAFIwAADO8NIgAFgEMABiQCAAYAAA1fIwAADQQtCwIFLQsFBgAiBgIGLQ4GBScCBgQELQgBBycCCAQFAAgBCAEnAwcEAQAiBQIIJwIJBAQAIgcCCj8PAAgACi0LAQUtCwMGLQsECC0OBQEtDgcCLQ4GAy0OCAQmLQsDBgwqBQYHJAIABwAADXUjAAAN4S0LAgYAIgYCCAAqCAUJLQsJBy0LAQgAIggCCgAqCgULLQsLCQAqBwkKLQsDBy0LBAkuAgAGgAMoAIAEBAAFJQAADhYuCIAFAAsAIgsCDAAqDAUNLQ4KDS0OCAEtDgsCLQ4HAy0OCQQjAAAN4QEiAAWARwAGLQoGBSMAAAzvKgEAAQUC3G4ngHYSnTwEAgEmKgEAAQXFa8RaDhAAAjwEAgEmLgGAA4AGCwCABgACgAckAIAHAAAOMSMAAA48LgCAA4AFIwAADqMuAAABgAUBAAABgAQAAQEAgAOABIAJLgCAA4AKLgCABYALCwCACoAJgAwkAIAMAAAOjy4BgAqACC4EgAiACwEAgAoAAoAKAQCACwACgAsjAAAOXigBgAUEAAEDAIAGAAKABiMAAA6jJioBAAEFRafKcRlB5BU8BAIBJg==",
      "debug_symbols": "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",
      "brillig_names": [
        "set_guardian2"
      ]
    },
    {
      "name": "set_guardian3",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "guardian",
            "type": {
              "kind": "struct",
              "path": "structs::Guardian",
              "fields": [
                {
                  "name": "address",
                  "type": {
                    "kind": "struct",
                    "path": "structs::Guardian_PK",
                    "fields": [
                      {
                        "name": "value0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "index",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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HBsAHAodHAAcCh4dABwKHx4AHAogHwAcCiEgABwKIiEAHAojIgAcCiQjABwKJSQAHAomJQAcCicmABwKKCcAHAopKAAcCiopABwKKyoAHAosKwAcCi0sABwKLi0AHAovLgAcCjAvABwKMTAAHAoyMQAcCjMyABwKNDMAHAo1NAAcCjY1ABwKNzYAHAo4NwAcCjk4ABwKOjkAHAo7OgAcCjw7ABwKPTwAHAo+PQAcCj8+ABwKQD8AHApBQAAcCkJBABwKQ0IAHApEQwAcCkVEABwKRkUAHApHRgAcCkhHABwKSUgAHApKSQAcCktKABwKTEsAHApNTAAcCk5NABwKT04AHApQTwAcClFQABwKUlEAHApTUgAcClRTAC0IAVQnAlgEVQAIAVgBJwNUBAEAIlQCWC0KWFktDlVZACJZAlktDgFZACJZAlktDgJZACJZAlktDgNZACJZAlktDgRZACJZAlktDgVZACJZAlktDgZZACJZAlktDgdZACJZAlktDghZACJZAlktDglZACJZAlktDgpZACJZAlktDgtZACJZAlktDgxZACJZAlktDg1ZACJZAlktDg5ZACJZAlktDg9ZACJZAlktDhBZACJZAlktDhFZACJZAlktDhJZACJZAlktDhNZACJZAlktDhRZACJZAlktDhVZACJZAlktDhZZACJZAlktDhdZACJZAlktDhhZACJZAlktDhlZACJZAlktDhpZACJZAlktDhtZACJZAlktDhxZACJZAlktDh1ZACJZAlktDh5ZACJZAlktDh9ZACJZAlktDiBZACJZAlktDiFZACJZAlktDiJZACJZAlktDiNZACJZAlktDiRZACJZAlktDiVZACJZAlktDiZZACJZAlktDidZACJZAlktDihZACJZAlktDilZACJZAlktDipZACJZAlktDitZACJZAlktDixZACJZAlktDi1ZACJZAlktDi5ZACJZAlktDi9ZACJZAlktDjBZACJZAlktDjFZACJZAlktDjJZACJZAlktDjNZACJZAlktDjRZACJZAlktDjVZACJZAlktDjZZACJZAlktDjdZACJZAlktDjhZACJZAlktDjlZACJZAlktDjpZACJZAlktDjtZACJZAlktDjxZACJZAlktDj1ZACJZAlktDj5ZACJZAlktDj9ZACJZAlktDkBZACJZAlktDkFZACJZAlktDkJZACJZAlktDkNZACJZAlktDkRZACJZAlktDkVZACJZAlktDkZZACJZAlktDkdZACJZAlktDkhZACJZAlktDklZACJZAlktDkpZACJZAlktDktZACJZAlktDkxZACJZAlktDk1ZACJZAlktDk5ZACJZAlktDk9ZACJZAlktDlBZACJZAlktDlFZACJZAlktDlJZACJZAlktDlNZJwIBBFQuCIBFAFYjAAALPgwqVgECJAIAAgAAC1EjAAALUCYcClYCAAAqVwIDACJUAgQAKgRWBS0LBQIwCgACAAMBIgBWgEcAAi0KAlYjAAALPigAgAQEeAANAAAAgASAAyQAgAMAAAuoKgEAAQX3ofOvpa3UyjwEAgEmKgEAAQW+Hj//PqT2+jwEAgEmJQAAC4AtCwQGCyIABoBEAAckAgAHAAAL3ScCCAQAPAYIAS0LAwYLIgAGgEMAByQCAAcAAAxwIwAAC/YtCwMGLQsBBy0LAggtCwQJDSIABoBDAAokAgAKAAAMGyUAAA4ELgIAB4ADKACABAQABCUAAA4WLgiABQAKACIKAgsAKgsGDC0OBQwBIgAGgEcABQ4qBgUHJAIABwAADFslAAAOpC0OCgEtDggCLQ4FAy0OCQQjAAAM3icCBgQHLQgABy0KAQgtCgIJLQoDCi0KBAsACAAGACUAAAzfLQIAAC0LAQYtCwIHLQsECC4CAAaAAygAgAQEAAQlAAAOFi4IgAUACQEiAAmARwAKLQ4FCi0OCQEtDgcCLgyARwADLQ4IBCMAAAzeJiUAAAuALgiARQAFIwAADO8NIgAFgEMABiQCAAYAAA1fIwAADQQtCwIFLQsFBgAiBgIGLQ4GBScCBgQELQgBBycCCAQFAAgBCAEnAwcEAQAiBQIIJwIJBAQAIgcCCj8PAAgACi0LAQUtCwMGLQsECC0OBQEtDgcCLQ4GAy0OCAQmLQsDBgwqBQYHJAIABwAADXUjAAAN4S0LAgYAIgYCCAAqCAUJLQsJBy0LAQgAIggCCgAqCgULLQsLCQAqBwkKLQsDBy0LBAkuAgAGgAMoAIAEBAAFJQAADhYuCIAFAAsAIgsCDAAqDAUNLQ4KDS0OCAEtDgsCLQ4HAy0OCQQjAAAN4QEiAAWARwAGLQoGBSMAAAzvKgEAAQUC3G4ngHYSnTwEAgEmKgEAAQXFa8RaDhAAAjwEAgEmLgGAA4AGCwCABgACgAckAIAHAAAOMSMAAA48LgCAA4AFIwAADqMuAAABgAUBAAABgAQAAQEAgAOABIAJLgCAA4AKLgCABYALCwCACoAJgAwkAIAMAAAOjy4BgAqACC4EgAiACwEAgAoAAoAKAQCACwACgAsjAAAOXigBgAUEAAEDAIAGAAKABiMAAA6jJioBAAEFRafKcRlB5BU8BAIBJg==",
      "debug_symbols": "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",
      "brillig_names": [
        "set_guardian3"
      ]
    },
    {
      "name": "set_guardian4",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "guardian",
            "type": {
              "kind": "struct",
              "path": "structs::Guardian",
              "fields": [
                {
                  "name": "address",
                  "type": {
                    "kind": "struct",
                    "path": "structs::Guardian_PK",
                    "fields": [
                      {
                        "name": "value0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "index",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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HBsAHAodHAAcCh4dABwKHx4AHAogHwAcCiEgABwKIiEAHAojIgAcCiQjABwKJSQAHAomJQAcCicmABwKKCcAHAopKAAcCiopABwKKyoAHAosKwAcCi0sABwKLi0AHAovLgAcCjAvABwKMTAAHAoyMQAcCjMyABwKNDMAHAo1NAAcCjY1ABwKNzYAHAo4NwAcCjk4ABwKOjkAHAo7OgAcCjw7ABwKPTwAHAo+PQAcCj8+ABwKQD8AHApBQAAcCkJBABwKQ0IAHApEQwAcCkVEABwKRkUAHApHRgAcCkhHABwKSUgAHApKSQAcCktKABwKTEsAHApNTAAcCk5NABwKT04AHApQTwAcClFQABwKUlEAHApTUgAcClRTAC0IAVQnAlgEVQAIAVgBJwNUBAEAIlQCWC0KWFktDlVZACJZAlktDgFZACJZAlktDgJZACJZAlktDgNZACJZAlktDgRZACJZAlktDgVZACJZAlktDgZZACJZAlktDgdZACJZAlktDghZACJZAlktDglZACJZAlktDgpZACJZAlktDgtZACJZAlktDgxZACJZAlktDg1ZACJZAlktDg5ZACJZAlktDg9ZACJZAlktDhBZACJZAlktDhFZACJZAlktDhJZACJZAlktDhNZACJZAlktDhRZACJZAlktDhVZACJZAlktDhZZACJZAlktDhdZACJZAlktDhhZACJZAlktDhlZACJZAlktDhpZACJZAlktDhtZACJZAlktDhxZACJZAlktDh1ZACJZAlktDh5ZACJZAlktDh9ZACJZAlktDiBZACJZAlktDiFZACJZAlktDiJZACJZAlktDiNZACJZAlktDiRZACJZAlktDiVZACJZAlktDiZZACJZAlktDidZACJZAlktDihZACJZAlktDilZACJZAlktDipZACJZAlktDitZACJZAlktDixZACJZAlktDi1ZACJZAlktDi5ZACJZAlktDi9ZACJZAlktDjBZACJZAlktDjFZACJZAlktDjJZACJZAlktDjNZACJZAlktDjRZACJZAlktDjVZACJZAlktDjZZACJZAlktDjdZACJZAlktDjhZACJZAlktDjlZACJZAlktDjpZACJZAlktDjtZACJZAlktDjxZACJZAlktDj1ZACJZAlktDj5ZACJZAlktDj9ZACJZAlktDkBZACJZAlktDkFZACJZAlktDkJZACJZAlktDkNZACJZAlktDkRZACJZAlktDkVZACJZAlktDkZZACJZAlktDkdZACJZAlktDkhZACJZAlktDklZACJZAlktDkpZACJZAlktDktZACJZAlktDkxZACJZAlktDk1ZACJZAlktDk5ZACJZAlktDk9ZACJZAlktDlBZACJZAlktDlFZACJZAlktDlJZACJZAlktDlNZJwIBBFQuCIBFAFYjAAALPgwqVgECJAIAAgAAC1EjAAALUCYcClYCAAAqVwIDACJUAgQAKgRWBS0LBQIwCgACAAMBIgBWgEcAAi0KAlYjAAALPigAgAQEeAANAAAAgASAAyQAgAMAAAuoKgEAAQX3ofOvpa3UyjwEAgEmKgEAAQW+Hj//PqT2+jwEAgEmJQAAC4AtCwQGCyIABoBEAAckAgAHAAAL3ScCCAQAPAYIAS0LAwYLIgAGgEMAByQCAAcAAAxwIwAAC/YtCwMGLQsBBy0LAggtCwQJDSIABoBDAAokAgAKAAAMGyUAAA4ELgIAB4ADKACABAQABCUAAA4WLgiABQAKACIKAgsAKgsGDC0OBQwBIgAGgEcABQ4qBgUHJAIABwAADFslAAAOpC0OCgEtDggCLQ4FAy0OCQQjAAAM3icCBgQHLQgABy0KAQgtCgIJLQoDCi0KBAsACAAGACUAAAzfLQIAAC0LAQYtCwIHLQsECC4CAAaAAygAgAQEAAQlAAAOFi4IgAUACQEiAAmARwAKLQ4FCi0OCQEtDgcCLgyARwADLQ4IBCMAAAzeJiUAAAuALgiARQAFIwAADO8NIgAFgEMABiQCAAYAAA1fIwAADQQtCwIFLQsFBgAiBgIGLQ4GBScCBgQELQgBBycCCAQFAAgBCAEnAwcEAQAiBQIIJwIJBAQAIgcCCj8PAAgACi0LAQUtCwMGLQsECC0OBQEtDgcCLQ4GAy0OCAQmLQsDBgwqBQYHJAIABwAADXUjAAAN4S0LAgYAIgYCCAAqCAUJLQsJBy0LAQgAIggCCgAqCgULLQsLCQAqBwkKLQsDBy0LBAkuAgAGgAMoAIAEBAAFJQAADhYuCIAFAAsAIgsCDAAqDAUNLQ4KDS0OCAEtDgsCLQ4HAy0OCQQjAAAN4QEiAAWARwAGLQoGBSMAAAzvKgEAAQUC3G4ngHYSnTwEAgEmKgEAAQXFa8RaDhAAAjwEAgEmLgGAA4AGCwCABgACgAckAIAHAAAOMSMAAA48LgCAA4AFIwAADqMuAAABgAUBAAABgAQAAQEAgAOABIAJLgCAA4AKLgCABYALCwCACoAJgAwkAIAMAAAOjy4BgAqACC4EgAiACwEAgAoAAoAKAQCACwACgAsjAAAOXigBgAUEAAEDAIAGAAKABiMAAA6jJioBAAEFRafKcRlB5BU8BAIBJg==",
      "debug_symbols": "tZrdbhw5DoXfxde+KP1QpPIqQRA4iTMwYDiBJ15gEfjdV1SLX7cDVGHS2bmxP7NdhzolkaWS/fPmy/2nl78+Pjx9/fb3zbv3P28+PT88Pj789fHx2+e7Hw/fnkb0583mX1Le+s27ejsg1Zt3OmFE0uaUdVByKhJUx3VJJo1Ynr8nG1ShHtSINWJKTC3IMqRBPUFtUdk8m4+l5ARJUOHTQqwSq+dYD5ICWVDLkAYp2bQFmd+NPqlCPagXSBfVLUMtKG2QBLm3RcQKv1d8BNmpJojYnI8TVciCprcTcYVyhUqQETNU3NuJ3NsiXSRbggSKKyQVKMYimZivtewLUYqryKQeVDVIMuSjb04tQQL1IC2QBhlXGCqdWEelh0rbChQqLSVIIK6Ya9IrqpUCjWuLr+JWc5DP1iILauOKMlWaBSkxJWbEjFgn1iOmW4GIJWKJWCaWiRVihVglVokJMSGGD8WH4kPxofhQfCg+FB+GD8OH4cPwYfgwfBg+DB+GD8OH4cPwYfgwfBg+DB+GD8OH4cPw0fHR8dHx0fHR8dHx0fHR8dHx0fHR8dHx0fHR8dHx0fHR8dHx0fHRw0fewscgYolYIpaJZWKFWCFWiVViQkyINWKNmBJTYtOHTtKgnqGIpS1DxLy6F0lQ3qAK9aBSIAuqKFeUBWXvYSdqKDeyNZSVbIoy3hLeEt5SD+W8JSiUc9qgCkW2nAsU2XLJUGTLFeVKNkFZyCYoN7I1lJVsirKRzVDuZOuhPPcCiyoU2UoqUGQrOUORrZQERba5Z1hEtoqykE1QbmRrKCvZFGUjm6HcydZR7pGtbgWKbDVlKLLNPcOiyDb3DIsEQrlWCGUhm6DcyNZQVrIpykY2Q9nI1lHukU2oPKHyhMqTFNmEypMsUChLqRDKtUAoC9movLl7WISyko3KEyUblSdGNipP6CqNymtbZGtUXqOrNCqv0VUaldfoKo3Ka3SVRuU1ukqj8hpdpVF5ja7SqLxGV2lUXqOrNCqv0VWUylO6ilJ5SldRKk/pKkrlKV1FqTylqyiVp3QVpfKUrqJUntJVlMpTuopSeUpXUSpP6SpK5Rldxag8o6sYlWd0FaPyjK5iVJ7RVYzKM7qKUXlGVzntLbqTr6s6doe5e83UNMlj2cn7wSJi3g9qneSxcntT5nO6itO8ojl5bS2yIF91izTIZ6aqk/eDapNakNfMogpZkPF7nU/9PtfhrSRfQyeaozqRBvnKWWRBhZiPTzYnXy8n8vWyyIJ8lSziCu9hi7jWO5ekST3IO9ciXTSfq4sEiivmc3URsVwgVAoqvkokO/l9XmRBvjYW9aDpY5L7mPc0u49FPcgiVryziq+D4pUndVIL8tW5SKC+1st85i2KNTSfeYuIKTElZsSMWEevR2y+HS9qQd4xF1WIK+Y9LZP8bszYHP2J+vIx34QXEZsr4kR+ra/x6n1jETHvG6KTWpD3jUWhLNsGaVDKkAXlAhFjPoT5EOZDKjnmOqivr7c3cZrz8cfz/b0f5lwc74xDn+93z/dPP27ePb08Pt7e/Ofu8WX+0t/f757m9x93z+PTseLvn76M70Pw68PjvdPr7fnqbf/ScV7S6rp8nJP0jsTYRL8RSQcim7/+nzS2mi8k6huJvC8xNhi6JMasNCT0rZOyrzBeA+M+jL68q3Boo/ewkVLftSF/bKP9uzbEmA3bnw07kBCVkGgl7Q2i7yt02WIQXST9oY1xirlr42hxjxMQfIzXr/PdlF+GkY8q5Fwgo3mdx6G/1MfB2hwnDiHRDYXRH98q1H0Ff+dZEuMFR84aUv/5KCRGMd7g90dxsDjHRiskxk6rnDWG3hsN3dcoEkZqOk/IeKy+VThYneNhnMLIeFjvaxysz/HasSSkbNcpUOnjJeA6H2M7yJxezMhvaWhiUvXASS7/rsY449zoGGrXaYxTxdDQnq/T6Bs9vOeDe3pU8ZV5GYfWbbfi88G8NN2ia+h4WztrpLfVlg9WmLZY5npxR0cvubL/Sd/rf+WoD9ct0f+y7o6jHNxRK2iMN6rdp0E5mthiTdmomF20wPTLQOr/ReXgKd8ofU3bRSvuv+FGMk+3cUiU9sdxdFszj6ZxRL6/abKjjk7NDazXSNjWo31Y2tp1Epb+VCKx4bCx1q8bBWtjSNieRD2a1/GMPe9a2sXDSf/5lvxyN932Hy2Hhc8mMo1udp1EYxTJrhtF6eda69eNQvJ2bsV6nUQ7d3Pr1xk5P1TGi/h1EvX8miVXGdEaE3K5k/0NgV6FLflVJsZJVQjk60bAmuoqf2jhV4EP48e7zw/Pb/5B4tWlnh/uPj3erx+/vjx9vvj0x3+/xyfxDxbfn799vv/y8nzvSuf/shhf3o+D1dvxZ9gP4+9n/uN4j78VMf9xHC6890e+bu3Dqw/mfw==",
      "brillig_names": [
        "set_guardian4"
      ]
    },
    {
      "name": "set_guardian5",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "guardian",
            "type": {
              "kind": "struct",
              "path": "structs::Guardian",
              "fields": [
                {
                  "name": "address",
                  "type": {
                    "kind": "struct",
                    "path": "structs::Guardian_PK",
                    "fields": [
                      {
                        "name": "value0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "index",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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HBsAHAodHAAcCh4dABwKHx4AHAogHwAcCiEgABwKIiEAHAojIgAcCiQjABwKJSQAHAomJQAcCicmABwKKCcAHAopKAAcCiopABwKKyoAHAosKwAcCi0sABwKLi0AHAovLgAcCjAvABwKMTAAHAoyMQAcCjMyABwKNDMAHAo1NAAcCjY1ABwKNzYAHAo4NwAcCjk4ABwKOjkAHAo7OgAcCjw7ABwKPTwAHAo+PQAcCj8+ABwKQD8AHApBQAAcCkJBABwKQ0IAHApEQwAcCkVEABwKRkUAHApHRgAcCkhHABwKSUgAHApKSQAcCktKABwKTEsAHApNTAAcCk5NABwKT04AHApQTwAcClFQABwKUlEAHApTUgAcClRTAC0IAVQnAlgEVQAIAVgBJwNUBAEAIlQCWC0KWFktDlVZACJZAlktDgFZACJZAlktDgJZACJZAlktDgNZACJZAlktDgRZACJZAlktDgVZACJZAlktDgZZACJZAlktDgdZACJZAlktDghZACJZAlktDglZACJZAlktDgpZACJZAlktDgtZACJZAlktDgxZACJZAlktDg1ZACJZAlktDg5ZACJZAlktDg9ZACJZAlktDhBZACJZAlktDhFZACJZAlktDhJZACJZAlktDhNZACJZAlktDhRZACJZAlktDhVZACJZAlktDhZZACJZAlktDhdZACJZAlktDhhZACJZAlktDhlZACJZAlktDhpZACJZAlktDhtZACJZAlktDhxZACJZAlktDh1ZACJZAlktDh5ZACJZAlktDh9ZACJZAlktDiBZACJZAlktDiFZACJZAlktDiJZACJZAlktDiNZACJZAlktDiRZACJZAlktDiVZACJZAlktDiZZACJZAlktDidZACJZAlktDihZACJZAlktDilZACJZAlktDipZACJZAlktDitZACJZAlktDixZACJZAlktDi1ZACJZAlktDi5ZACJZAlktDi9ZACJZAlktDjBZACJZAlktDjFZACJZAlktDjJZACJZAlktDjNZACJZAlktDjRZACJZAlktDjVZACJZAlktDjZZACJZAlktDjdZACJZAlktDjhZACJZAlktDjlZACJZAlktDjpZACJZAlktDjtZACJZAlktDjxZACJZAlktDj1ZACJZAlktDj5ZACJZAlktDj9ZACJZAlktDkBZACJZAlktDkFZACJZAlktDkJZACJZAlktDkNZACJZAlktDkRZACJZAlktDkVZACJZAlktDkZZACJZAlktDkdZACJZAlktDkhZACJZAlktDklZACJZAlktDkpZACJZAlktDktZACJZAlktDkxZACJZAlktDk1ZACJZAlktDk5ZACJZAlktDk9ZACJZAlktDlBZACJZAlktDlFZACJZAlktDlJZACJZAlktDlNZJwIBBFQuCIBFAFYjAAALPgwqVgECJAIAAgAAC1EjAAALUCYcClYCAAAqVwIDACJUAgQAKgRWBS0LBQIwCgACAAMBIgBWgEcAAi0KAlYjAAALPigAgAQEeAANAAAAgASAAyQAgAMAAAuoKgEAAQX3ofOvpa3UyjwEAgEmKgEAAQW+Hj//PqT2+jwEAgEmJQAAC4AtCwQGCyIABoBEAAckAgAHAAAL3ScCCAQAPAYIAS0LAwYLIgAGgEMAByQCAAcAAAxwIwAAC/YtCwMGLQsBBy0LAggtCwQJDSIABoBDAAokAgAKAAAMGyUAAA4ELgIAB4ADKACABAQABCUAAA4WLgiABQAKACIKAgsAKgsGDC0OBQwBIgAGgEcABQ4qBgUHJAIABwAADFslAAAOpC0OCgEtDggCLQ4FAy0OCQQjAAAM3icCBgQHLQgABy0KAQgtCgIJLQoDCi0KBAsACAAGACUAAAzfLQIAAC0LAQYtCwIHLQsECC4CAAaAAygAgAQEAAQlAAAOFi4IgAUACQEiAAmARwAKLQ4FCi0OCQEtDgcCLgyARwADLQ4IBCMAAAzeJiUAAAuALgiARQAFIwAADO8NIgAFgEMABiQCAAYAAA1fIwAADQQtCwIFLQsFBgAiBgIGLQ4GBScCBgQELQgBBycCCAQFAAgBCAEnAwcEAQAiBQIIJwIJBAQAIgcCCj8PAAgACi0LAQUtCwMGLQsECC0OBQEtDgcCLQ4GAy0OCAQmLQsDBgwqBQYHJAIABwAADXUjAAAN4S0LAgYAIgYCCAAqCAUJLQsJBy0LAQgAIggCCgAqCgULLQsLCQAqBwkKLQsDBy0LBAkuAgAGgAMoAIAEBAAFJQAADhYuCIAFAAsAIgsCDAAqDAUNLQ4KDS0OCAEtDgsCLQ4HAy0OCQQjAAAN4QEiAAWARwAGLQoGBSMAAAzvKgEAAQUC3G4ngHYSnTwEAgEmKgEAAQXFa8RaDhAAAjwEAgEmLgGAA4AGCwCABgACgAckAIAHAAAOMSMAAA48LgCAA4AFIwAADqMuAAABgAUBAAABgAQAAQEAgAOABIAJLgCAA4AKLgCABYALCwCACoAJgAwkAIAMAAAOjy4BgAqACC4EgAiACwEAgAoAAoAKAQCACwACgAsjAAAOXigBgAUEAAEDAIAGAAKABiMAAA6jJioBAAEFRafKcRlB5BU8BAIBJg==",
      "debug_symbols": "tZrdThw5E4bvZY45aP9WVW4liiKSkBUSIhEbPulTxL2vy+N6BiJ1a3eyewIPNfRbftuusrvh5+nL3afnPz7eP3799ufp3fufp09P9w8P9398fPj2+fbH/bfHEf152vxLypud3tWbAame3smEEUmbU5ZByam0oDquS23SiOX5e22DKmRBnVgnJsREgzRDEmQJ6ovK5tl8LCUnqAUVPi3EKrF6iVlQK5AG9QxJkJBNepD63bBJFbIgK5AsqluGelDaoBbk3hYRK/xe8RFkp5ogYnM+zlQhDZrezsQVwhXSgpSYouLezuTeFsmitiWoQXFFSwWKsbRMzNda9oXYiqu0SRZUJahlyEffnXqCGmRBUiAJUq5QVIyYoWKh0rcChUpPCWoQV8w16RXVS4HGtcVXca85yGdrkQb1cUWZKl2DhJgQU2JKzIhZxGQrELFELBHLxDKxQqwQq8QqsUasEcOH4EPwIfgQfAg+BB+CD8WH4kPxofhQfCg+FB+KD8WH4kPxofhQfCg+FB+KD8WH4kPxofgwfBg+DB+GD8OH4cPwYfgwfBg+DB+GD8OH4cPwYfgwfBg+DB8WPvIWPgYRS8QSsUwsEyvECrFKrBJrxBqxTqwTE2JCbPqQSRJkGYpY2jJEzKt7UQvKG1QhCyoF0qCKckW5oew97Ewd5U62jrKQTVDGW8JbwluyUM5bgkI5pw2qUGTLuUCRLZcMRbZcUa5kayg3sjWUO9k6ykI2QVnJpigb2SyU51lgUYUiW0kFimwlZyiylZKgyDbPDIvIVlFuZGsod7J1lIVsgrKSTVE2shnKFtnqVqDIVlOGIts8MyyKbPPMsKhBKNcKodzI1lDuZOsoC9kEZSWboqxkM5QtsjUqr1F5jcprKbI1Kq/lBoVyKxVCuRYI5UY2Km+eHhahLGSj8pqQjcprSjYqr9FVOpXXt8jWqbxOV+lUXqerdCqv01U6ldfpKp3K63SVTuV1ukqn8jpdpVN5na7SqbxOV+lUXqerCJUndBWh8oSuIlSe0FWEyhO6ilB5QlcRKk/oKkLlCV1FqDyhqwiVJ3QVofKEriJUntBVhMpTuopSeUpXUSpP6SpK5SldRak8pasolad0FaXylK5yPluYk6+rOk6H2bxmaprksezk/WARMe8HtU7yWLk5lblP1+Y0r+hOXluLNMhX3SIJ8pmp4uT9oOqkHuQ1s6hCGqT8nvGp3+c6vJXka+hMc1RnkiBfOYs0qBDz8bXNydfLmXy9LNIgXyWLuMJ72CKu9c7V0iQL8s61SBbNfXVRg+KKua8uIpYLhEpBxVdJy05+nxdpkK+NRRY0fUxyH/OeZvexyII0YsU7a/N1ULzyWp3Ug3x1LmqQrfUy97xFsYbmnreImBATYkpMiRl6FrH5dLyoB3nHXFQhrpj3tEzyuzFjc/RnsuVjPgkvIjZXxJn8Wl/j1fvGImLeN5pM6kHeNxaFcts2SIJShjQoF4gY89GYj8Z8tEqOuQ7qy8vNKd7mfPzxdHfnL3Nevd4ZL32+3z7dPf44vXt8fni4Of3v9uF5/tKf328f5/cft0/j07Hi7x6/jO9D8Ov9w53Ty83l6m3/0vG+pNd1+XhPYobEOES/EUkHIps//p81tppfSdQ3EnlfYhwwZEmMWelIyFsnZV9hPAbGfRh9eVfh0IZZ2EjJdm2037bR/1sbTZkN3Z8NPZBo0kKil7Q3CNtXsLbFIKy19Js2xlvMXRtHi3s8/Xc0VASR9ssw8lGFXApkNK/LOOSX+jhYm+ONQ0iYojD641uFuq/gzzxLYjzgtItGq39/FNyM8QS/P4qDxTkOWiExTlrlojH03mjIvkZpYaSmy/Ie2+pbhYPVOTbjFEbGZr2vcbA+x2PHkmhlu06BSh8PAdf5GMdB5vTVjPwjDUlMqhw4yeW/1RjvODc6huh1GuOtYmiI5es0bKOHWz64p0cVX5mX8dK671Z8PpiXLlt0DRlPaxeN9Lba8sEKkx7LXF7d0dFLrux/tu31v3LUh+uW6H9ZdsdRDu6oFjTGE9XublCOJrZoFw4qqq9aYPplIPVfUTnY5TulL2l71YrtH7hpmd1tvCRK++M4uq2ZrWm8It8/NOlRR6fmBtZrJHSzWGSatn6dhKbflUgcOHQ8dV43CtbGkNA9iXo0r2OPvZxa+qvNSf7+kfz1abrvby2Hhc8hMo1udp1Ez5fWcd0oil1qza4bRcvbpRXLdRL90s3VrjNy2VTGg/h1EvXymNWuMiI1JkRqv0bAauNIfpWJ8aYqBPJ1I2BNmbTftPCrwIfx4+3n+6c3/yDx4lJP97efHu7Wj1+fHz+/+vTH/7/HJ/EPFt+fvn2++/L8dOdKl/+yGF/ejxerN+PPsB/G38/8x/Ecf9Oa+o/j5cJ73/Jl6x9efDB/AQ==",
      "brillig_names": [
        "set_guardian5"
      ]
    },
    {
      "name": "set_guardian6",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "guardian",
            "type": {
              "kind": "struct",
              "path": "structs::Guardian",
              "fields": [
                {
                  "name": "address",
                  "type": {
                    "kind": "struct",
                    "path": "structs::Guardian_PK",
                    "fields": [
                      {
                        "name": "value0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "index",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBICdJwAABAMnAlYEVScCVwQAHwoAVgBXgEgdAIBIgEgCHQCASYBJAh0AgEqASgIdAIBLgEsCHQCATIBMAh0AgE2ATQIdAIBOgE4CHQCAT4BPAh0AgFCAUAIdAIBRgFECHQCAUoBSAh0AgFOAUwIdAIBUgFQCHQCAVYBVAh0AgFaAVgIdAIBXgFcCHQCAWIBYAh0AgFmAWQIdAIBagFoCHQCAW4BbAh0AgFyAXAIdAIBdgF0CHQCAXoBeAh0AgF+AXwIdAIBggGACHQCAYYBhAh0AgGKAYgIdAIBjgGMCHQCAZIBkAh0AgGWAZQIdAIBmgGYCHQCAZ4BnAh0AgGiAaAIdAIBpgGkCHQCAaoBqAh0AgGuAawIdAIBsgGwCHQCAbYBtAh0AgG6AbgIdAIBvgG8CHQCAcIBwAh0AgHGAcQIdAIBygHICHQCAc4BzAh0AgHSAdAIdAIB1gHUCHQCAdoB2Ah0AgHeAdwIdAIB4gHgCHQCAeYB5Ah0AgHqAegIdAIB7gHsCHQCAfIB8Ah0AgH2AfQIdAIB+gH4CHQCAf4B/Ah0AgICAgAIdAICBgIECHQCAgoCCAh0AgIOAgwIdAICEgIQCHQCAhYCFAh0AgIaAhgIdAICHgIcCHQCAiICIAh0AgImAiQIdAICKgIoCHQCAi4CLAh0AgIyAjAIdAICNgI0CHQCAjoCOAh0AgI+AjwIdAICQgJACHQCAkYCRAh0AgJKAkgIdAICTgJMCHQCAlICUAh0AgJWAlQIdAICWgJYCHQCAl4CXAh0AgJiAmAIdAICZgJkCHQCAmoCaAh0AgJuAmwIdAICcgJwELgiASAABLgiASQACLgiASgADLgiASwAELgiATAAFLgiATQAGLgiATgAHLgiATwAILgiAUAAJLgiAUQAKLgiAUgALLgiAUwAMLgiAVAANLgiAVQAOLgiAVgAPLgiAVwAQLgiAWAARLgiAWQASLgiAWgATLgiAWwAULgiAXAAVLgiAXQAWLgiAXgAXLgiAXwAYLgiAYAAZLgiAYQAaLgiAYgAbLgiAYwAcLgiAZAAdLgiAZQAeLgiAZgAfLgiAZwAgLgiAaAAhLgiAaQAiLgiAagAjLgiAawAkLgiAbAAlLgiAbQAmLgiAbgAnLgiAbwAoLgiAcAApLgiAcQAqLgiAcgArLgiAcwAsLgiAdAAtLgiAdQAuLgiAdgAvLgiAdwAwLgiAeAAxLgiAeQAyLgiAegAzLgiAewA0LgiAfAA1LgiAfQA2LgiAfgA3LgiAfwA4LgiAgAA5LgiAgQA6LgiAggA7LgiAgwA8LgiAhAA9LgiAhQA+LgiAhgA/LgiAhwBALgiAiABBLgiAiQBCLgiAigBDLgiAiwBELgiAjABFLgiAjQBGLgiAjgBHLgiAjwBILgiAkABJLgiAkQBKLgiAkgBLLgiAkwBMLgiAlABNLgiAlQBOLgiAlgBPLgiAlwBQLgiAmABRLgiAmQBSLgiAmgBTLgiAmwBULgiAnABVJQAABJAlAAAEtCgCAAEEgJ0nAgIEADsOAAIAASgAgEMEAAMoAIBEAQAAKACARQQAACgAgEYBAAEoAIBHBAABJiUAAAuAHgIAVwAeAgBYADMqAFcAWABZJAIAWQAABNglAAALqRwKVVcAJwJVAAAtCAFYJwJZBAQACAFZAScDWAQBACJYAlktCllaLQ5VWgAiWgJaLQ5VWgAiWgJaLQ5VWisCAFkAAAAAAAAAAAIAAAAAAAAAAC0IAVonAlsEBQAIAVsBJwNaBAEAIloCWy0KW1wtDlVcACJcAlwtDlVcACJcAlwtDlVcACJcAlwtDllcLQgBWQAAAQIBLQ5YWS0IAVgAAAECAS0OWlgtCAFaAAABAgEuDIBFAFotCAFbAAABAgEuDIBEAFsnAlwADycCXQReLQgAXi0KWV8tClhgLQpaYS0KW2ItClxjAAgAXQAlAAALuy0CAAAnAlwEXS0IAF0tClleLQpYXy0KWmAtClthLQpXYgAIAFwAJQAAC7stAgAALQtbVwsiAFeARABcJAIAXAAABhQnAl0EADwGXQEnAlcEXC0IAFwtClldLQpYXi0KWl8tCltgAAgAVwAlAAAM3y0CAAAtC1lXLQtYXC0LWl0tDldZLQ5cWC0OXVouDIBGAFsBIgBcgEcAWC0LWFcKKldVWAsiAFiARABVJAIAVQAABn8lAAAN8hwKAVUAHAoCAQAcCgMCABwKBAMAHAoFBAAcCgYFABwKBwYAHAoIBwAcCgkIABwKCgkAHAoLCgAcCgwLABwKDQwAHAoODQAcCg8OABwKEA8AHAoREAAcChIRABwKExIAHAoUEwAcChUUABwKFhUAHAoXFgAcChgXABwKGRgAHAoaGQAcChsaABwKHBsAHAodHAAcCh4dABwKHx4AHAogHwAcCiEgABwKIiEAHAojIgAcCiQjABwKJSQAHAomJQAcCicmABwKKCcAHAopKAAcCiopABwKKyoAHAosKwAcCi0sABwKLi0AHAovLgAcCjAvABwKMTAAHAoyMQAcCjMyABwKNDMAHAo1NAAcCjY1ABwKNzYAHAo4NwAcCjk4ABwKOjkAHAo7OgAcCjw7ABwKPTwAHAo+PQAcCj8+ABwKQD8AHApBQAAcCkJBABwKQ0IAHApEQwAcCkVEABwKRkUAHApHRgAcCkhHABwKSUgAHApKSQAcCktKABwKTEsAHApNTAAcCk5NABwKT04AHApQTwAcClFQABwKUlEAHApTUgAcClRTAC0IAVQnAlgEVQAIAVgBJwNUBAEAIlQCWC0KWFktDlVZACJZAlktDgFZACJZAlktDgJZACJZAlktDgNZACJZAlktDgRZACJZAlktDgVZACJZAlktDgZZACJZAlktDgdZACJZAlktDghZACJZAlktDglZACJZAlktDgpZACJZAlktDgtZACJZAlktDgxZACJZAlktDg1ZACJZAlktDg5ZACJZAlktDg9ZACJZAlktDhBZACJZAlktDhFZACJZAlktDhJZACJZAlktDhNZACJZAlktDhRZACJZAlktDhVZACJZAlktDhZZACJZAlktDhdZACJZAlktDhhZACJZAlktDhlZACJZAlktDhpZACJZAlktDhtZACJZAlktDhxZACJZAlktDh1ZACJZAlktDh5ZACJZAlktDh9ZACJZAlktDiBZACJZAlktDiFZACJZAlktDiJZACJZAlktDiNZACJZAlktDiRZACJZAlktDiVZACJZAlktDiZZACJZAlktDidZACJZAlktDihZACJZAlktDilZACJZAlktDipZACJZAlktDitZACJZAlktDixZACJZAlktDi1ZACJZAlktDi5ZACJZAlktDi9ZACJZAlktDjBZACJZAlktDjFZACJZAlktDjJZACJZAlktDjNZACJZAlktDjRZACJZAlktDjVZACJZAlktDjZZACJZAlktDjdZACJZAlktDjhZACJZAlktDjlZACJZAlktDjpZACJZAlktDjtZACJZAlktDjxZACJZAlktDj1ZACJZAlktDj5ZACJZAlktDj9ZACJZAlktDkBZACJZAlktDkFZACJZAlktDkJZACJZAlktDkNZACJZAlktDkRZACJZAlktDkVZACJZAlktDkZZACJZAlktDkdZACJZAlktDkhZACJZAlktDklZACJZAlktDkpZACJZAlktDktZACJZAlktDkxZACJZAlktDk1ZACJZAlktDk5ZACJZAlktDk9ZACJZAlktDlBZACJZAlktDlFZACJZAlktDlJZACJZAlktDlNZJwIBBFQuCIBFAFYjAAALPgwqVgECJAIAAgAAC1EjAAALUCYcClYCAAAqVwIDACJUAgQAKgRWBS0LBQIwCgACAAMBIgBWgEcAAi0KAlYjAAALPigAgAQEeAANAAAAgASAAyQAgAMAAAuoKgEAAQX3ofOvpa3UyjwEAgEmKgEAAQW+Hj//PqT2+jwEAgEmJQAAC4AtCwQGCyIABoBEAAckAgAHAAAL3ScCCAQAPAYIAS0LAwYLIgAGgEMAByQCAAcAAAxwIwAAC/YtCwMGLQsBBy0LAggtCwQJDSIABoBDAAokAgAKAAAMGyUAAA4ELgIAB4ADKACABAQABCUAAA4WLgiABQAKACIKAgsAKgsGDC0OBQwBIgAGgEcABQ4qBgUHJAIABwAADFslAAAOpC0OCgEtDggCLQ4FAy0OCQQjAAAM3icCBgQHLQgABy0KAQgtCgIJLQoDCi0KBAsACAAGACUAAAzfLQIAAC0LAQYtCwIHLQsECC4CAAaAAygAgAQEAAQlAAAOFi4IgAUACQEiAAmARwAKLQ4FCi0OCQEtDgcCLgyARwADLQ4IBCMAAAzeJiUAAAuALgiARQAFIwAADO8NIgAFgEMABiQCAAYAAA1fIwAADQQtCwIFLQsFBgAiBgIGLQ4GBScCBgQELQgBBycCCAQFAAgBCAEnAwcEAQAiBQIIJwIJBAQAIgcCCj8PAAgACi0LAQUtCwMGLQsECC0OBQEtDgcCLQ4GAy0OCAQmLQsDBgwqBQYHJAIABwAADXUjAAAN4S0LAgYAIgYCCAAqCAUJLQsJBy0LAQgAIggCCgAqCgULLQsLCQAqBwkKLQsDBy0LBAkuAgAGgAMoAIAEBAAFJQAADhYuCIAFAAsAIgsCDAAqDAUNLQ4KDS0OCAEtDgsCLQ4HAy0OCQQjAAAN4QEiAAWARwAGLQoGBSMAAAzvKgEAAQUC3G4ngHYSnTwEAgEmKgEAAQXFa8RaDhAAAjwEAgEmLgGAA4AGCwCABgACgAckAIAHAAAOMSMAAA48LgCAA4AFIwAADqMuAAABgAUBAAABgAQAAQEAgAOABIAJLgCAA4AKLgCABYALCwCACoAJgAwkAIAMAAAOjy4BgAqACC4EgAiACwEAgAoAAoAKAQCACwACgAsjAAAOXigBgAUEAAEDAIAGAAKABiMAAA6jJioBAAEFRafKcRlB5BU8BAIBJg==",
      "debug_symbols": "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",
      "brillig_names": [
        "set_guardian6"
      ]
    },
    {
      "name": "set_guardian7",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "guardian",
            "type": {
              "kind": "struct",
              "path": "structs::Guardian",
              "fields": [
                {
                  "name": "address",
                  "type": {
                    "kind": "struct",
                    "path": "structs::Guardian_PK",
                    "fields": [
                      {
                        "name": "value0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "index",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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HBsAHAodHAAcCh4dABwKHx4AHAogHwAcCiEgABwKIiEAHAojIgAcCiQjABwKJSQAHAomJQAcCicmABwKKCcAHAopKAAcCiopABwKKyoAHAosKwAcCi0sABwKLi0AHAovLgAcCjAvABwKMTAAHAoyMQAcCjMyABwKNDMAHAo1NAAcCjY1ABwKNzYAHAo4NwAcCjk4ABwKOjkAHAo7OgAcCjw7ABwKPTwAHAo+PQAcCj8+ABwKQD8AHApBQAAcCkJBABwKQ0IAHApEQwAcCkVEABwKRkUAHApHRgAcCkhHABwKSUgAHApKSQAcCktKABwKTEsAHApNTAAcCk5NABwKT04AHApQTwAcClFQABwKUlEAHApTUgAcClRTAC0IAVQnAlgEVQAIAVgBJwNUBAEAIlQCWC0KWFktDlVZACJZAlktDgFZACJZAlktDgJZACJZAlktDgNZACJZAlktDgRZACJZAlktDgVZACJZAlktDgZZACJZAlktDgdZACJZAlktDghZACJZAlktDglZACJZAlktDgpZACJZAlktDgtZACJZAlktDgxZACJZAlktDg1ZACJZAlktDg5ZACJZAlktDg9ZACJZAlktDhBZACJZAlktDhFZACJZAlktDhJZACJZAlktDhNZACJZAlktDhRZACJZAlktDhVZACJZAlktDhZZACJZAlktDhdZACJZAlktDhhZACJZAlktDhlZACJZAlktDhpZACJZAlktDhtZACJZAlktDhxZACJZAlktDh1ZACJZAlktDh5ZACJZAlktDh9ZACJZAlktDiBZACJZAlktDiFZACJZAlktDiJZACJZAlktDiNZACJZAlktDiRZACJZAlktDiVZACJZAlktDiZZACJZAlktDidZACJZAlktDihZACJZAlktDilZACJZAlktDipZACJZAlktDitZACJZAlktDixZACJZAlktDi1ZACJZAlktDi5ZACJZAlktDi9ZACJZAlktDjBZACJZAlktDjFZACJZAlktDjJZACJZAlktDjNZACJZAlktDjRZACJZAlktDjVZACJZAlktDjZZACJZAlktDjdZACJZAlktDjhZACJZAlktDjlZACJZAlktDjpZACJZAlktDjtZACJZAlktDjxZACJZAlktDj1ZACJZAlktDj5ZACJZAlktDj9ZACJZAlktDkBZACJZAlktDkFZACJZAlktDkJZACJZAlktDkNZACJZAlktDkRZACJZAlktDkVZACJZAlktDkZZACJZAlktDkdZACJZAlktDkhZACJZAlktDklZACJZAlktDkpZACJZAlktDktZACJZAlktDkxZACJZAlktDk1ZACJZAlktDk5ZACJZAlktDk9ZACJZAlktDlBZACJZAlktDlFZACJZAlktDlJZACJZAlktDlNZJwIBBFQuCIBFAFYjAAALPgwqVgECJAIAAgAAC1EjAAALUCYcClYCAAAqVwIDACJUAgQAKgRWBS0LBQIwCgACAAMBIgBWgEcAAi0KAlYjAAALPigAgAQEeAANAAAAgASAAyQAgAMAAAuoKgEAAQX3ofOvpa3UyjwEAgEmKgEAAQW+Hj//PqT2+jwEAgEmJQAAC4AtCwQGCyIABoBEAAckAgAHAAAL3ScCCAQAPAYIAS0LAwYLIgAGgEMAByQCAAcAAAxwIwAAC/YtCwMGLQsBBy0LAggtCwQJDSIABoBDAAokAgAKAAAMGyUAAA4ELgIAB4ADKACABAQABCUAAA4WLgiABQAKACIKAgsAKgsGDC0OBQwBIgAGgEcABQ4qBgUHJAIABwAADFslAAAOpC0OCgEtDggCLQ4FAy0OCQQjAAAM3icCBgQHLQgABy0KAQgtCgIJLQoDCi0KBAsACAAGACUAAAzfLQIAAC0LAQYtCwIHLQsECC4CAAaAAygAgAQEAAQlAAAOFi4IgAUACQEiAAmARwAKLQ4FCi0OCQEtDgcCLgyARwADLQ4IBCMAAAzeJiUAAAuALgiARQAFIwAADO8NIgAFgEMABiQCAAYAAA1fIwAADQQtCwIFLQsFBgAiBgIGLQ4GBScCBgQELQgBBycCCAQFAAgBCAEnAwcEAQAiBQIIJwIJBAQAIgcCCj8PAAgACi0LAQUtCwMGLQsECC0OBQEtDgcCLQ4GAy0OCAQmLQsDBgwqBQYHJAIABwAADXUjAAAN4S0LAgYAIgYCCAAqCAUJLQsJBy0LAQgAIggCCgAqCgULLQsLCQAqBwkKLQsDBy0LBAkuAgAGgAMoAIAEBAAFJQAADhYuCIAFAAsAIgsCDAAqDAUNLQ4KDS0OCAEtDgsCLQ4HAy0OCQQjAAAN4QEiAAWARwAGLQoGBSMAAAzvKgEAAQUC3G4ngHYSnTwEAgEmKgEAAQXFa8RaDhAAAjwEAgEmLgGAA4AGCwCABgACgAckAIAHAAAOMSMAAA48LgCAA4AFIwAADqMuAAABgAUBAAABgAQAAQEAgAOABIAJLgCAA4AKLgCABYALCwCACoAJgAwkAIAMAAAOjy4BgAqACC4EgAiACwEAgAoAAoAKAQCACwACgAsjAAAOXigBgAUEAAEDAIAGAAKABiMAAA6jJioBAAEFRafKcRlB5BU8BAIBJg==",
      "debug_symbols": "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",
      "brillig_names": [
        "set_guardian7"
      ]
    },
    {
      "name": "set_guardian8",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "guardian",
            "type": {
              "kind": "struct",
              "path": "structs::Guardian",
              "fields": [
                {
                  "name": "address",
                  "type": {
                    "kind": "struct",
                    "path": "structs::Guardian_PK",
                    "fields": [
                      {
                        "name": "value0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "index",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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HBsAHAodHAAcCh4dABwKHx4AHAogHwAcCiEgABwKIiEAHAojIgAcCiQjABwKJSQAHAomJQAcCicmABwKKCcAHAopKAAcCiopABwKKyoAHAosKwAcCi0sABwKLi0AHAovLgAcCjAvABwKMTAAHAoyMQAcCjMyABwKNDMAHAo1NAAcCjY1ABwKNzYAHAo4NwAcCjk4ABwKOjkAHAo7OgAcCjw7ABwKPTwAHAo+PQAcCj8+ABwKQD8AHApBQAAcCkJBABwKQ0IAHApEQwAcCkVEABwKRkUAHApHRgAcCkhHABwKSUgAHApKSQAcCktKABwKTEsAHApNTAAcCk5NABwKT04AHApQTwAcClFQABwKUlEAHApTUgAcClRTAC0IAVQnAlgEVQAIAVgBJwNUBAEAIlQCWC0KWFktDlVZACJZAlktDgFZACJZAlktDgJZACJZAlktDgNZACJZAlktDgRZACJZAlktDgVZACJZAlktDgZZACJZAlktDgdZACJZAlktDghZACJZAlktDglZACJZAlktDgpZACJZAlktDgtZACJZAlktDgxZACJZAlktDg1ZACJZAlktDg5ZACJZAlktDg9ZACJZAlktDhBZACJZAlktDhFZACJZAlktDhJZACJZAlktDhNZACJZAlktDhRZACJZAlktDhVZACJZAlktDhZZACJZAlktDhdZACJZAlktDhhZACJZAlktDhlZACJZAlktDhpZACJZAlktDhtZACJZAlktDhxZACJZAlktDh1ZACJZAlktDh5ZACJZAlktDh9ZACJZAlktDiBZACJZAlktDiFZACJZAlktDiJZACJZAlktDiNZACJZAlktDiRZACJZAlktDiVZACJZAlktDiZZACJZAlktDidZACJZAlktDihZACJZAlktDilZACJZAlktDipZACJZAlktDitZACJZAlktDixZACJZAlktDi1ZACJZAlktDi5ZACJZAlktDi9ZACJZAlktDjBZACJZAlktDjFZACJZAlktDjJZACJZAlktDjNZACJZAlktDjRZACJZAlktDjVZACJZAlktDjZZACJZAlktDjdZACJZAlktDjhZACJZAlktDjlZACJZAlktDjpZACJZAlktDjtZACJZAlktDjxZACJZAlktDj1ZACJZAlktDj5ZACJZAlktDj9ZACJZAlktDkBZACJZAlktDkFZACJZAlktDkJZACJZAlktDkNZACJZAlktDkRZACJZAlktDkVZACJZAlktDkZZACJZAlktDkdZACJZAlktDkhZACJZAlktDklZACJZAlktDkpZACJZAlktDktZACJZAlktDkxZACJZAlktDk1ZACJZAlktDk5ZACJZAlktDk9ZACJZAlktDlBZACJZAlktDlFZACJZAlktDlJZACJZAlktDlNZJwIBBFQuCIBFAFYjAAALPgwqVgECJAIAAgAAC1EjAAALUCYcClYCAAAqVwIDACJUAgQAKgRWBS0LBQIwCgACAAMBIgBWgEcAAi0KAlYjAAALPigAgAQEeAANAAAAgASAAyQAgAMAAAuoKgEAAQX3ofOvpa3UyjwEAgEmKgEAAQW+Hj//PqT2+jwEAgEmJQAAC4AtCwQGCyIABoBEAAckAgAHAAAL3ScCCAQAPAYIAS0LAwYLIgAGgEMAByQCAAcAAAxwIwAAC/YtCwMGLQsBBy0LAggtCwQJDSIABoBDAAokAgAKAAAMGyUAAA4ELgIAB4ADKACABAQABCUAAA4WLgiABQAKACIKAgsAKgsGDC0OBQwBIgAGgEcABQ4qBgUHJAIABwAADFslAAAOpC0OCgEtDggCLQ4FAy0OCQQjAAAM3icCBgQHLQgABy0KAQgtCgIJLQoDCi0KBAsACAAGACUAAAzfLQIAAC0LAQYtCwIHLQsECC4CAAaAAygAgAQEAAQlAAAOFi4IgAUACQEiAAmARwAKLQ4FCi0OCQEtDgcCLgyARwADLQ4IBCMAAAzeJiUAAAuALgiARQAFIwAADO8NIgAFgEMABiQCAAYAAA1fIwAADQQtCwIFLQsFBgAiBgIGLQ4GBScCBgQELQgBBycCCAQFAAgBCAEnAwcEAQAiBQIIJwIJBAQAIgcCCj8PAAgACi0LAQUtCwMGLQsECC0OBQEtDgcCLQ4GAy0OCAQmLQsDBgwqBQYHJAIABwAADXUjAAAN4S0LAgYAIgYCCAAqCAUJLQsJBy0LAQgAIggCCgAqCgULLQsLCQAqBwkKLQsDBy0LBAkuAgAGgAMoAIAEBAAFJQAADhYuCIAFAAsAIgsCDAAqDAUNLQ4KDS0OCAEtDgsCLQ4HAy0OCQQjAAAN4QEiAAWARwAGLQoGBSMAAAzvKgEAAQUC3G4ngHYSnTwEAgEmKgEAAQXFa8RaDhAAAjwEAgEmLgGAA4AGCwCABgACgAckAIAHAAAOMSMAAA48LgCAA4AFIwAADqMuAAABgAUBAAABgAQAAQEAgAOABIAJLgCAA4AKLgCABYALCwCACoAJgAwkAIAMAAAOjy4BgAqACC4EgAiACwEAgAoAAoAKAQCACwACgAsjAAAOXigBgAUEAAEDAIAGAAKABiMAAA6jJioBAAEFRafKcRlB5BU8BAIBJg==",
      "debug_symbols": "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",
      "brillig_names": [
        "set_guardian8"
      ]
    },
    {
      "name": "set_guardian9",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "guardian",
            "type": {
              "kind": "struct",
              "path": "structs::Guardian",
              "fields": [
                {
                  "name": "address",
                  "type": {
                    "kind": "struct",
                    "path": "structs::Guardian_PK",
                    "fields": [
                      {
                        "name": "value0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "index",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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HBsAHAodHAAcCh4dABwKHx4AHAogHwAcCiEgABwKIiEAHAojIgAcCiQjABwKJSQAHAomJQAcCicmABwKKCcAHAopKAAcCiopABwKKyoAHAosKwAcCi0sABwKLi0AHAovLgAcCjAvABwKMTAAHAoyMQAcCjMyABwKNDMAHAo1NAAcCjY1ABwKNzYAHAo4NwAcCjk4ABwKOjkAHAo7OgAcCjw7ABwKPTwAHAo+PQAcCj8+ABwKQD8AHApBQAAcCkJBABwKQ0IAHApEQwAcCkVEABwKRkUAHApHRgAcCkhHABwKSUgAHApKSQAcCktKABwKTEsAHApNTAAcCk5NABwKT04AHApQTwAcClFQABwKUlEAHApTUgAcClRTAC0IAVQnAlgEVQAIAVgBJwNUBAEAIlQCWC0KWFktDlVZACJZAlktDgFZACJZAlktDgJZACJZAlktDgNZACJZAlktDgRZACJZAlktDgVZACJZAlktDgZZACJZAlktDgdZACJZAlktDghZACJZAlktDglZACJZAlktDgpZACJZAlktDgtZACJZAlktDgxZACJZAlktDg1ZACJZAlktDg5ZACJZAlktDg9ZACJZAlktDhBZACJZAlktDhFZACJZAlktDhJZACJZAlktDhNZACJZAlktDhRZACJZAlktDhVZACJZAlktDhZZACJZAlktDhdZACJZAlktDhhZACJZAlktDhlZACJZAlktDhpZACJZAlktDhtZACJZAlktDhxZACJZAlktDh1ZACJZAlktDh5ZACJZAlktDh9ZACJZAlktDiBZACJZAlktDiFZACJZAlktDiJZACJZAlktDiNZACJZAlktDiRZACJZAlktDiVZACJZAlktDiZZACJZAlktDidZACJZAlktDihZACJZAlktDilZACJZAlktDipZACJZAlktDitZACJZAlktDixZACJZAlktDi1ZACJZAlktDi5ZACJZAlktDi9ZACJZAlktDjBZACJZAlktDjFZACJZAlktDjJZACJZAlktDjNZACJZAlktDjRZACJZAlktDjVZACJZAlktDjZZACJZAlktDjdZACJZAlktDjhZACJZAlktDjlZACJZAlktDjpZACJZAlktDjtZACJZAlktDjxZACJZAlktDj1ZACJZAlktDj5ZACJZAlktDj9ZACJZAlktDkBZACJZAlktDkFZACJZAlktDkJZACJZAlktDkNZACJZAlktDkRZACJZAlktDkVZACJZAlktDkZZACJZAlktDkdZACJZAlktDkhZACJZAlktDklZACJZAlktDkpZACJZAlktDktZACJZAlktDkxZACJZAlktDk1ZACJZAlktDk5ZACJZAlktDk9ZACJZAlktDlBZACJZAlktDlFZACJZAlktDlJZACJZAlktDlNZJwIBBFQuCIBFAFYjAAALPgwqVgECJAIAAgAAC1EjAAALUCYcClYCAAAqVwIDACJUAgQAKgRWBS0LBQIwCgACAAMBIgBWgEcAAi0KAlYjAAALPigAgAQEeAANAAAAgASAAyQAgAMAAAuoKgEAAQX3ofOvpa3UyjwEAgEmKgEAAQW+Hj//PqT2+jwEAgEmJQAAC4AtCwQGCyIABoBEAAckAgAHAAAL3ScCCAQAPAYIAS0LAwYLIgAGgEMAByQCAAcAAAxwIwAAC/YtCwMGLQsBBy0LAggtCwQJDSIABoBDAAokAgAKAAAMGyUAAA4ELgIAB4ADKACABAQABCUAAA4WLgiABQAKACIKAgsAKgsGDC0OBQwBIgAGgEcABQ4qBgUHJAIABwAADFslAAAOpC0OCgEtDggCLQ4FAy0OCQQjAAAM3icCBgQHLQgABy0KAQgtCgIJLQoDCi0KBAsACAAGACUAAAzfLQIAAC0LAQYtCwIHLQsECC4CAAaAAygAgAQEAAQlAAAOFi4IgAUACQEiAAmARwAKLQ4FCi0OCQEtDgcCLgyARwADLQ4IBCMAAAzeJiUAAAuALgiARQAFIwAADO8NIgAFgEMABiQCAAYAAA1fIwAADQQtCwIFLQsFBgAiBgIGLQ4GBScCBgQELQgBBycCCAQFAAgBCAEnAwcEAQAiBQIIJwIJBAQAIgcCCj8PAAgACi0LAQUtCwMGLQsECC0OBQEtDgcCLQ4GAy0OCAQmLQsDBgwqBQYHJAIABwAADXUjAAAN4S0LAgYAIgYCCAAqCAUJLQsJBy0LAQgAIggCCgAqCgULLQsLCQAqBwkKLQsDBy0LBAkuAgAGgAMoAIAEBAAFJQAADhYuCIAFAAsAIgsCDAAqDAUNLQ4KDS0OCAEtDgsCLQ4HAy0OCQQjAAAN4QEiAAWARwAGLQoGBSMAAAzvKgEAAQUC3G4ngHYSnTwEAgEmKgEAAQXFa8RaDhAAAjwEAgEmLgGAA4AGCwCABgACgAckAIAHAAAOMSMAAA48LgCAA4AFIwAADqMuAAABgAUBAAABgAQAAQEAgAOABIAJLgCAA4AKLgCABYALCwCACoAJgAwkAIAMAAAOjy4BgAqACC4EgAiACwEAgAoAAoAKAQCACwACgAsjAAAOXigBgAUEAAEDAIAGAAKABiMAAA6jJioBAAEFRafKcRlB5BU8BAIBJg==",
      "debug_symbols": "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",
      "brillig_names": [
        "set_guardian9"
      ]
    },
    {
      "name": "set_provider",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "provider",
            "type": {
              "kind": "struct",
              "path": "structs::Provider",
              "fields": [
                {
                  "name": "chain_id",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 16
                  }
                },
                {
                  "name": "evm_chain_id",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 16
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBIBGJwAABAMnAgMEAicCBAQAHwoAAwAEgEQdAIBEgEQDHQCARYBFAy4IgEQAAS4IgEUAAiUAAABZJQAAAGEoAgABBIBGJwICBAA7DgACAAEoAIBDBAADJiUAAAJgHgIABAAeAgAFADMqAAQABQAGJwIEAQEkAgAGAAAAiiUAAAKJJwIEAAAtCAEFJwIGBAcACAEGAScDBQQBACIFAgYtCgYHLQ4EBwAiBwIHLQ4EBwAiBwIHLQ4EBwAiBwIHLQ4EBwAiBwIHLQ4EBwAiBwIHLQ4EBy0IAQQAAAECAS0OBQQnAgUEACcCBgQGJwIHAAEnAggEAS0KBQMjAAABBgwqAwYJJAIACQAAAhQjAAABGC0LBAkBIgAJgEMACi0LCgQcCgQLBRwKCwoAJwIEBAQAKgkEDC0LDAscCgsMBRwKDAQAJwILBAUAKgkLDS0LDQwcCgwNBhwKDQsAACoJBg0tCw0MHAoMDQUcCg0JABwKAQwAHAoCAQAtCAECJwINBAcACAENAScDAgQBACICAg0tCg0OLQ4MDgAiDgIOLQ4BDgAiDgIOLQ4KDgAiDgIOLQ4EDgAiDgIOLQ4LDgAiDgIOLQ4JDi0KBQMjAAAB1QwqAwYBJAIAAQAAAegjAAAB5yYcCgMBAAAqBwEEACICAgUAKgUDCS0LCQEwCgABAAQAKgMIAS0KAQMjAAAB1RwKAwkAACoHCQovCgAKAAktCwQKLgIACoADKACABAQAByUAAAKbLgiABQALACILAgwAKgwDDS0OCQ0tDgsEACoDCAktCgkDIwAAAQYoAIAEBHgADQAAAIAEgAMkAIADAAACiCoBAAEF96Hzr6Wt1Mo8BAIBJioBAAEFvh4//z6k9vo8BAIBJi4BgAOABgsAgAYAAoAHJACABwAAArYjAAACwS4AgAOABSMAAAMoLgAAAYAFAQAAAYAEAAEBAIADgASACS4AgAOACi4AgAWACwsAgAqACYAMJACADAAAAxQuAYAKgAguBIAIgAsBAIAKAAKACgEAgAsAAoALIwAAAuMoAYAFBAABAwCABgACgAYjAAADKCY=",
      "debug_symbols": "tZdRbtswDIbv4uc8iBIpkb3KUBRp6w4BgrRIkwFDkbuPdEQ7GSChTbeX+DMl/yIlUoo+hufx8fjzYbN7eX0f7n58DI/7zXa7+fmwfX1aHzavO7V+DMF+IMThDlf6LMNd0SfoOwSFqO0ABlQhJQdWIAVMDqUCRQe3ZLdktxRwoAocHNBBKogPIXXQGKJDFYwADrlCDA7oUAXj5E9WmAYtBtZHFCQ6qE7USFMAh3xuStNYE7jFxpr62ERNkEJtSlQB3YI6VowGUoHq6ImkQtaQIxpwhaKWFAy4ApvFxuJSwZw/Q7VgiA5uMefPQBXM+TOgg1RIyYEroAuiC5ILUq6Q7fOkwPaVOo+2gokMzKIzTyE5uMWyLrGBWXRRKJlFDHQs1JDJRsdooH1Qx6Ip2awzcYVMFUpwyBUYHNwi3kdsCcrptBq8QB4O+3G0+rioGK2jt/V+3B2Gu91xu10Nv9bb49Tp/W29m56H9V5b1dlx96xPFXzZbEej02r5OrQ/hUQZ6+eQssgsoQV6JQIdkWCJddYIGC8k8EoitiWQpVQJlJBniXIdSWorMCafB0ZsKnTDEPEwAKQZBn07jPx/wyCeV4Pbq8EdCSrkEjlBywlpK4iWWlUQIvhmGBDbYfSSGyPMGhjTMpv0lxudzATAeS6gLCUGnK81OrlZGLxACqfUnA3sSCCDS+DFqn5FYlkTRblNQtIsIW2J7lyEZS6QmxKd9NQTOXskygVnET0kP62CHHxhkRM3NWI3w4IsCUaLBsnnNfKye+YkN2l8Opb0/Vj6BUcXGoVbBRep6wdcaDQLLvZ20TRrsP6DaiVZLL2TkXOZT0Zmak8q/xOV3m4a/IwWKO0E6UZDcd4Kkwi0/ehNa5z/LHDk9ind2U6LlHkHkYvK/YIEB8nuBYR8m8S8m94sAfNuynCxKl/yYs4NlWhuham3rkB5OSbzjbt6Tl61JeONEhG/LQHzCZcptCQQ+mf18hcO5fqYvNe39dNmf3UrPZnafrN+3I719eW4e7poPfx+8xa/1b7tX5/G5+N+NKXlaqs/P0DvJHonvbcLrr3q1g6x2CtMr7yCFO5P5swf",
      "brillig_names": [
        "set_provider"
      ]
    },
    {
      "name": "sync_private_state",
      "is_unconstrained": true,
      "custom_attributes": [
        "utility"
      ],
      "abi": {
        "parameters": [],
        "return_type": null,
        "error_types": {
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3095323350861740601": {
            "error_kind": "fmtstring",
            "length": 132,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "11418088424205762236": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": []
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "sync_private_state"
      ]
    },
    {
      "name": "verify_vaa",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs",
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::call_context::CallContext",
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::block_header::BlockHeader",
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::content_commitment::ContentCommitment",
                          "fields": [
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::state_reference::StateReference",
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::partial_state_reference::PartialStateReference",
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::global_variables::GlobalVariables",
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::transaction::tx_context::TxContext",
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::gas_settings::GasSettings",
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "bytes",
            "type": {
              "kind": "array",
              "length": 2000,
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              }
            },
            "visibility": "private"
          },
          {
            "name": "actual_length",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::call_context::CallContext",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ]
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "include_by_timestamp",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::include_by_timestamp::IncludeByTimestamp",
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "kind": "struct",
                        "path": "std::option::Option",
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest",
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint",
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::note_hash::NoteHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::nullifier::Nullifier",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::private_call_request::PrivateCallRequest",
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::call_context::CallContext",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "calldata_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "calldata_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message",
                          "fields": [
                            {
                              "name": "recipient",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "content",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::private_log::PrivateLogData",
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::log::Log",
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            },
                            {
                              "name": "length",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::log_hash::LogHash",
                          "fields": [
                            {
                              "name": "value",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "length",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::block_header::BlockHeader",
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::content_commitment::ContentCommitment",
                        "fields": [
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::state_reference::StateReference",
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::partial_state_reference::PartialStateReference",
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::global_variables::GlobalVariables",
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::address::eth_address::EthAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::transaction::tx_context::TxContext",
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::gas_settings::GasSettings",
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "visibility": "databus"
        },
        "error_types": {
          "211358376073803959": {
            "error_kind": "string",
            "string": "Need at least 1 signature"
          },
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3095323350861740601": {
            "error_kind": "fmtstring",
            "length": 132,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "3163564695355654215": {
            "error_kind": "string",
            "string": "Insufficient valid signatures"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "4790011804579310016": {
            "error_kind": "string",
            "string": "VM version incompatible"
          },
          "5003515106221862139": {
            "error_kind": "string",
            "string": "Too many signatures"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "11418088424205762236": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": []
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14656550611213696286": {
            "error_kind": "string",
            "string": "guardian index out of bounds"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "discover_new_messages",
        "verify_vaa_unconstrained",
        "directive_integer_quotient",
        "directive_invert"
      ],
      "verification_key": "AAAAAAAQAAAAAAAAAAAAFAAAAAAAAAAQAAAAAAAAVgkAAAAA//////////8AL3051iGPKZ0NBMKp\nGA/rvVgwFdl+g6JAW8DJozxv46Yq10sdh7SOGBu3UvX4JaP+hFxU1abj0oeYf8UooTKgFgJYREcf\nphL26InhdTjcE2sRouRC2xJ0Xa91aD+oTiRIEu76to/92KdlyS0C2ZhKJ2giECqcOaSvHciMKtsw\nugoPy+3py8YjamwqXQNiNPI5pCFY109afgBIBjukgyk2fyo+/ggxYrK/hPOYYfvAaVv4mC4sAohO\nMRa/4HOsFqZII6JgbVmZkp++giygnF8miWSPnzYjvEQxemrkEXXQ89wm0yPj/iPQOs7E+qSKfV8r\nSqnrdGtZa4oAAJgoc0UeLjAqDpvDNb1ooJHms9v/N+CZe/pu/iNKQuqFxgOPGAnQH9PsY1xj3Jww\n0fyI6RCfIczkKhiPvqR+eAb2A3IDL/YZlVPd+oL5cchjoCqBGiWxBwC1ujV2rODxy6Jd6iaiugTR\ntaiUPAYJ5YdCMm7estJaD/0jn96JoBjfTVi28mHaEabVvIpfVK1Cmo0sICvRD9kVavxZhNfishhT\njnOjarMEaHGye2msWK1jh5dtDtpyAx4+e0Dduaitynb2eIOYxQbDoDckJN0+t3aDmp3TBsjNQ12c\n6kZaqVBXCkZFy+OGJLmpeE9iZgVuz7YbGHov/gHgXspoO5m7uAvkLpOVADMo2YeAzLjTe3Mryr6f\nYB8eduKiEnlyBj/nccCD+ArWMCYze/g7/1gsXHQQNSAQBuGx+eRVLUvBUi1Db6H+nA0tKWybFGSl\ncjRCQgLwn8FS829uUGv6itQJhKm0PXv8diwXcDwftkIPON9aRPIuID7tp69ItDlVDnNAWZoATN32\nLSHrSJuRmKhkLL92LlSOA5ve52T8+85x9jwkt2+sZv9oEf1BtfmTbZMquuTG6TPg05wk6o4uDu5w\nKlMm81nJR8AYKManIboNK+giDPWCP/iuUOWwuyRCAqKUvI9lVCTrdy4vVaXhZiMZNfeflfb/rcn/\nBAddGOhbAK47GjXuPTW7GMEFOBJ+7qIY43w9g0w9YVzzL/1weq/e83HbnBvGXwoWQbB5QVsYdLQV\nPnPt61pnx0vzd6F/o9l8c/2lN6MMLhu9gUexwi4cM9SJ9RLsGwRl5UovLQdxVqasfYtj0j3qDALz\nraaaMHPJI4qIJEkQVTjmt7fMHRakjRpUewUKvqsOph7jBwg89atUjqLzgOCEyTSsmMTw/3fSVEdv\nvkbeag18MBoXMLxycDcitkOYT9JwQ1vDk7UmanJ2uqITNrM2LUuYZC3kTsbbubxB9vGnsk2Xnm6s\nw/vHM2T9Q6ngY+cjQ6LRVcEgtG206jLdzeATrk6TxDkcMX388woJH+MnhA2QQXCDfI1F6dB2qyjn\nxsUpIbOavKFTQCu6CY53PJ2DKZYLRXnO1Wtfl4LY8KuDFD8uLqtonmZODRIkRFeSpTUTKYkvuEDW\n5jJJwLuJORO9zeVc05ewOJnwLmN/afiw/CVLhg+vorUFsSm+mNlGSxvKnqIJJmHT4qjDxjVfNihG\nJ7c6cI/8tX8HXRXMbTkcX2yOsn2Spi+mSy6LFS/U9WQrK9kc5RZetAngX4LU9ZHB3N6sd0q934fw\nNR9LJqLPaxcXNyua3gLBRwbC0LWCAehMmeI6mL+zzj+TbvPU+pucInKV7sual4UnUqomycS6Hk10\nxn5n64tqxSnHNsKLK0AksckC5x1i9AgBI8R5FcuabqzFc/tS9IEqCR8rV5ADoB8CPAi78u6OEwod\n/+w+DHMAFnAWAcc0wq3TWKrQ0/2tJ+BbTP0QFD7TmcIjk8cZONj5jsR0fLMev4aPYei7oAEIbnNd\n/TUQu2/Y0t3UcYq/PNeAL6mm2Aj6IfNtYdrCVy8pN3u+A/+RVNhCzowxX3fk1rLKJLHgSWrOylvP\n6UGOG/nsqhoRsFV+wil4tB1ht3jlC87K8AkfEQs7LhQwtRoB3mXk34Cu/5K9KM9Cwq1SO24j77Px\nyVS3d5e8RB70MxkiI8FXRaCuGKmII1tDQYL9wJbxxuFF5mETjL0EyG4tC847s+66Mkh/OYmIyM9X\nFfYBoBvSjoV5lNLRQMUTRG0ljTsUljB1bKyOQHZw7siyXWYmAFSf4NLfwc986mT44BrlVrBwSjYf\nTDBmiKQzlde0wdSVaQqKDCv42HCZaeTqIc34qag1H1l4RYqy825J1UnPb+Kq5FHFJ1yFt2HRz3QA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAACGVBSQVQHaZJ1IbidCOMXu4uflMr4fswo2VLcOJyuCcgIyg1wm+uUgZ8lhg0VTZPUe3tL\nDWtW34vcHgXGFbCtBADENyb3W2/aDeIs4ODfq2vMegX/lalrKJQkxfczZw2WL5tuC04sAZaN5cMk\ngqp9HQoJ1xeOyTuteFj5bmTwtI0nypzPAUKZI6Ydhyx8IkxCZGgckTai/ecTczXvcW/s3hkrGm07\nFN/lqa1jlR0tdm317kwTWEQ/WhQIa1GW4T5G"
    },
    {
      "name": "verify_vaa_unconstrained",
      "is_unconstrained": true,
      "custom_attributes": [
        "utility"
      ],
      "abi": {
        "parameters": [
          {
            "name": "bytes",
            "type": {
              "kind": "array",
              "length": 2000,
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              }
            },
            "visibility": "private"
          },
          {
            "name": "actual_length",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "tuple",
            "fields": [
              {
                "kind": "array",
                "length": 13,
                "type": {
                  "kind": "array",
                  "length": 32,
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 8
                  }
                }
              },
              {
                "kind": "array",
                "length": 13,
                "type": {
                  "kind": "array",
                  "length": 32,
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 8
                  }
                }
              },
              {
                "kind": "array",
                "length": 13,
                "type": {
                  "kind": "array",
                  "length": 64,
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 8
                  }
                }
              },
              {
                "kind": "array",
                "length": 32,
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 8
                }
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              }
            ]
          },
          "visibility": "public"
        },
        "error_types": {
          "211358376073803959": {
            "error_kind": "string",
            "string": "Need at least 1 signature"
          },
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3095323350861740601": {
            "error_kind": "fmtstring",
            "length": 132,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "4790011804579310016": {
            "error_kind": "string",
            "string": "VM version incompatible"
          },
          "5003515106221862139": {
            "error_kind": "string",
            "string": "Too many signatures"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "11418088424205762236": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": []
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14656550611213696286": {
            "error_kind": "string",
            "string": "guardian index out of bounds"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "verify_vaa_unconstrained"
      ]
    }
  ],
  "outputs": {
    "globals": {
      "notes": [
        {
          "fields": [
            {
              "kind": "integer",
              "sign": false,
              "value": "0000000000000000000000000000000000000000000000000000000000000000"
            },
            {
              "kind": "string",
              "value": "UintNote"
            },
            {
              "fields": [
                {
                  "name": "owner",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000000"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "randomness",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000001"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "value",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000002"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                }
              ],
              "kind": "struct"
            }
          ],
          "kind": "tuple"
        },
        {
          "fields": [
            {
              "kind": "integer",
              "sign": false,
              "value": "0000000000000000000000000000000000000000000000000000000000000000"
            },
            {
              "kind": "string",
              "value": "UintNote"
            },
            {
              "fields": [
                {
                  "name": "owner",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000000"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "randomness",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000001"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "value",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000002"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                }
              ],
              "kind": "struct"
            }
          ],
          "kind": "tuple"
        }
      ],
      "storage": [
        {
          "fields": [
            {
              "name": "contract_name",
              "value": {
                "kind": "string",
                "value": "Token"
              }
            },
            {
              "name": "fields",
              "value": {
                "fields": [
                  {
                    "name": "admin",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000001"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "minters",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000002"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "balances",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000003"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "total_supply",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000004"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "public_balances",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000005"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "symbol",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000006"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "name",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000008"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "decimals",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "000000000000000000000000000000000000000000000000000000000000000a"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  }
                ],
                "kind": "struct"
              }
            }
          ],
          "kind": "struct"
        },
        {
          "fields": [
            {
              "name": "contract_name",
              "value": {
                "kind": "string",
                "value": "Wormhole"
              }
            },
            {
              "name": "fields",
              "value": {
                "fields": [
                  {
                    "name": "state",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000001"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "sequences",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000007"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "wormhole_address",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000008"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "token_address",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000009"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "guardian_1",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "000000000000000000000000000000000000000000000000000000000000000a"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "guardian_2",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "000000000000000000000000000000000000000000000000000000000000000b"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "guardian_3",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "000000000000000000000000000000000000000000000000000000000000000c"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "guardian_4",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "000000000000000000000000000000000000000000000000000000000000000d"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "guardian_5",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "000000000000000000000000000000000000000000000000000000000000000e"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "guardian_6",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "000000000000000000000000000000000000000000000000000000000000000f"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "guardian_7",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000010"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "guardian_8",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000011"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "guardian_9",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000012"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "guardian_10",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000013"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "guardian_11",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000014"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "guardian_12",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000015"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "guardian_13",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000016"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "guardian_14",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000017"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "guardian_15",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000018"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "guardian_16",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000019"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "guardian_17",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "000000000000000000000000000000000000000000000000000000000000001a"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "guardian_18",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "000000000000000000000000000000000000000000000000000000000000001b"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "guardian_19",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "000000000000000000000000000000000000000000000000000000000000001c"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "current_guardian_set_index",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "000000000000000000000000000000000000000000000000000000000000001d"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  }
                ],
                "kind": "struct"
              }
            }
          ],
          "kind": "struct"
        }
      ]
    },
    "structs": {
      "functions": [
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "nonce",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 64
                    }
                  },
                  {
                    "name": "payloads",
                    "type": {
                      "kind": "array",
                      "length": 8,
                      "type": {
                        "kind": "array",
                        "length": 31,
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      }
                    }
                  },
                  {
                    "name": "consistency",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 8
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::_publish_message_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 64
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::_publish_message_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "body_bytes",
                    "type": {
                      "kind": "array",
                      "length": 1860,
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    }
                  },
                  {
                    "name": "body_length",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 32
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::compute_vaa_hash_unconstrained_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "array",
                "length": 32,
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 8
                }
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::compute_vaa_hash_unconstrained_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "index",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 32
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::expire_guardian_set_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::expire_guardian_set_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [],
                "kind": "struct",
                "path": "Wormhole::get_provider_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "fields": [
                  {
                    "name": "chain_id",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 16
                    }
                  },
                  {
                    "name": "evm_chain_id",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 16
                    }
                  }
                ],
                "kind": "struct",
                "path": "structs::Provider"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::get_provider_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "index",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 32
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::guardian_set_expired_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "boolean"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::guardian_set_expired_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "chain_id",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 16
                    }
                  },
                  {
                    "name": "evm_chain_id",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 16
                    }
                  },
                  {
                    "name": "wormhole_address",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "token_address",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::init_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::init_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "bytes",
                    "type": {
                      "kind": "array",
                      "length": 2000,
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    }
                  },
                  {
                    "name": "actual_length",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 32
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::parse_vaa_unconstrained_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "fields": [
                  {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  },
                  {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 8
                  },
                  {
                    "kind": "array",
                    "length": 13,
                    "type": {
                      "kind": "array",
                      "length": 66,
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    }
                  },
                  {
                    "kind": "array",
                    "length": 1860,
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 8
                    }
                  },
                  {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                ],
                "kind": "tuple"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::parse_vaa_unconstrained_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "message_ciphertext",
                    "type": {
                      "fields": [
                        {
                          "name": "storage",
                          "type": {
                            "kind": "array",
                            "length": 17,
                            "type": {
                              "kind": "field"
                            }
                          }
                        },
                        {
                          "name": "len",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 32
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "std::collections::bounded_vec::BoundedVec"
                    }
                  },
                  {
                    "name": "message_context",
                    "type": {
                      "fields": [
                        {
                          "name": "tx_hash",
                          "type": {
                            "kind": "field"
                          }
                        },
                        {
                          "name": "unique_note_hashes_in_tx",
                          "type": {
                            "fields": [
                              {
                                "name": "storage",
                                "type": {
                                  "kind": "array",
                                  "length": 64,
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              },
                              {
                                "name": "len",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 32
                                }
                              }
                            ],
                            "kind": "struct",
                            "path": "std::collections::bounded_vec::BoundedVec"
                          }
                        },
                        {
                          "name": "first_nullifier_in_tx",
                          "type": {
                            "kind": "field"
                          }
                        },
                        {
                          "name": "recipient",
                          "type": {
                            "fields": [
                              {
                                "name": "inner",
                                "type": {
                                  "kind": "field"
                                }
                              }
                            ],
                            "kind": "struct",
                            "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::messages::processing::message_context::MessageContext"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::process_message_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::process_message_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "nonce",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 64
                    }
                  },
                  {
                    "name": "payloads",
                    "type": {
                      "kind": "array",
                      "length": 8,
                      "type": {
                        "kind": "array",
                        "length": 31,
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      }
                    }
                  },
                  {
                    "name": "message_fee",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 128
                    }
                  },
                  {
                    "name": "consistency",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 8
                    }
                  },
                  {
                    "name": "from",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "token_nonce",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::publish_message_in_private_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::publish_message_in_private_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "nonce",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 64
                    }
                  },
                  {
                    "name": "payloads",
                    "type": {
                      "kind": "array",
                      "length": 8,
                      "type": {
                        "kind": "array",
                        "length": 31,
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      }
                    }
                  },
                  {
                    "name": "message_fee",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 128
                    }
                  },
                  {
                    "name": "consistency",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 8
                    }
                  },
                  {
                    "name": "from",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "token_nonce",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::publish_message_in_public_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 64
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::publish_message_in_public_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "guardian",
                    "type": {
                      "fields": [
                        {
                          "name": "address",
                          "type": {
                            "fields": [
                              {
                                "name": "value0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              }
                            ],
                            "kind": "struct",
                            "path": "structs::Guardian_PK"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "structs::Guardian"
                    }
                  },
                  {
                    "name": "index",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 32
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::set_guardian10_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::set_guardian10_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "guardian",
                    "type": {
                      "fields": [
                        {
                          "name": "address",
                          "type": {
                            "fields": [
                              {
                                "name": "value0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              }
                            ],
                            "kind": "struct",
                            "path": "structs::Guardian_PK"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "structs::Guardian"
                    }
                  },
                  {
                    "name": "index",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 32
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::set_guardian11_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::set_guardian11_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "guardian",
                    "type": {
                      "fields": [
                        {
                          "name": "address",
                          "type": {
                            "fields": [
                              {
                                "name": "value0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              }
                            ],
                            "kind": "struct",
                            "path": "structs::Guardian_PK"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "structs::Guardian"
                    }
                  },
                  {
                    "name": "index",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 32
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::set_guardian12_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::set_guardian12_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "guardian",
                    "type": {
                      "fields": [
                        {
                          "name": "address",
                          "type": {
                            "fields": [
                              {
                                "name": "value0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              }
                            ],
                            "kind": "struct",
                            "path": "structs::Guardian_PK"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "structs::Guardian"
                    }
                  },
                  {
                    "name": "index",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 32
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::set_guardian13_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::set_guardian13_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "guardian",
                    "type": {
                      "fields": [
                        {
                          "name": "address",
                          "type": {
                            "fields": [
                              {
                                "name": "value0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              }
                            ],
                            "kind": "struct",
                            "path": "structs::Guardian_PK"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "structs::Guardian"
                    }
                  },
                  {
                    "name": "index",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 32
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::set_guardian14_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::set_guardian14_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "guardian",
                    "type": {
                      "fields": [
                        {
                          "name": "address",
                          "type": {
                            "fields": [
                              {
                                "name": "value0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              }
                            ],
                            "kind": "struct",
                            "path": "structs::Guardian_PK"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "structs::Guardian"
                    }
                  },
                  {
                    "name": "index",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 32
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::set_guardian15_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::set_guardian15_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "guardian",
                    "type": {
                      "fields": [
                        {
                          "name": "address",
                          "type": {
                            "fields": [
                              {
                                "name": "value0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              }
                            ],
                            "kind": "struct",
                            "path": "structs::Guardian_PK"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "structs::Guardian"
                    }
                  },
                  {
                    "name": "index",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 32
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::set_guardian16_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::set_guardian16_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "guardian",
                    "type": {
                      "fields": [
                        {
                          "name": "address",
                          "type": {
                            "fields": [
                              {
                                "name": "value0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              }
                            ],
                            "kind": "struct",
                            "path": "structs::Guardian_PK"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "structs::Guardian"
                    }
                  },
                  {
                    "name": "index",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 32
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::set_guardian17_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::set_guardian17_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "guardian",
                    "type": {
                      "fields": [
                        {
                          "name": "address",
                          "type": {
                            "fields": [
                              {
                                "name": "value0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              }
                            ],
                            "kind": "struct",
                            "path": "structs::Guardian_PK"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "structs::Guardian"
                    }
                  },
                  {
                    "name": "index",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 32
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::set_guardian18_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::set_guardian18_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "guardian",
                    "type": {
                      "fields": [
                        {
                          "name": "address",
                          "type": {
                            "fields": [
                              {
                                "name": "value0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              }
                            ],
                            "kind": "struct",
                            "path": "structs::Guardian_PK"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "structs::Guardian"
                    }
                  },
                  {
                    "name": "index",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 32
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::set_guardian19_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::set_guardian19_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "guardian",
                    "type": {
                      "fields": [
                        {
                          "name": "address",
                          "type": {
                            "fields": [
                              {
                                "name": "value0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              }
                            ],
                            "kind": "struct",
                            "path": "structs::Guardian_PK"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "structs::Guardian"
                    }
                  },
                  {
                    "name": "index",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 32
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::set_guardian1_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::set_guardian1_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "guardian",
                    "type": {
                      "fields": [
                        {
                          "name": "address",
                          "type": {
                            "fields": [
                              {
                                "name": "value0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              }
                            ],
                            "kind": "struct",
                            "path": "structs::Guardian_PK"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "structs::Guardian"
                    }
                  },
                  {
                    "name": "index",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 32
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::set_guardian2_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::set_guardian2_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "guardian",
                    "type": {
                      "fields": [
                        {
                          "name": "address",
                          "type": {
                            "fields": [
                              {
                                "name": "value0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              }
                            ],
                            "kind": "struct",
                            "path": "structs::Guardian_PK"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "structs::Guardian"
                    }
                  },
                  {
                    "name": "index",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 32
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::set_guardian3_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::set_guardian3_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "guardian",
                    "type": {
                      "fields": [
                        {
                          "name": "address",
                          "type": {
                            "fields": [
                              {
                                "name": "value0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              }
                            ],
                            "kind": "struct",
                            "path": "structs::Guardian_PK"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "structs::Guardian"
                    }
                  },
                  {
                    "name": "index",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 32
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::set_guardian4_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::set_guardian4_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "guardian",
                    "type": {
                      "fields": [
                        {
                          "name": "address",
                          "type": {
                            "fields": [
                              {
                                "name": "value0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              }
                            ],
                            "kind": "struct",
                            "path": "structs::Guardian_PK"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "structs::Guardian"
                    }
                  },
                  {
                    "name": "index",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 32
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::set_guardian5_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::set_guardian5_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "guardian",
                    "type": {
                      "fields": [
                        {
                          "name": "address",
                          "type": {
                            "fields": [
                              {
                                "name": "value0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              }
                            ],
                            "kind": "struct",
                            "path": "structs::Guardian_PK"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "structs::Guardian"
                    }
                  },
                  {
                    "name": "index",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 32
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::set_guardian6_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::set_guardian6_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "guardian",
                    "type": {
                      "fields": [
                        {
                          "name": "address",
                          "type": {
                            "fields": [
                              {
                                "name": "value0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              }
                            ],
                            "kind": "struct",
                            "path": "structs::Guardian_PK"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "structs::Guardian"
                    }
                  },
                  {
                    "name": "index",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 32
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::set_guardian7_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::set_guardian7_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "guardian",
                    "type": {
                      "fields": [
                        {
                          "name": "address",
                          "type": {
                            "fields": [
                              {
                                "name": "value0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              }
                            ],
                            "kind": "struct",
                            "path": "structs::Guardian_PK"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "structs::Guardian"
                    }
                  },
                  {
                    "name": "index",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 32
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::set_guardian8_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::set_guardian8_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "guardian",
                    "type": {
                      "fields": [
                        {
                          "name": "address",
                          "type": {
                            "fields": [
                              {
                                "name": "value0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              }
                            ],
                            "kind": "struct",
                            "path": "structs::Guardian_PK"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "structs::Guardian"
                    }
                  },
                  {
                    "name": "index",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 32
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::set_guardian9_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::set_guardian9_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "provider",
                    "type": {
                      "fields": [
                        {
                          "name": "chain_id",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 16
                          }
                        },
                        {
                          "name": "evm_chain_id",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 16
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "structs::Provider"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::set_provider_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::set_provider_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [],
                "kind": "struct",
                "path": "Wormhole::sync_private_state_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::sync_private_state_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "bytes",
                    "type": {
                      "kind": "array",
                      "length": 2000,
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    }
                  },
                  {
                    "name": "actual_length",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 32
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::verify_vaa_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::verify_vaa_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "bytes",
                    "type": {
                      "kind": "array",
                      "length": 2000,
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    }
                  },
                  {
                    "name": "actual_length",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 32
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::verify_vaa_unconstrained_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "fields": [
                  {
                    "kind": "array",
                    "length": 13,
                    "type": {
                      "kind": "array",
                      "length": 32,
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    }
                  },
                  {
                    "kind": "array",
                    "length": 13,
                    "type": {
                      "kind": "array",
                      "length": 32,
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    }
                  },
                  {
                    "kind": "array",
                    "length": 13,
                    "type": {
                      "kind": "array",
                      "length": 64,
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    }
                  },
                  {
                    "kind": "array",
                    "length": 32,
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 8
                    }
                  },
                  {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 8
                  }
                ],
                "kind": "tuple"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::verify_vaa_unconstrained_abi"
        }
      ]
    }
  },
  "file_map": {
    "100": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v1.0.0-staging.6/noir-projects/aztec-nr/aztec/src/macros/dispatch.nr",
      "source": "use super::utils::{compute_fn_selector, size_in_fields};\nuse poseidon::poseidon2::Poseidon2Hasher;\nuse std::{collections::umap::UHashMap, hash::BuildHasherDefault, panic};\n\n/// Returns an `fn public_dispatch(...)` function for the given module that's assumed to be an Aztec contract.\npub comptime fn generate_public_dispatch(m: Module) -> Quoted {\n    let functions = m.functions();\n    let functions =\n        functions.filter(|function: FunctionDefinition| function.has_named_attribute(\"public\"));\n\n    let unit = get_type::<()>();\n\n    let seen_selectors =\n        &mut UHashMap::<Field, Quoted, BuildHasherDefault<Poseidon2Hasher>>::default();\n\n    let ifs = functions.map(|function: FunctionDefinition| {\n        let parameters = function.parameters();\n        let return_type = function.return_type();\n\n        let selector: Field = compute_fn_selector(function);\n        let fn_name = function.name();\n\n        // Since function selectors are computed as the first 4 bytes of the hash of the function signature,\n        // it's possible to have collisions. With the following check, we ensure it doesn't happen within\n        // the same contract.\n        if seen_selectors.contains_key(selector) {\n            let existing_fn = seen_selectors.get(selector).unwrap();\n            panic(\n                f\"Public function selector collision detected between functions '{fn_name}' and '{existing_fn}'\",\n            );\n        }\n        seen_selectors.insert(selector, fn_name);\n\n        let mut parameters_size = 0;\n        for param in parameters {\n            parameters_size += size_in_fields(param.1);\n        }\n\n        let initial_read = if parameters.len() == 0 {\n            quote {}\n        } else {\n            // The initial calldata_copy offset is 1 to skip the Field selector\n            // The expected calldata is the serialization of\n            // - FunctionSelector: the selector of the function intended to dispatch\n            // - Parameters: the parameters of the function intended to dispatch\n            // That is, exactly what is expected for a call to the target function,\n            // but with a selector added at the beginning.\n            quote {\n                let input_calldata: [Field; $parameters_size] = dep::aztec::context::public_context::calldata_copy(1, $parameters_size);\n                let mut reader = dep::aztec::protocol_types::utils::reader::Reader::new(input_calldata);\n            }\n        };\n\n        let parameter_index: &mut u32 = &mut 0;\n        let reads = parameters.map(|param: (Quoted, Type)| {\n            let parameter_index_value = *parameter_index;\n            let param_name = f\"arg{parameter_index_value}\".quoted_contents();\n            let param_type = param.1;\n            let read = quote {\n                let $param_name: $param_type = reader.read_struct(dep::aztec::protocol_types::traits::Deserialize::deserialize);\n            };\n            *parameter_index += 1;\n            quote { $read }\n        });\n        let read = reads.join(quote { });\n\n        let mut args = &[];\n        for parameter_index in 0..parameters.len() {\n            let param_name = f\"arg{parameter_index}\".quoted_contents();\n            args = args.push_back(quote { $param_name });\n        }\n\n        let args = args.join(quote { , });\n        // name of the function is assigned just before the call so debug metadata doesn't span most of this macro when figuring out where the call comes from.\n        let name = function.name();\n        let call = quote { $name($args) };\n\n        let return_code = if return_type == unit {\n            quote {\n                $call;\n                // Force early return.\n                dep::aztec::context::public_context::avm_return([]);\n            }\n        } else {\n            quote {\n                let return_value = dep::aztec::protocol_types::traits::Serialize::serialize($call);\n                dep::aztec::context::public_context::avm_return(return_value.as_slice());\n            }\n        };\n\n        let if_ = quote {\n            if selector == $selector {\n                $initial_read\n                $read\n                $return_code\n            }\n        };\n        if_\n    });\n\n    if ifs.len() == 0 {\n        // No dispatch function if there are no public functions\n        quote {}\n    } else {\n        let ifs = ifs.push_back(quote { panic(f\"Unknown selector {selector}\") });\n        let dispatch = ifs.join(quote {  });\n\n        let body = quote {\n            // We mark this as public because our whole system depends on public\n            // functions having this attribute. However, the public MACRO will\n            // handle the public_dispatch function specially and do nothing.\n            #[public]\n            pub unconstrained fn public_dispatch(selector: Field) {\n                $dispatch\n            }\n        };\n\n        body\n    }\n}\n\ncomptime fn get_type<T>() -> Type {\n    let t: T = std::mem::zeroed();\n    std::meta::type_of(t)\n}\n"
    },
    "103": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v1.0.0-staging.6/noir-projects/aztec-nr/aztec/src/macros/functions/call_interface_stubs.nr",
      "source": "use crate::macros::utils::{\n    add_to_field_array, AsStrQuote, compute_fn_selector, is_fn_private, is_fn_public, is_fn_view,\n    size_in_fields,\n};\nuse std::meta::{type_of, unquote};\n\ncomptime global FROM_FIELD: TypedExpr = {\n    let from_field_trait = quote { protocol_types::traits::FromField }.as_trait_constraint();\n    let function_selector_typ =\n        quote { protocol_types::abis::function_selector::FunctionSelector }.as_type();\n    function_selector_typ.get_trait_impl(from_field_trait).unwrap().methods().filter(|m| {\n        m.name() == quote { from_field }\n    })[0]\n        .as_typed_expr()\n};\n\ncomptime global SERIALIZED_ARGS_NAME: Quoted = quote { serialized_args };\n\npub comptime fn stub_fn(f: FunctionDefinition) -> Quoted {\n    let is_static_call = is_fn_view(f);\n    let is_void = f.return_type() == type_of(());\n\n    if is_fn_private(f) {\n        if is_static_call {\n            if is_void {\n                create_private_static_void_stub(f)\n            } else {\n                create_private_static_stub(f)\n            }\n        } else {\n            if is_void {\n                create_private_void_stub(f)\n            } else {\n                create_private_stub(f)\n            }\n        }\n    } else if is_fn_public(f) {\n        if is_static_call {\n            if is_void {\n                create_public_static_void_stub(f)\n            } else {\n                create_public_static_stub(f)\n            }\n        } else {\n            if is_void {\n                create_public_void_stub(f)\n            } else {\n                create_public_stub(f)\n            }\n        }\n    } else {\n        if is_void {\n            create_utility_void_stub(f)\n        } else {\n            create_utility_stub(f)\n        }\n    }\n}\n\n/// Utility function creating stubs used by all the stub functions in this file.\ncomptime fn create_stub_base(\n    f: FunctionDefinition,\n) -> (Quoted, Quoted, Quoted, Quoted, u32, Field) {\n    let fn_name = f.name();\n    let fn_parameters = f.parameters();\n    let fn_parameters_list =\n        fn_parameters.map(|(name, typ): (Quoted, Type)| quote { $name: $typ }).join(quote {,});\n    let params_num_fields =\n        fn_parameters.fold(0, |acc, (_, typ)| acc + crate::macros::utils::size_in_fields(typ));\n\n    let serialized_args_index_name = quote { serialized_args_index };\n    // Example of what the fold(...) below will generate for `target_address` and `fee_juice_limit_per_tx` function\n    // parameters:\n    // ```\n    // let mut serialized_args = [0;2];\n    // let mut serialized_args_index = 0;\n    // let target_address_serialized = aztec::protocol_types::traits::Serialize::serialize(target_address)\n    // for i in 0..target_address_serialized.len() {\n    //    serialized_args[serialized_args_index] = target_address_serialized[i];\n    //    serialized_args_index += 1;\n    // }\n    // serialized_args[serialized_args_index] = fee_juice_limit_per_tx as Field\n    // serialized_args_index += 1;\n    // ```\n    let serialized_args_array_construction = fn_parameters.fold(\n        quote {\n            let mut $SERIALIZED_ARGS_NAME = [0; $params_num_fields];\n            let mut $serialized_args_index_name: u32 = 0;\n        },\n        |args, param: (Quoted, Type)| {\n            let (name, typ) = param;\n            let arg_to_append =\n                add_to_field_array(SERIALIZED_ARGS_NAME, serialized_args_index_name, name, typ);\n            quote {\n                $args\n                $arg_to_append\n            }\n        },\n    );\n\n    let (fn_name_str, _) = fn_name.as_str_quote();\n    let fn_name_len: u32 = unquote!(quote { $fn_name_str.as_bytes().len()});\n    let fn_selector: Field = compute_fn_selector(f);\n\n    (\n        fn_name, fn_parameters_list, serialized_args_array_construction, fn_name_str, fn_name_len,\n        fn_selector,\n    )\n}\n\ncomptime fn create_private_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_array_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n    let fn_return_type = f.return_type();\n    let size = size_in_fields(fn_return_type);\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PrivateCallInterface<$fn_name_len, $fn_return_type, $size> {\n            $serialized_args_array_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PrivateCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_NAME,\n                false\n            )\n        }\n    }\n}\n\ncomptime fn create_private_static_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n    let fn_return_type = f.return_type();\n    let size = size_in_fields(fn_return_type);\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PrivateStaticCallInterface<$fn_name_len, $fn_return_type, $size> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PrivateStaticCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_NAME,\n            )\n        }\n    }\n}\n\ncomptime fn create_private_void_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PrivateVoidCallInterface<$fn_name_len, (), 0> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PrivateVoidCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_NAME,\n                false\n            )\n        }\n    }\n}\n\ncomptime fn create_private_static_void_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PrivateStaticVoidCallInterface<$fn_name_len, (), 0> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PrivateStaticVoidCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                serialized_args\n            )\n        }\n    }\n}\n\ncomptime fn create_public_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n    let fn_return_type = f.return_type();\n    let size = size_in_fields(fn_return_type);\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PublicCallInterface<$fn_name_len, $fn_return_type, $size> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PublicCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_NAME,\n                false\n            )\n        }\n    }\n}\n\ncomptime fn create_public_static_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n    let fn_return_type = f.return_type();\n    let size = size_in_fields(fn_return_type);\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PublicStaticCallInterface<$fn_name_len, $fn_return_type, $size> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PublicStaticCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_NAME,\n            )\n        }\n    }\n}\n\ncomptime fn create_public_void_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PublicVoidCallInterface<$fn_name_len, (), 0> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PublicVoidCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_NAME,\n                false\n            )\n        }\n    }\n}\n\ncomptime fn create_public_static_void_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PublicStaticVoidCallInterface<$fn_name_len, (), 0> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PublicStaticVoidCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                serialized_args\n            )\n        }\n    }\n}\n\ncomptime fn create_utility_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n    let fn_return_type = f.return_type();\n    let size = size_in_fields(fn_return_type);\n\n    // This is here because utility function call interfaces can only be used within TXe tests.\n    let modified_fn_name = f\"_experimental_{fn_name}\".quoted_contents();\n\n    quote {\n        pub fn $modified_fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::UtilityCallInterface<$fn_name_len, $fn_return_type, $size> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::UtilityCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_NAME,\n            )\n        }\n    }\n}\n\ncomptime fn create_utility_void_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n\n    // This is here because utility function call interfaces can only be used within TXe tests.\n    let modified_fn_name = f\"_experimental_{fn_name}\".quoted_contents();\n\n    quote {\n        pub fn $modified_fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::UtilityVoidCallInterface<$fn_name_len, (), 0> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::UtilityVoidCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_NAME,\n            )\n        }\n    }\n}\n"
    },
    "104": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v1.0.0-staging.6/noir-projects/aztec-nr/aztec/src/macros/functions/initialization_utils.nr",
      "source": "use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress,\n    constants::GENERATOR_INDEX__CONSTRUCTOR, hash::poseidon2_hash_with_separator, traits::ToField,\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext},\n    oracle::get_contract_instance::{\n        get_contract_instance, get_contract_instance_deployer_avm,\n        get_contract_instance_initialization_hash_avm,\n    },\n};\n\npub fn mark_as_initialized_public(context: &mut PublicContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn mark_as_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn assert_is_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    context.push_nullifier_read_request(init_nullifier);\n}\n\nfn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    address.to_field()\n}\n\npub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {\n    let address = context.this_address();\n    let deployer = get_contract_instance_deployer_avm(address).unwrap();\n    let initialization_hash = get_contract_instance_initialization_hash_avm(address).unwrap();\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (deployer.is_zero()) | (deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\npub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\n/// This function is not only used in macros but it's also used by external people to check that an instance has been\n/// initialized with the correct constructor arguments. Don't hide this unless you implement factory functionality.\npub fn compute_initialization_hash(\n    init_selector: FunctionSelector,\n    init_args_hash: Field,\n) -> Field {\n    poseidon2_hash_with_separator(\n        [init_selector.to_field(), init_args_hash],\n        GENERATOR_INDEX__CONSTRUCTOR,\n    )\n}\n"
    },
    "107": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v1.0.0-staging.6/noir-projects/aztec-nr/aztec/src/macros/functions/utils.nr",
      "source": "use crate::macros::{\n    functions::{abi_export::create_fn_abi_export, call_interface_stubs::stub_fn, stub_registry},\n    notes::NOTES,\n    utils::{\n        add_to_hasher, fn_has_noinitcheck, get_fn_visibility, is_fn_contract_library_method,\n        is_fn_initializer, is_fn_internal, is_fn_private, is_fn_public, is_fn_test, is_fn_utility,\n        is_fn_view, modify_fn_body, module_has_initializer, module_has_storage,\n    },\n};\nuse protocol_types::meta::generate_serialize_to_fields;\nuse std::meta::type_of;\n\npub(crate) comptime fn transform_private(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // If a function is further modified as unconstrained, we throw an error\n    if f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[private] but marked as unconstrained, remove unconstrained keyword\",\n        );\n    }\n\n    let module_has_initializer = module_has_initializer(f.module());\n    let module_has_storage = module_has_storage(f.module());\n\n    // Private functions undergo a lot of transformations from their Aztec.nr form into a circuit that can be fed to the\n    // Private Kernel Circuit.\n    // First we change the function signature so that it also receives `PrivateContextInputs`, which contain information\n    // about the execution context (e.g. the caller).\n    let original_params = f.parameters();\n    f.set_parameters(&[(\n        quote { inputs },\n        quote { crate::context::inputs::private_context_inputs::PrivateContextInputs }.as_type(),\n    )]\n        .append(original_params));\n\n    let mut body = f.body().as_block().unwrap();\n\n    // The original params are hashed and passed to the `context` object, so that the kernel can verify we've received\n    // the correct values.\n    // TODO: Optimize args_hasher for small number of arguments\n    let args_hasher_name = quote { args_hasher };\n    let args_hasher = original_params.fold(\n        quote {\n            let mut $args_hasher_name = dep::aztec::hash::ArgsHasher::new();\n        },\n        |args_hasher, param: (Quoted, Type)| {\n            let (name, typ) = param;\n            let appended_arg = add_to_hasher(args_hasher_name, name, typ);\n            quote {\n                $args_hasher\n                $appended_arg\n            }\n        },\n    );\n\n    let context_creation = quote {\n        let mut context = dep::aztec::context::private_context::PrivateContext::new(inputs, dep::aztec::protocol_types::traits::Hash::hash($args_hasher_name));\n    };\n\n    // Modifications introduced by the different marker attributes.\n    let internal_check = if is_fn_internal(f) {\n        create_internal_check(f)\n    } else {\n        quote {}\n    };\n\n    let view_check = if is_fn_view(f) {\n        create_view_check(f)\n    } else {\n        quote {}\n    };\n\n    let (assert_initializer, mark_as_initialized) = if is_fn_initializer(f) {\n        (create_assert_correct_initializer_args(f), create_mark_as_initialized(f))\n    } else {\n        (quote {}, quote {})\n    };\n\n    let storage_init = if module_has_storage {\n        quote {\n            // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n            // referenced. We instead ignore 'unused variable' warnings for it.\n            #[allow(unused_variables)]\n            let storage = Storage::init(&mut context);\n        }\n    } else {\n        quote {}\n    };\n\n    // Initialization checks are not included in contracts that don't have initializers.\n    let init_check = if module_has_initializer & !is_fn_initializer(f) & !fn_has_noinitcheck(f) {\n        create_init_check(f)\n    } else {\n        quote {}\n    };\n\n    // All private functions perform message discovery, since they may need to access notes. This is slightly\n    // inefficient and could be improved by only doing it once we actually attempt to read any. Note that the message\n    // discovery call syncs private events as well. We do not sync those here if there are no notes because we don't\n    // have an API that would access events from private functions.\n    let message_discovery_call = if NOTES.len() > 0 {\n        create_message_discovery_call()\n    } else {\n        quote {}\n    };\n\n    // Finally, we need to change the return type to be `PrivateCircuitPublicInputs`, which is what the Private Kernel\n    // circuit expects.\n    let return_value_var_name = quote { macro__returned__values };\n\n    let return_value_type = f.return_type();\n    let return_value = if body.len() == 0 {\n        quote {}\n    } else if return_value_type != type_of(()) {\n        // The original return value is passed to a second args hasher which the context receives.\n        let (body_without_return, last_body_expr) = body.pop_back();\n        let return_value = last_body_expr.quoted();\n        let return_value_assignment =\n            quote { let $return_value_var_name: $return_value_type = $return_value; };\n        let return_hasher_name = quote { return_hasher };\n        let return_value_into_hasher =\n            add_to_hasher(return_hasher_name, return_value_var_name, return_value_type);\n\n        body = body_without_return;\n\n        quote {\n            let mut $return_hasher_name = dep::aztec::hash::ArgsHasher::new();\n            $return_value_assignment\n            $return_value_into_hasher\n            context.set_return_hash($return_hasher_name);\n        }\n    } else {\n        let (body_without_return, last_body_expr) = body.pop_back();\n        if !last_body_expr.has_semicolon()\n            & last_body_expr.as_for().is_none()\n            & last_body_expr.as_assert().is_none()\n            & last_body_expr.as_for_range().is_none()\n            & last_body_expr.as_assert_eq().is_none()\n            & last_body_expr.as_let().is_none() {\n            let unused_return_value_name = f\"_{return_value_var_name}\".quoted_contents();\n            body = body_without_return.push_back(\n                quote { let $unused_return_value_name = $last_body_expr; }.as_expr().unwrap(),\n            );\n        }\n        quote {}\n    };\n\n    let context_finish = quote { context.finish() };\n\n    let to_prepend = quote {\n        $args_hasher\n        $context_creation\n        $assert_initializer\n        $init_check\n        $internal_check\n        $view_check\n        $storage_init\n        $message_discovery_call\n    };\n\n    let to_append = quote {\n        $return_value\n        $mark_as_initialized\n        $context_finish\n    };\n    let modified_body = modify_fn_body(body, to_prepend, to_append);\n    f.set_body(modified_body);\n    f.set_return_type(\n        quote { dep::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs }\n            .as_type(),\n    );\n    f.set_return_data();\n\n    fn_abi\n}\n\npub(crate) comptime fn transform_public(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // If a function is further modified as unconstrained, we throw an error\n    if f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[public] but marked as unconstrained, remove unconstrained keyword\",\n        );\n    }\n\n    let module_has_initializer = module_has_initializer(f.module());\n    let module_has_storage = module_has_storage(f.module());\n\n    // Public functions undergo a lot of transformations from their Aztec.nr form.\n    let original_params = f.parameters();\n    let args_len = original_params\n        .map(|(name, typ): (Quoted, Type)| {\n            generate_serialize_to_fields(name, typ, false).0.len()\n        })\n        .fold(0, |acc: u32, val: u32| acc + val);\n\n    // Unlike in the private case, in public the `context` does not need to receive the hash of the original params.\n    let context_creation = quote {\n        let mut context = dep::aztec::context::public_context::PublicContext::new(|| {\n        // We start from 1 because we skip the selector for the dispatch function.\n        let serialized_args : [Field; $args_len] = dep::aztec::context::public_context::calldata_copy(1, $args_len);\n        dep::aztec::hash::hash_args_array(serialized_args)\n        });\n    };\n\n    // Modifications introduced by the different marker attributes.\n    let internal_check = if is_fn_internal(f) {\n        create_internal_check(f)\n    } else {\n        quote {}\n    };\n\n    let view_check = if is_fn_view(f) {\n        create_view_check(f)\n    } else {\n        quote {}\n    };\n\n    let (assert_initializer, mark_as_initialized) = if is_fn_initializer(f) {\n        (create_assert_correct_initializer_args(f), create_mark_as_initialized(f))\n    } else {\n        (quote {}, quote {})\n    };\n\n    let storage_init = if module_has_storage {\n        // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n        // referenced. We instead ignore 'unused variable' warnings for it.\n        quote {\n            #[allow(unused_variables)]\n            let storage = Storage::init(&mut context);\n        }\n    } else {\n        quote {}\n    };\n\n    // Initialization checks are not included in contracts that don't have initializers.\n    let init_check = if module_has_initializer & !fn_has_noinitcheck(f) & !is_fn_initializer(f) {\n        create_init_check(f)\n    } else {\n        quote {}\n    };\n\n    let to_prepend = quote {\n        $context_creation\n        $assert_initializer\n        $init_check\n        $internal_check\n        $view_check\n        $storage_init\n    };\n\n    let to_append = quote {\n        $mark_as_initialized\n    };\n\n    let body = f.body().as_block().unwrap();\n    let modified_body = modify_fn_body(body, to_prepend, to_append);\n    f.set_body(modified_body);\n\n    // All public functions are automatically made unconstrained, even if they were not marked as such. This is because\n    // instead of compiling into a circuit, they will compile to bytecode that will be later transpiled into AVM\n    // bytecode.\n    f.set_unconstrained(true);\n    f.set_return_public(true);\n\n    fn_abi\n}\n\npub(crate) comptime fn transform_utility(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // Check if function is marked as unconstrained\n    if !f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[utility] but not marked as unconstrained, add unconstrained keyword\",\n        );\n    }\n\n    // Create utility context\n    let context_creation =\n        quote { let mut context = dep::aztec::context::utility_context::UtilityContext::new(); };\n    let module_has_storage = module_has_storage(f.module());\n\n    // Initialize Storage if module has storage\n    let storage_init = if module_has_storage {\n        quote {\n            // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n            // referenced. We instead ignore 'unused variable' warnings for it.\n            #[allow(unused_variables)]\n            let storage = Storage::init(context);\n        }\n    } else {\n        quote {}\n    };\n\n    // All utility functions perform message discovery, since they may need to access private notes that would be\n    // found during this process or they may be used to sync private events from TypeScript\n    // (`sync_private_state` function gets invoked by PXE::getPrivateEvents function).\n    let message_discovery_call = create_message_discovery_call();\n\n    // Inject context creation, storage initialization, and message discovery call at the beginning of the function\n    // body.\n    let to_prepend = quote {\n        $context_creation\n        $storage_init\n        $message_discovery_call\n    };\n    let body = f.body().as_block().unwrap();\n    let modified_body = modify_fn_body(body, to_prepend, quote {});\n    f.set_body(modified_body);\n\n    f.set_return_public(true);\n\n    fn_abi\n}\n\ncomptime fn create_internal_check(f: FunctionDefinition) -> Quoted {\n    let name = f.name();\n    let assertion_message = f\"Function {name} can only be called internally\";\n    quote { assert(context.msg_sender() == context.this_address(), $assertion_message); }\n}\n\ncomptime fn create_view_check(f: FunctionDefinition) -> Quoted {\n    let name = f.name();\n    let assertion_message = f\"Function {name} can only be called statically\";\n    if is_fn_private(f) {\n        // Here `context` is of type context::PrivateContext\n        quote { assert(context.inputs.call_context.is_static_call == true, $assertion_message); }\n    } else {\n        // Here `context` is of type context::PublicContext\n        quote { assert(context.is_static_call(), $assertion_message); }\n    }\n}\n\ncomptime fn create_assert_correct_initializer_args(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::assert_initialization_matches_address_preimage_{fn_visibility}(context);\"\n        .quoted_contents()\n}\n\ncomptime fn create_mark_as_initialized(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::mark_as_initialized_{fn_visibility}(&mut context);\"\n        .quoted_contents()\n}\n\ncomptime fn create_init_check(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::assert_is_initialized_{fn_visibility}(&mut context);\"\n        .quoted_contents()\n}\n\n/// Injects a call to `aztec::messages::discovery::discover_new_messages`, causing for new notes to be added to PXE and made\n/// available for the current execution.\npub(crate) comptime fn create_message_discovery_call() -> Quoted {\n    quote {\n        /// Safety: message discovery returns nothing and is performed solely for its side-effects. It is therefore\n        /// always safe to call.\n        unsafe {\n            dep::aztec::messages::discovery::discover_new_messages(\n                context.this_address(),\n                _compute_note_hash_and_nullifier,\n            );\n        };\n    }\n}\n\n/// Checks if each function in the module is marked with either #[private], #[public], #[utility],\n/// #[contract_library_method], or #[test]. Non-macroified functions are not allowed in contracts.\npub(crate) comptime fn check_each_fn_macroified(m: Module) {\n    for f in m.functions() {\n        let name = f.name();\n        if !is_fn_private(f)\n            & !is_fn_public(f)\n            & !is_fn_utility(f)\n            & !is_fn_contract_library_method(f)\n            & !is_fn_test(f) {\n            panic(\n                f\"Function {name} must be marked as either #[private], #[public], #[utility], #[contract_library_method], or #[test]\",\n            );\n        }\n    }\n}\n"
    },
    "109": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v1.0.0-staging.6/noir-projects/aztec-nr/aztec/src/macros/notes.nr",
      "source": "use crate::{macros::utils::AsStrQuote, note::note_getter_options::PropertySelector};\nuse poseidon::poseidon2::Poseidon2Hasher;\nuse protocol_types::meta::{derive_packable_and_get_packed_len, generate_serialize_to_fields};\nuse std::{\n    collections::umap::UHashMap,\n    hash::{BuildHasherDefault, Hash, Hasher},\n    meta::{type_of, unquote},\n};\n\n/// A map from note type to (note_struct_definition, note_packed_len, note_type_id, fields).\n/// `fields` is an array of tuples where each tuple contains the name of the field/struct member (e.g. `amount`\n/// in `TokenNote`), the index of where the packed member starts in the packed note and a flag indicating\n/// whether the field is nullable or not.\npub comptime mut global NOTES: UHashMap<Type, (TypeDefinition, u32, Field, [(Quoted, u32, bool)]), BuildHasherDefault<Poseidon2Hasher>> =\n    UHashMap::default();\n\npub comptime mut global NOTE_TYPE_ID_COUNTER: u32 = 0;\n\n/// The note type id is set by enumerating the note types.\ncomptime fn get_next_note_type_id() -> Field {\n    // We assert that the note type id fits within 7 bits\n    assert(\n        NOTE_TYPE_ID_COUNTER < 128 as u32,\n        \"A contract can contain at most 128 different note types\",\n    );\n\n    let note_type_id = NOTE_TYPE_ID_COUNTER as Field;\n    NOTE_TYPE_ID_COUNTER += 1;\n    note_type_id\n}\n\n/// Generates a quote that implements `Packable` for a given struct `s`.\n/// If the note struct already implements `Packable`, we return an empty quote.\ncomptime fn derive_packable_if_not_implemented_and_get_len(s: TypeDefinition) -> (Quoted, u32) {\n    // We try to get the packed length of the note struct. If it does not implement `Packable`, we get Option::none()\n    let packed_len_typ = std::meta::typ::fresh_type_variable();\n    // We don't care about the result of the implements check. We just want the get the packed length.\n    let _ = s.as_type().implements(\n        quote { crate::protocol_types::traits::Packable<$packed_len_typ> }.as_trait_constraint(),\n    );\n    let maybe_packed_length = packed_len_typ.as_constant();\n\n    if maybe_packed_length.is_some() {\n        // We got some packed length meaning that the note struct implements `Packable`. For this reason we return\n        // an empty quote for the implementation and the packed length.\n        (quote {}, maybe_packed_length.unwrap())\n    } else {\n        // We didn't manage to get the packed length which means the note struct doesn't implement `Packable`\n        // so we derive it and return it along with the packed length.\n        derive_packable_and_get_packed_len(s)\n    }\n}\n\n/// Generates default `NoteType` implementation for a given note struct `s` and returns it as a quote.\n///\n/// impl NoteType for NoteStruct {\n///     fn get_id() -> Field {\n///         ...\n///     }\n/// }\ncomptime fn generate_note_interface(s: TypeDefinition, note_type_id: Field) -> Quoted {\n    let name = s.name();\n\n    quote {\n        impl aztec::note::note_interface::NoteType for $name {\n            fn get_id() -> Field {\n                $note_type_id\n            }\n        }\n    }\n}\n\n/// Generates default `NoteHash` trait implementation for a given note struct `s` and returns it as a quote.\n///\n/// # Generated Implementation\n/// ```\n/// impl NoteHash for NoteStruct {\n///     fn compute_note_hash(self, storage_slot: Field) -> Field { ... }\n///\n///     fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field { ... }\n///\n///     unconstrained fn compute_nullifier_unconstrained(note_hash_for_nullify: Field) -> Field { ... }\n/// }\n/// ```\ncomptime fn generate_note_hash_trait_impl(s: TypeDefinition) -> Quoted {\n    let name = s.name();\n\n    quote {\n        impl aztec::note::note_interface::NoteHash for $name {\n            fn compute_note_hash(self, storage_slot: Field) -> Field {\n                let inputs = aztec::protocol_types::utils::arrays::array_concat(aztec::protocol_types::traits::Packable::pack(self), [storage_slot]);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(inputs, aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_HASH)\n            }\n\n            fn compute_nullifier(\n                self,\n                context: &mut aztec::prelude::PrivateContext,\n                note_hash_for_nullify: Field,\n            ) -> Field {\n                let owner_npk_m = aztec::keys::getters::get_public_keys(self.owner).npk_m;\n                // We invoke hash as a static trait function rather than calling owner_npk_m.hash() directly\n                // in the quote to avoid \"trait not in scope\" compiler warnings.\n                let owner_npk_m_hash = aztec::protocol_types::traits::Hash::hash(owner_npk_m);\n                let secret = context.request_nsk_app(owner_npk_m_hash);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(\n                    [note_hash_for_nullify, secret],\n                    aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n                )\n            }\n\n            unconstrained fn compute_nullifier_unconstrained(\n                self,\n                note_hash_for_nullify: Field,\n            ) -> Field {\n                let owner_npk_m = aztec::keys::getters::get_public_keys(self.owner).npk_m;\n                // We invoke hash as a static trait function rather than calling owner_npk_m.hash() directly\n                // in the quote to avoid \"trait not in scope\" compiler warnings.\n                let owner_npk_m_hash = aztec::protocol_types::traits::Hash::hash(owner_npk_m);\n                let secret = aztec::keys::getters::get_nsk_app(owner_npk_m_hash);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(\n                    [note_hash_for_nullify, secret],\n                    aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n                )\n            }\n        }\n    }\n}\n\n/// Generates note properties struct for a given note struct `s`.\n///\n/// Example:\n/// ```\n/// struct TokenNoteProperties {\n///     amount: aztec::note::note_getter_options::PropertySelector,\n///     npk_m_hash: aztec::note::note_getter_options::PropertySelector\n///     randomness: aztec::note::note_getter_options::PropertySelector\n/// }\n///\n/// impl aztec::note::note_interface::NoteProperties<TokenNoteProperties> for TokenNote {\n///     fn properties() -> TokenNoteProperties {\n///         Self {\n///             amount: aztec::note::note_getter_options::PropertySelector { index: 0, offset: 0, length: 32 },\n///             npk_m_hash: aztec::note::note_getter_options::PropertySelector { index: 1, offset: 0, length: 32 },\n///             randomness: aztec::note::note_getter_options::PropertySelector { index: 2, offset: 0, length: 32 }\n///         }\n///     }\n/// }\n/// ```\ncomptime fn generate_note_properties(s: TypeDefinition) -> Quoted {\n    let name = s.name();\n\n    let struct_name = f\"{name}Properties\".quoted_contents();\n\n    let property_selector_type = type_of(PropertySelector { index: 0, offset: 0, length: 0 });\n\n    let note_fields = s.fields_as_written();\n\n    let properties_types = note_fields\n        .map(|(name, _, _)| quote { pub $name: $property_selector_type })\n        .join(quote {,});\n\n    // TODO #8694: Properly handle non-field types https://github.com/AztecProtocol/aztec-packages/issues/8694\n    let mut properties_list = &[];\n    for i in 0..note_fields.len() {\n        let (name, _, _) = note_fields[i];\n        properties_list = properties_list.push_back(\n            quote { $name: aztec::note::note_getter_options::PropertySelector { index: $i, offset: 0, length: 32 } },\n        );\n    }\n\n    let properties = properties_list.join(quote {,});\n\n    quote {\n        pub struct $struct_name {\n            $properties_types\n        }\n\n        impl aztec::note::note_interface::NoteProperties<$struct_name> for $name {\n            fn properties() -> $struct_name {\n                $struct_name {\n                    $properties\n                }\n            }\n        }\n    }\n}\n\n/// Generates note export for a given note struct `s`. The export is a global variable that contains note type id,\n/// note name and information about note fields (field name, index and whether the field is nullable or not).\n///\n/// Example:\n/// ```\n/// struct TokenNoteFields_5695262104 {\n///     amount: aztec::note::note_field::NoteField,\n///     owner: aztec::note::note_field::NoteField\n/// }\n///\n/// #[abi(notes)]\n/// global TokenNote_EXPORTS_5695262104: (Field, str<8>, TokenNoteFields_5695262104) = (\n///     0,\n///     \"TokenNote\",\n///     TokenNoteFields_5695262104 {\n///         amount: aztec::note::note_field::NoteField { index: 0, nullable: false },\n///         owner: aztec::note::note_field::NoteField { index: 1, nullable: false }\n///     }\n/// );\n///\n/// Randomly looking value at the end of the export name is generated by hashing the note struct type and is included\n/// to prevent naming collisions in case there are multiple notes with the same name imported in a contract.\npub(crate) comptime fn generate_note_export(\n    s: TypeDefinition,\n    note_type_id: Field,\n    fields: [(Quoted, u32, bool)],\n) -> Quoted {\n    let name = s.name();\n    let mut hasher = Poseidon2Hasher::default();\n    s.as_type().hash(&mut hasher);\n    let hash = hasher.finish() as u32;\n    let global_export_name = f\"{name}_EXPORTS_{hash}\".quoted_contents();\n    let note_fields_name = f\"{name}Fields_{hash}\".quoted_contents();\n    let (note_name_as_str, _) = name.as_str_quote();\n    let note_name_str_len = unquote!(quote { $note_name_as_str.as_bytes().len() });\n\n    let mut note_fields = &[];\n    let mut note_field_constructors = &[];\n    for field in fields {\n        let (name, index, nullable) = field;\n        note_fields = note_fields.push_back(quote { $name: aztec::note::note_field::NoteField });\n        note_field_constructors = note_field_constructors.push_back(\n            quote { $name: aztec::note::note_field::NoteField { index: $index, nullable: $nullable }},\n        );\n    }\n\n    let note_fields = note_fields.join(quote {,});\n    let note_field_constructors = note_field_constructors.join(quote {,});\n\n    quote {\n        pub struct $note_fields_name {\n            pub $note_fields\n        }\n\n        #[abi(notes)]\n        global $global_export_name: (Field, str<$note_name_str_len>, $note_fields_name) = ($note_type_id, $note_name_as_str, $note_fields_name { $note_field_constructors });\n    }\n}\n\n/// Registers a note struct `note` with the given `note_packed_len`, `note_type_id`, `fixed_fields` and\n/// `nullable_fields` in the global `NOTES` map.\ncomptime fn register_note(\n    note: TypeDefinition,\n    note_packed_len: u32,\n    note_type_id: Field,\n    fixed_fields: [(Quoted, Type, u32)],\n    nullable_fields: [(Quoted, Type, u32)],\n) {\n    let mut fields = &[];\n    for field in fixed_fields {\n        let (name, _, index) = field;\n        fields = fields.push_back((name, index, false));\n    }\n    for field in nullable_fields {\n        let (name, _, index) = field;\n        fields = fields.push_back((name, index, true));\n    }\n\n    NOTES.insert(note.as_type(), (note, note_packed_len, note_type_id, fields));\n}\n\n/// Separates note struct members into fixed and nullable ones. It also stores the index of where each struct member\n/// starts in the serialized note. Note that each struct member can occupy multiple fields (as in Field type).\ncomptime fn index_note_fields(\n    s: TypeDefinition,\n    nullable_fields: [Quoted],\n) -> ([(Quoted, Type, u32)], [(Quoted, Type, u32)]) {\n    let mut indexed_fixed_fields: [(Quoted, Type, u32)] = &[];\n    let mut indexed_nullable_fields = &[];\n    let mut counter: u32 = 0;\n    for field in s.fields_as_written() {\n        let (name, typ, _) = field;\n        if nullable_fields.all(|field| field != name) {\n            indexed_fixed_fields = indexed_fixed_fields.push_back((name, typ, counter));\n        } else {\n            indexed_nullable_fields = indexed_nullable_fields.push_back((name, typ, counter));\n        }\n        let (serialization_fields, _) = generate_serialize_to_fields(name, typ, true);\n        // Each struct member can occupy multiple fields so we need to increment the counter accordingly\n        counter += serialization_fields.len();\n    }\n    (indexed_fixed_fields, indexed_nullable_fields)\n}\n\n/// Generates the following:\n/// - NoteTypeProperties\n/// - NoteType trait implementation\n/// - NoteHash trait implementation\n/// - Packable implementation\n///\n/// Registers the note in the global `NOTES` map.\n///\n/// For more details on the generated code, see the individual functions.\npub comptime fn note(s: TypeDefinition) -> Quoted {\n    assert_has_owner(s);\n\n    let (indexed_fixed_fields, indexed_nullable_fields) = index_note_fields(s, &[]);\n\n    let note_properties = generate_note_properties(s);\n    let note_type_id = get_next_note_type_id();\n    let note_interface_impl = generate_note_interface(s, note_type_id);\n    let note_hash_impl = generate_note_hash_trait_impl(s);\n    let (packable_impl, note_packed_len) = derive_packable_if_not_implemented_and_get_len(s);\n\n    register_note(\n        s,\n        note_packed_len,\n        note_type_id,\n        indexed_fixed_fields,\n        indexed_nullable_fields,\n    );\n\n    quote {\n        $note_properties\n        $note_interface_impl\n        $note_hash_impl\n        $packable_impl\n    }\n}\n\n/// Generates code for a custom note implementation that requires specialized note hash or nullifier computation.\n///\n/// # Generated Code\n/// - NoteTypeProperties: Defines the structure and properties of note fields\n/// - NoteType trait implementation: Provides the note type ID\n/// - Packable implementation: Enables serialization/deserialization of the note\n///\n/// # Registration\n/// Registers the note in the global `NOTES` map with:\n/// - Note type ID\n/// - Packed length\n/// - Field indices and nullability\n///\n/// # Use Cases\n/// Use this macro when implementing a note that needs custom:\n/// - Note hash computation logic\n/// - Nullifier computation logic\n///\n/// The macro omits generating default NoteHash trait implementation, allowing you to provide your own.\n///\n/// # Example\n/// ```\n/// #[custom_note]\n/// struct CustomNote {\n///     value: Field,\n///     metadata: Field\n/// }\n///\n/// impl NoteHash for CustomNote {\n///     // Custom note hash computation...\n///     fn compute_note_hash(...) -> Field { ... }\n///\n///     // Custom nullifier computation...\n///     fn compute_nullifier(...) -> Field { ... }\n///     fn compute_nullifier_unconstrained(...) -> Field { ... }\n/// }\n/// ```\npub comptime fn custom_note(s: TypeDefinition) -> Quoted {\n    let (packable_impl, note_packed_len) = derive_packable_if_not_implemented_and_get_len(s);\n    let note_type_id = get_next_note_type_id();\n\n    let (indexed_fixed_fields, indexed_nullable_fields) = index_note_fields(s, &[]);\n    register_note(\n        s,\n        note_packed_len,\n        note_type_id,\n        indexed_fixed_fields,\n        indexed_nullable_fields,\n    );\n\n    let note_properties = generate_note_properties(s);\n    let note_interface_impl = generate_note_interface(s, note_type_id);\n\n    quote {\n        $note_properties\n        $note_interface_impl\n        $packable_impl\n    }\n}\n\n/// Asserts that the note has an 'owner' field.\n///\n/// We require notes implemented with #[note] macro macro to have an 'owner' field because our\n/// auto-generated nullifier functions expect it. This requirement is most likely only temporary.\ncomptime fn assert_has_owner(note: TypeDefinition) {\n    let fields = note.fields_as_written();\n    let mut has_owner = false;\n    for i in 0..fields.len() {\n        let (field_name, _, _) = fields[i];\n        if field_name == quote { owner } {\n            has_owner = true;\n            break;\n        }\n    }\n    assert(\n        has_owner,\n        \"Note must have an 'owner' field. If your notes have no owner, use #[custom_note] insteadof #[note] and implement the NoteHashing trait manually.\",\n    );\n}\n"
    },
    "110": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v1.0.0-staging.6/noir-projects/aztec-nr/aztec/src/macros/storage.nr",
      "source": "use poseidon::poseidon2::Poseidon2Hasher;\nuse std::{collections::umap::UHashMap, hash::BuildHasherDefault};\n\nuse super::utils::AsStrQuote;\nuse super::utils::get_storage_size;\n\n/// Stores a map from a module to the name of the struct that describes its storage layout.\n/// This is then used when generating a `storage_layout()` getter on the contract struct.\npub comptime mut global STORAGE_LAYOUT_NAME: UHashMap<Module, Quoted, BuildHasherDefault<Poseidon2Hasher>> =\n    UHashMap::default();\n\n/// Marks a struct as the one describing the storage layout of a contract.\n///\n/// The contract's storage is accessed via the `storage` variable, which will will automatically be made available in\n/// all functions as an instance of the struct this macro was applied to.\n///\n/// Only a single struct in the entire contract should have this macro (or `storage_no_init`) applied to it, and the\n/// struct has to be called 'Storage'.\npub comptime fn storage(s: TypeDefinition) -> Quoted {\n    let struct_name = s.name();\n    if struct_name != quote { Storage } {\n        panic(\n            f\"The #[storage] macro can only be applied to a struct with name 'Storage', got '{struct_name}' instead.\",\n        )\n    }\n\n    assert(\n        !s.has_named_attribute(\"storage_no_init\"),\n        f\"Only one of #[storage] and #[storage_no_init] can be applied to the Storage struct.\",\n    );\n\n    // This macro performs three things:\n    //  - it marks the contract as having storage, so that `macros::utils::module_has_storage` will return true and\n    //    functions will have the storage variable injected and initialized via the `init` function.\n    //  - it implements said `init` function by allocating appropriate storage slots to each state variable.\n    //  - it exposes the storage layout by creating a `StorageLayout` struct that is exposed via the `abi(storage)`\n    //    macro.\n    let mut slot: u32 = 1;\n    let mut storage_vars_constructors = &[];\n    let mut storage_layout_fields = &[];\n    let mut storage_layout_constructors = &[];\n\n    // TODO(#8658): uncomment the code below to inject the Context type parameter.\n    //let mut new_storage_fields = &[];\n    //let context_generic = s.add_generic(\"Context\");\n    for field in s.fields_as_written() {\n        // FIXME: This doesn't handle field types with generics\n        let (name, typ, _) = field;\n        let (storage_field_constructor, storage_size) =\n            generate_storage_field_constructor(typ, quote { $slot });\n        storage_vars_constructors =\n            storage_vars_constructors.push_back(quote { $name: $storage_field_constructor });\n        // We have `Storable` in a separate `.nr` file instead of defining it in the last quote of this function\n        // because that way a dev gets a more reasonable error if he defines a struct with the same name in\n        // a contract.\n        storage_layout_fields =\n            storage_layout_fields.push_back(quote { pub $name: dep::aztec::prelude::Storable });\n        storage_layout_constructors = storage_layout_constructors.push_back(\n            quote { $name: dep::aztec::prelude::Storable { slot: $slot } },\n        );\n        //let with_context_generic = add_context_generic(typ, context_generic);\n        //println(with_context_generic);\n        //new_storage_fields = new_storage_fields.push_back((name,  with_context_generic ));\n        slot += storage_size;\n    }\n\n    //s.set_fields(new_storage_fields);\n    let storage_vars_constructors = storage_vars_constructors.join(quote {,});\n    let storage_impl = quote {\n        impl<Context> Storage<Context> {\n            fn init(context: Context) -> Self {\n                Self {\n                    $storage_vars_constructors\n                }\n            }\n        }\n    };\n\n    let storage_layout_fields = storage_layout_fields.join(quote {,});\n    let storage_layout_constructors = storage_layout_constructors.join(quote {,});\n\n    let module = s.module();\n    let module_name = module.name();\n    let storage_layout_name = f\"STORAGE_LAYOUT_{module_name}\".quoted_contents();\n    let (module_name_str, module_name_len) = module_name.as_str_quote();\n    STORAGE_LAYOUT_NAME.insert(module, storage_layout_name);\n\n    quote {\n        $storage_impl\n\n        pub struct StorageLayoutFields {\n            $storage_layout_fields\n        }\n\n        pub struct StorageLayout<let N: u32> {\n            pub contract_name: str<N>,\n            pub fields: StorageLayoutFields\n        }\n\n        #[abi(storage)]\n        pub global $storage_layout_name: StorageLayout<$module_name_len> = StorageLayout {\n            contract_name: $module_name_str,\n            fields: StorageLayoutFields { $storage_layout_constructors }\n        };\n    }\n}\n\n/// Same as `storage`, except the user is in charge of providing an implementation of the `init` constructor function\n/// with signature `fn init<Context>(context: Context) -> Self`, which allows for manual control of storage slot\n/// allocation. Similarly, no `StorageLayout` struct will be created.\n///\n/// The contract's storage is accessed via the `storage` variable, which will will automatically be made available in\n/// all functions as an instance of the struct this macro was applied to.\n///\n/// Only a single struct in the entire contract can have this macro (or storage_no_init) applied to it, and the struct\n/// has to be called 'Storage'.\npub comptime fn storage_no_init(s: TypeDefinition) {\n    // All `storage` does is provide the `init` implementation, so we don't need to do anything here. Applying this\n    // macro however will cause for `macros::utils::module_has_storage` to return true, resulting in the injection of\n    // the `storage` variable.\n\n    // We do need to make sure that the type is called Storage, since we'll do `Storage::init` later on.\n\n    if s.name() != quote { Storage } {\n        let name = s.name();\n        panic(\n            f\"The #[storage_no_init] macro can only be applied to a struct with name 'Storage', got '{name}' instead.\",\n        )\n    }\n\n    assert(\n        !s.has_named_attribute(\"storage\"),\n        f\"Only one of #[storage] and #[storage_no_init] can be applied to the Storage struct.\",\n    );\n}\n\n/// Returns the expression required to initialize a state variable with a given slot, along with its serialization size,\n/// i.e. how many contiguous storage slots the variable requires.\ncomptime fn generate_storage_field_constructor(typ: Type, slot: Quoted) -> (Quoted, u32) {\n    assert(\n        typ.as_data_type().is_some(),\n        \"Storage containers must be generic structs of the form `Container<_, Context>`, or Map<Key, _, Context>\",\n    );\n    let (container_struct, generics) = typ.as_data_type().unwrap();\n    let struct_name = container_struct.name();\n\n    let constructor = if is_storage_map(typ) {\n        // Map state variables recursively initialize their contents - this includes nested maps.\n        let (value_constructor, _) =\n            generate_storage_field_constructor(generics[1], quote { slot });\n\n        quote { $struct_name::new(context, $slot, | context, slot | { $value_constructor }) }\n    } else {\n        // We assume below that all state variables implement `fn new<Context>(context: Context, slot: Field) -> Self`.\n        quote { $struct_name::new(context, $slot)}\n    };\n\n    (constructor, get_storage_size(typ))\n}\n\n/// Returns true if `typ` is `state_vars::map::Map`.\ncomptime fn is_storage_map(typ: Type) -> bool {\n    if typ.as_data_type().is_some() {\n        let (def, generics) = typ.as_data_type().unwrap();\n        let maybe_map = if (def.name() == quote { Map }) & (generics.len() == 3) {\n            let maybe_key = generics[0];\n            let maybe_value = generics[1];\n            let maybe_context = generics[2];\n            quote { crate::state_vars::map::Map<$maybe_key, $maybe_value, $maybe_context> }.as_type()\n        } else {\n            quote {()}.as_type()\n        };\n        typ == maybe_map\n    } else {\n        false\n    }\n}\n\ncomptime fn add_context_generic(typ: Type, context_generic: Type) -> Type {\n    let (def, mut generics) = typ.as_data_type().expect(\n        f\"Storage containers must be generic structs of the form `Container<..., Context>`\",\n    );\n    let name = def.name();\n\n    if is_storage_map(typ) {\n        generics[generics.len() - 2] = add_context_generic(generics[1], context_generic);\n        generics[generics.len() - 1] = context_generic;\n    } else {\n        generics[generics.len() - 1] = context_generic;\n    }\n\n    let generics = generics.map(|typ: Type| quote {$typ}).join(quote {,});\n    quote { $name<$generics> }.as_type()\n}\n"
    },
    "112": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v1.0.0-staging.6/noir-projects/aztec-nr/aztec/src/messages/discovery/mod.nr",
      "source": "use protocol_types::{address::AztecAddress, debug_log::{debug_log, debug_log_format}};\n\npub mod nonce_discovery;\npub mod partial_notes;\npub mod private_events;\npub mod private_notes;\npub mod process_message;\n\nuse crate::{\n    messages::{\n        discovery::{private_notes::MAX_NOTE_PACKED_LEN, process_message::do_process_message},\n        processing::{\n            get_private_logs, pending_tagged_log::PendingTaggedLog,\n            validate_enqueued_notes_and_events,\n        },\n    },\n    utils::array,\n};\n\npub struct NoteHashAndNullifier {\n    /// The result of NoteHash::compute_note_hash\n    pub note_hash: Field,\n    /// The result of NoteHash::compute_nullifier_unconstrained (since all of message discovery is unconstrained)\n    pub inner_nullifier: Field,\n}\n\n/// A function which takes a note's packed content, address of the emitting contract, note nonce, storage slot and note\n/// type ID and attempts to compute its note hash (not hashed by note nonce nor siloed by address) and inner nullifier\n/// (not siloed by address).\n///\n/// This function must be user-provided as its implementation requires knowledge of how note type IDs are allocated in a\n/// contract. The `#[aztec]` macro automatically creates such a contract library method called\n/// `_compute_note_hash_and_nullifier`, which looks something like this:\n///\n/// ```\n/// |packed_note, contract_address, note_nonce, storage_slot, note_type_id| {\n///     if note_type_id == MyNoteType::get_id() {\n///         assert(packed_note.len() == MY_NOTE_TYPE_SERIALIZATION_LENGTH);\n///\n///         let note = MyNoteType::unpack(aztec::utils::array::subarray(packed_note.storage(), 0));\n///\n///         let note_hash = note.compute_note_hash(storage_slot);\n///         let note_hash_for_nullify = aztec::note::utils::compute_note_hash_for_nullify(\n///             RetrievedNote{ note, contract_address, metadata: SettledNoteMetadata::new(note_nonce).into() },\n///             storage_slot\n///         );\n///\n///         let inner_nullifier = note.compute_nullifier_unconstrained(note_hash_for_nullify);\n///\n///         Option::some(\n///             aztec::messages::discovery::NoteHashAndNullifier {\n///                 note_hash, inner_nullifier\n///             }\n///         )\n///     } else if note_type_id == MyOtherNoteType::get_id() {\n///           ... // Similar to above but calling MyOtherNoteType::unpack_content\n///     } else {\n///         Option::none() // Unknown note type ID\n///     };\n/// }\n/// ```\ntype ComputeNoteHashAndNullifier<Env> = unconstrained fn[Env](/* packed_note */BoundedVec<Field, MAX_NOTE_PACKED_LEN>, /* storage_slot */ Field, /* note_type_id */ Field, /* contract_address */ AztecAddress, /* note nonce */ Field) -> Option<NoteHashAndNullifier>;\n\n/// Performs the message discovery process, in which private are downloaded and inspected to find new private notes,\n/// partial notes and events, etc., and pending partial notes are processed to search for their completion logs.\n/// This is the mechanism via which a contract updates its knowledge of its private state.\n///\n/// Receives the address of the contract on which discovery is performed along with its\n/// `compute_note_hash_and_nullifier` function.\npub unconstrained fn discover_new_messages<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    debug_log(\"Performing message discovery\");\n\n    // First we process all private logs, which can contain different kinds of messages e.g. private notes, partial\n    // notes, private events, etc.\n    let mut logs = get_private_logs(contract_address);\n    logs.for_each(|i, pending_tagged_log: PendingTaggedLog| {\n        debug_log_format(\n            \"Processing log with tag {0}\",\n            [pending_tagged_log.log.get(0)],\n        );\n\n        // We remove the tag from the pending tagged log and process the message ciphertext contained in it.\n        let message_ciphertext = array::subbvec(pending_tagged_log.log, 1);\n\n        do_process_message(\n            contract_address,\n            compute_note_hash_and_nullifier,\n            message_ciphertext,\n            pending_tagged_log.context,\n        );\n        logs.remove(i);\n    });\n\n    // Then we process all pending partial notes, regardless of whether they were found in the current or previous\n    // executions.\n    partial_notes::fetch_and_process_partial_note_completion_logs(\n        contract_address,\n        compute_note_hash_and_nullifier,\n    );\n\n    // Finally we validate all notes and events that were found as part of the previous processes, resulting in them\n    // being added to PXE's database and retrievable via oracles (get_notes) and our TS API (PXE::getPrivateEvents).\n    validate_enqueued_notes_and_events(contract_address);\n}\n"
    },
    "113": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v1.0.0-staging.6/noir-projects/aztec-nr/aztec/src/messages/discovery/nonce_discovery.nr",
      "source": "use crate::messages::discovery::{ComputeNoteHashAndNullifier, private_notes::MAX_NOTE_PACKED_LEN};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::MAX_NOTE_HASHES_PER_TX,\n    debug_log::debug_log_format,\n    hash::{compute_note_hash_nonce, compute_siloed_note_hash, compute_unique_note_hash},\n    traits::ToField,\n};\n\n/// A struct with the discovered information of a complete note, required for delivery to PXE. Note that this is *not*\n/// the complete note information, since it does not include content, storage slot, etc.\npub struct DiscoveredNoteInfo {\n    pub note_nonce: Field,\n    pub note_hash: Field,\n    pub inner_nullifier: Field,\n}\n\n/// Searches for note nonces that will result in a note that was emitted in a transaction. While rare, it is possible\n/// for multiple notes to have the exact same packed content and storage slot but different nonces, resulting in\n/// different unique note hashes. Because of this this function returns a *vector* of discovered notes, though in most\n/// cases it will contain a single element.\n///\n/// Due to how nonces are computed, this function requires knowledge of the transaction in which the note was created,\n/// more specifically the list of all unique note hashes in it plus the value of its first nullifier.\npub unconstrained fn attempt_note_nonce_discovery<Env>(\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n) -> BoundedVec<DiscoveredNoteInfo, MAX_NOTE_HASHES_PER_TX> {\n    let discovered_notes = &mut BoundedVec::new();\n\n    debug_log_format(\n        \"Attempting nonce discovery on {0} potential notes on contract {1} for storage slot {2}\",\n        [unique_note_hashes_in_tx.len() as Field, contract_address.to_field(), storage_slot],\n    );\n\n    // We need to find nonces (typically just one) that result in a note hash that, once siloed into a unique note hash,\n    // is one of the note hashes created by the transaction.\n    unique_note_hashes_in_tx.for_eachi(|i, expected_unique_note_hash| {\n        // Nonces are computed by hashing the first nullifier in the transaction with the index of the note in the\n        // new note hashes array. We therefore know for each note in every transaction what its nonce is.\n        let candidate_nonce = compute_note_hash_nonce(first_nullifier_in_tx, i);\n\n        // Given note nonce, note content and metadata, we can compute the note hash and silo it to check if it matches\n        // the note hash at the array index we're currently processing.\n        // TODO(#11157): handle failed note_hash_and_nullifier computation\n        let hashes = compute_note_hash_and_nullifier(\n            packed_note,\n            storage_slot,\n            note_type_id,\n            contract_address,\n            candidate_nonce,\n        )\n            .expect(f\"Failed to compute a note hash for note type {note_type_id}\");\n\n        let siloed_note_hash = compute_siloed_note_hash(contract_address, hashes.note_hash);\n        let unique_note_hash = compute_unique_note_hash(candidate_nonce, siloed_note_hash);\n\n        if unique_note_hash == expected_unique_note_hash {\n            // Note that while we did check that the note hash is the preimage of the expected unique note hash, we\n            // perform no validations on the nullifier - we fundamentally cannot, since only the application knows\n            // how to compute nullifiers. We simply trust it to have provided the correct one: if it hasn't, then\n            // PXE may fail to realize that a given note has been nullified already, and calls to the application\n            // could result in invalid transactions (with duplicate nullifiers). This is not a concern because an\n            // application already has more direct means of making a call to it fail the transaction.\n            discovered_notes.push(\n                DiscoveredNoteInfo {\n                    note_nonce: candidate_nonce,\n                    note_hash: hashes.note_hash,\n                    inner_nullifier: hashes.inner_nullifier,\n                },\n            );\n\n            // We don't exit the loop - it is possible (though rare) for the exact same note content to be present\n            // multiple times in the same transaction with different nonces. This typically doesn't happen due to\n            // notes containing random values in order to hide their contents.\n        }\n    });\n\n    debug_log_format(\n        \"Found valid nonces for a total of {0} notes\",\n        [discovered_notes.len() as Field],\n    );\n\n    *discovered_notes\n}\n\nmod test {\n    use crate::{\n        messages::discovery::{NoteHashAndNullifier, private_notes::MAX_NOTE_PACKED_LEN},\n        note::{\n            note_interface::{NoteHash, NoteType},\n            note_metadata::SettledNoteMetadata,\n            retrieved_note::RetrievedNote,\n            utils::compute_note_hash_for_nullify,\n        },\n        oracle::random::random,\n        test::mocks::mock_note::MockNote,\n        utils::array,\n    };\n\n    use dep::protocol_types::{\n        address::AztecAddress,\n        hash::{compute_note_hash_nonce, compute_siloed_note_hash, compute_unique_note_hash},\n        traits::{FromField, Packable},\n    };\n\n    use super::attempt_note_nonce_discovery;\n\n    // This implementation could be simpler, but this serves as a nice example of the expected flow in a real\n    // implementation, and as a sanity check that the interface is sufficient.\n    unconstrained fn compute_note_hash_and_nullifier(\n        packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n        storage_slot: Field,\n        note_type_id: Field,\n        contract_address: AztecAddress,\n        note_nonce: Field,\n    ) -> Option<NoteHashAndNullifier> {\n        if note_type_id == MockNote::get_id() {\n            let note = MockNote::unpack(array::subarray(packed_note.storage(), 0));\n            let note_hash = note.compute_note_hash(storage_slot);\n\n            let note_hash_for_nullify = compute_note_hash_for_nullify(\n                RetrievedNote {\n                    note,\n                    contract_address,\n                    metadata: SettledNoteMetadata::new(note_nonce).into(),\n                },\n                storage_slot,\n            );\n\n            let inner_nullifier = note.compute_nullifier_unconstrained(note_hash_for_nullify);\n\n            Option::some(NoteHashAndNullifier { note_hash, inner_nullifier })\n        } else {\n            Option::none()\n        }\n    }\n\n    global VALUE: Field = 7;\n    global FIRST_NULLIFIER_IN_TX: Field = 47;\n    global CONTRACT_ADDRESS: AztecAddress = AztecAddress::from_field(13);\n    global STORAGE_SLOT: Field = 99;\n\n    #[test]\n    unconstrained fn no_note_hashes() {\n        let unique_note_hashes_in_tx = BoundedVec::new();\n        let packed_note = BoundedVec::new();\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            MockNote::get_id(),\n            packed_note,\n        );\n\n        assert_eq(discovered_notes.len(), 0);\n    }\n\n    #[test(should_fail_with = \"Failed to compute a note hash\")]\n    unconstrained fn failed_hash_computation() {\n        let unique_note_hashes_in_tx = BoundedVec::from_array([random()]);\n        let packed_note = BoundedVec::new();\n        let note_type_id = 0; // This note type id is unknown to compute_note_hash_and_nullifier\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            note_type_id,\n            packed_note,\n        );\n\n        assert_eq(discovered_notes.len(), 0);\n    }\n\n    struct NoteAndData {\n        note: MockNote,\n        note_nonce: Field,\n        note_hash: Field,\n        unique_note_hash: Field,\n        inner_nullifier: Field,\n    }\n\n    unconstrained fn construct_note(value: Field, note_index_in_tx: u32) -> NoteAndData {\n        let note_nonce = compute_note_hash_nonce(FIRST_NULLIFIER_IN_TX, note_index_in_tx);\n\n        let retrieved_note = MockNote::new(value)\n            .contract_address(CONTRACT_ADDRESS)\n            .note_metadata(SettledNoteMetadata::new(note_nonce).into())\n            .build_retrieved_note();\n        let note = retrieved_note.note;\n\n        let note_hash = note.compute_note_hash(STORAGE_SLOT);\n        let unique_note_hash = compute_unique_note_hash(\n            note_nonce,\n            compute_siloed_note_hash(CONTRACT_ADDRESS, note_hash),\n        );\n        let inner_nullifier = note.compute_nullifier_unconstrained(compute_note_hash_for_nullify(\n            retrieved_note,\n            STORAGE_SLOT,\n        ));\n\n        NoteAndData { note, note_nonce, note_hash, unique_note_hash, inner_nullifier }\n    }\n\n    #[test]\n    unconstrained fn single_note() {\n        let note_index_in_tx = 2;\n        let note_and_data = construct_note(VALUE, note_index_in_tx);\n\n        let mut unique_note_hashes_in_tx = BoundedVec::from_array([\n            random(), random(), random(), random(), random(), random(), random(),\n        ]);\n        unique_note_hashes_in_tx.set(note_index_in_tx, note_and_data.unique_note_hash);\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            MockNote::get_id(),\n            BoundedVec::from_array(note_and_data.note.pack()),\n        );\n\n        assert_eq(discovered_notes.len(), 1);\n        let discovered_note = discovered_notes.get(0);\n\n        assert_eq(discovered_note.note_nonce, note_and_data.note_nonce);\n        assert_eq(discovered_note.note_hash, note_and_data.note_hash);\n        assert_eq(discovered_note.inner_nullifier, note_and_data.inner_nullifier);\n    }\n\n    #[test]\n    unconstrained fn multiple_notes_same_preimage() {\n        let first_note_index_in_tx = 3;\n        let first_note_and_data = construct_note(VALUE, first_note_index_in_tx);\n\n        let second_note_index_in_tx = 5;\n        let second_note_and_data = construct_note(VALUE, second_note_index_in_tx);\n\n        // Both notes have the same preimage (and therefore packed representation), so both should be found in the same\n        // call.\n        assert_eq(first_note_and_data.note, second_note_and_data.note);\n        let packed_note = first_note_and_data.note.pack();\n\n        let mut unique_note_hashes_in_tx = BoundedVec::from_array([\n            random(), random(), random(), random(), random(), random(), random(),\n        ]);\n        unique_note_hashes_in_tx.set(first_note_index_in_tx, first_note_and_data.unique_note_hash);\n        unique_note_hashes_in_tx.set(second_note_index_in_tx, second_note_and_data.unique_note_hash);\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            MockNote::get_id(),\n            BoundedVec::from_array(packed_note),\n        );\n\n        assert_eq(discovered_notes.len(), 2);\n\n        assert(discovered_notes.any(|discovered_note| {\n            (discovered_note.note_nonce == first_note_and_data.note_nonce)\n                & (discovered_note.note_hash == first_note_and_data.note_hash)\n                & (discovered_note.inner_nullifier == first_note_and_data.inner_nullifier)\n        }));\n\n        assert(discovered_notes.any(|discovered_note| {\n            (discovered_note.note_nonce == second_note_and_data.note_nonce)\n                & (discovered_note.note_hash == second_note_and_data.note_hash)\n                & (discovered_note.inner_nullifier == second_note_and_data.inner_nullifier)\n        }));\n    }\n}\n"
    },
    "114": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v1.0.0-staging.6/noir-projects/aztec-nr/aztec/src/messages/discovery/partial_notes.nr",
      "source": "use crate::{\n    capsules::CapsuleArray,\n    messages::{\n        discovery::{ComputeNoteHashAndNullifier, nonce_discovery::attempt_note_nonce_discovery},\n        encoding::MAX_MESSAGE_CONTENT_LEN,\n        processing::{\n            enqueue_note_for_validation, get_pending_partial_notes_completion_logs,\n            log_retrieval_response::LogRetrievalResponse,\n        },\n    },\n    utils::array,\n};\n\nuse protocol_types::{\n    address::AztecAddress,\n    debug_log::debug_log_format,\n    hash::sha256_to_field,\n    traits::{Deserialize, Serialize},\n};\n\nglobal PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN: u32 = 2;\n\n/// Partial notes have a maximum packed length of their private fields bound by extra content in their private message\n/// (e.g. the storage slot, note completion log tag, etc.).\npub global MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN: u32 =\n    MAX_MESSAGE_CONTENT_LEN - PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN;\n\n/// The slot in the PXE capsules where we store a `CapsuleArray` of `DeliveredPendingPartialNote`.\npub global DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT: Field = sha256_to_field(\n    \"AZTEC_NR::DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT\".as_bytes(),\n);\n\n/// A partial note that was delivered but is still pending completion. Contains the information necessary to find the\n/// log that will complete it and lead to a note being discovered and delivered.\n#[derive(Serialize, Deserialize)]\npub(crate) struct DeliveredPendingPartialNote {\n    pub(crate) note_completion_log_tag: Field,\n    pub(crate) storage_slot: Field,\n    pub(crate) note_type_id: Field,\n    pub(crate) packed_private_note_content: BoundedVec<Field, MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN>,\n    pub(crate) recipient: AztecAddress,\n}\n\npub unconstrained fn process_partial_note_private_msg(\n    contract_address: AztecAddress,\n    recipient: AztecAddress,\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) {\n    let (note_type_id, storage_slot, note_completion_log_tag, packed_private_note_content) =\n        decode_partial_note_private_msg(msg_metadata, msg_content);\n\n    // We store the information of the partial note we found in a persistent capsule in PXE, so that we can later search\n    // for the public log that will complete it.\n    let pending = DeliveredPendingPartialNote {\n        note_completion_log_tag,\n        storage_slot,\n        note_type_id,\n        packed_private_note_content,\n        recipient,\n    };\n\n    CapsuleArray::at(\n        contract_address,\n        DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT,\n    )\n        .push(pending);\n}\n\n/// Searches for logs that would result in the completion of pending partial notes, ultimately resulting in the notes\n/// being delivered to PXE if completed.\npub unconstrained fn fetch_and_process_partial_note_completion_logs<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    let pending_partial_notes = CapsuleArray::at(\n        contract_address,\n        DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT,\n    );\n\n    debug_log_format(\n        \"{} pending partial notes\",\n        [pending_partial_notes.len() as Field],\n    );\n\n    // Each of the pending partial notes might get completed by a log containing its public values. For performance\n    // reasons, we fetch all of these logs concurrently and then process them one by one, minimizing the amount of time\n    // waiting for the node roundtrip.\n    let maybe_completion_logs =\n        get_pending_partial_notes_completion_logs(contract_address, pending_partial_notes);\n\n    // Each entry in the maybe completion logs array corresponds to the entry in the pending partial notes array at the\n    // same index. This means we can use the same index as we iterate through the responses to get both the partial note\n    // and the log that might complete it.\n    assert_eq(maybe_completion_logs.len(), pending_partial_notes.len());\n\n    maybe_completion_logs.for_each(|i, maybe_log: Option<LogRetrievalResponse>| {\n        // We clear the completion logs as we read them so that the array is empty by the time we next query it.\n        // TODO(#14943): use volatile arrays to avoid having to manually clear this.\n        maybe_completion_logs.remove(i);\n\n        let pending_partial_note = pending_partial_notes.get(i);\n\n        if maybe_log.is_none() {\n            debug_log_format(\n                \"Found no completion logs for partial note with tag {}\",\n                [pending_partial_note.note_completion_log_tag],\n            );\n\n            // Note that we're not removing the pending partial note from the capsule array, so we will continue\n            // searching for this tagged log when performing message discovery in the future until we either find it or\n            // the entry is somehow removed from the array.\n        } else {\n            debug_log_format(\n                \"Completion log found for partial note with tag {}\",\n                [pending_partial_note.note_completion_log_tag],\n            );\n            let log = maybe_log.unwrap();\n\n            // Public fields are assumed to all be placed at the end of the packed representation, so we combine the\n            // private and public packed fields (i.e. the contents of the private message and public log plaintext to get\n            // the complete packed content.\n            let complete_packed_note = array::append(\n                pending_partial_note.packed_private_note_content,\n                log.log_payload,\n            );\n\n            let discovered_notes = attempt_note_nonce_discovery(\n                log.unique_note_hashes_in_tx,\n                log.first_nullifier_in_tx,\n                compute_note_hash_and_nullifier,\n                contract_address,\n                pending_partial_note.storage_slot,\n                pending_partial_note.note_type_id,\n                complete_packed_note,\n            );\n\n            // TODO(#11627): is there anything reasonable we can do if we get a log but it doesn't result in a note\n            // being found?\n            if discovered_notes.len() == 0 {\n                panic(\n                    f\"A partial note's completion log did not result in any notes being found - this should never happen\",\n                );\n            }\n\n            debug_log_format(\n                \"Discovered {0} notes for partial note with tag {1}\",\n                [discovered_notes.len() as Field, pending_partial_note.note_completion_log_tag],\n            );\n\n            discovered_notes.for_each(|discovered_note| {\n                enqueue_note_for_validation(\n                    contract_address,\n                    pending_partial_note.storage_slot,\n                    discovered_note.note_nonce,\n                    complete_packed_note,\n                    discovered_note.note_hash,\n                    discovered_note.inner_nullifier,\n                    log.tx_hash,\n                    pending_partial_note.recipient,\n                );\n            });\n\n            // Because there is only a single log for a given tag, once we've processed the tagged log then we\n            // simply delete the pending work entry, regardless of whether it was actually completed or not.\n            pending_partial_notes.remove(i);\n        }\n    });\n}\n\nfn decode_partial_note_private_msg(\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) -> (Field, Field, Field, BoundedVec<Field, MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN>) {\n    let note_type_id = msg_metadata as Field; // TODO: make note type id not be a full field\n\n    assert(\n        msg_content.len() > PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN,\n        f\"Invalid private note message: all partial note private messages must have at least {PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN} fields\",\n    );\n\n    // If PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN is changed, causing the assertion below to fail, then the\n    // destructuring of the partial note private message encoding below must be updated as well.\n    std::static_assert(\n        PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN == 2,\n        \"unexpected value for PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN\",\n    );\n\n    // We currently have two fields that are not the partial note's packed representation, which are the storage slot\n    // and the note completion log tag.\n    let storage_slot = msg_content.get(0);\n    let note_completion_log_tag = msg_content.get(1);\n\n    let packed_private_note_content = array::subbvec(msg_content, 2);\n\n    (note_type_id, storage_slot, note_completion_log_tag, packed_private_note_content)\n}\n"
    },
    "115": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v1.0.0-staging.6/noir-projects/aztec-nr/aztec/src/messages/discovery/private_events.nr",
      "source": "use crate::{\n    event::event_selector::EventSelector,\n    messages::{encoding::MAX_MESSAGE_CONTENT_LEN, processing::enqueue_event_for_validation},\n    prelude::AztecAddress,\n    utils::array,\n};\nuse protocol_types::{\n    constants::GENERATOR_INDEX__EVENT_COMMITMENT, hash::poseidon2_hash_with_separator_bounded_vec,\n    traits::FromField,\n};\n\n/// The number of fields in a private event message content that are not the event's serialized representation\n/// (1 field for randomness).\nglobal PRIVATE_EVENT_MSG_CONTENT_NON_EVENT_FIELDS_LEN: u32 = 1;\n\n/// The maximum length of the packed representation of an event's contents. This is limited by private log size,\n/// encryption overhead and extra fields in the message (e.g. message type id, randomness, etc.).\npub global MAX_EVENT_SERIALIZED_LEN: u32 =\n    MAX_MESSAGE_CONTENT_LEN - PRIVATE_EVENT_MSG_CONTENT_NON_EVENT_FIELDS_LEN;\n\npub unconstrained fn process_private_event_msg(\n    contract_address: AztecAddress,\n    recipient: AztecAddress,\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n    tx_hash: Field,\n) {\n    // In the case of events, the msg metadata is the event selector.\n    let event_type_id = EventSelector::from_field(msg_metadata as Field);\n\n    assert(\n        msg_content.len() > PRIVATE_EVENT_MSG_CONTENT_NON_EVENT_FIELDS_LEN,\n        f\"Invalid private event message: all private event messages must have at least {PRIVATE_EVENT_MSG_CONTENT_NON_EVENT_FIELDS_LEN} fields\",\n    );\n\n    // If PRIVATE_EVENT_MSG_CONTENT_NON_EVENT_FIELDS_LEN is changed, causing the assertion below to fail, then the\n    // destructuring of the private event message encoding below must be updated as well.\n    std::static_assert(\n        PRIVATE_EVENT_MSG_CONTENT_NON_EVENT_FIELDS_LEN == 1,\n        \"unexpected value for PRIVATE_EVENT_MSG_CONTENT_NON_EVENT_FIELDS_LEN\",\n    );\n\n    let serialized_event_with_randomness = msg_content;\n\n    let event_commitment = poseidon2_hash_with_separator_bounded_vec(\n        serialized_event_with_randomness,\n        GENERATOR_INDEX__EVENT_COMMITMENT,\n    );\n\n    // Randomness was injected into the event payload in `emit_event_in_private_log` but we have already used it\n    // to compute the event commitment, so we can safely discard it now.\n    let serialized_event = array::subbvec(\n        serialized_event_with_randomness,\n        PRIVATE_EVENT_MSG_CONTENT_NON_EVENT_FIELDS_LEN,\n    );\n\n    enqueue_event_for_validation(\n        contract_address,\n        event_type_id,\n        serialized_event,\n        event_commitment,\n        tx_hash,\n        recipient,\n    );\n}\n"
    },
    "116": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v1.0.0-staging.6/noir-projects/aztec-nr/aztec/src/messages/discovery/private_notes.nr",
      "source": "use crate::{\n    messages::{\n        discovery::{ComputeNoteHashAndNullifier, nonce_discovery::attempt_note_nonce_discovery},\n        encoding::MAX_MESSAGE_CONTENT_LEN,\n        processing::enqueue_note_for_validation,\n    },\n    utils::array,\n};\nuse protocol_types::{\n    address::AztecAddress, constants::MAX_NOTE_HASHES_PER_TX, debug_log::debug_log_format,\n};\n\n/// The number of fields in a private note message content that are not the note's packed representation.\n// See the call to `std::static_assert` below to see what's in these fields.\nglobal PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN: u32 = 1;\n\n/// The maximum length of the packed representation of a note's contents. This is limited by private log size,\n/// encryption overhead and extra fields in the message (e.g. message type id, storage slot, etc.).\npub global MAX_NOTE_PACKED_LEN: u32 =\n    MAX_MESSAGE_CONTENT_LEN - PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN;\n\npub unconstrained fn process_private_note_msg<Env>(\n    contract_address: AztecAddress,\n    tx_hash: Field,\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    recipient: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) {\n    let (note_type_id, storage_slot, packed_note) =\n        decode_private_note_msg(msg_metadata, msg_content);\n\n    attempt_note_discovery(\n        contract_address,\n        tx_hash,\n        unique_note_hashes_in_tx,\n        first_nullifier_in_tx,\n        recipient,\n        compute_note_hash_and_nullifier,\n        storage_slot,\n        note_type_id,\n        packed_note,\n    );\n}\n\n/// Attempts discovery of a note given information about its contents and the transaction in which it is\n/// suspected the note was created.\npub unconstrained fn attempt_note_discovery<Env>(\n    contract_address: AztecAddress,\n    tx_hash: Field,\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    recipient: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n) {\n    let discovered_notes = attempt_note_nonce_discovery(\n        unique_note_hashes_in_tx,\n        first_nullifier_in_tx,\n        compute_note_hash_and_nullifier,\n        contract_address,\n        storage_slot,\n        note_type_id,\n        packed_note,\n    );\n\n    debug_log_format(\n        \"Discovered {0} notes from a private message\",\n        [discovered_notes.len() as Field],\n    );\n\n    discovered_notes.for_each(|discovered_note| {\n        enqueue_note_for_validation(\n            contract_address,\n            storage_slot,\n            discovered_note.note_nonce,\n            packed_note,\n            discovered_note.note_hash,\n            discovered_note.inner_nullifier,\n            tx_hash,\n            recipient,\n        );\n    });\n}\n\nfn decode_private_note_msg(\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) -> (Field, Field, BoundedVec<Field, MAX_NOTE_PACKED_LEN>) {\n    let note_type_id = msg_metadata as Field; // TODO: make note type id not be a full field\n\n    assert(\n        msg_content.len() > PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN,\n        f\"Invalid private note message: all private note messages must have at least {PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN} fields\",\n    );\n\n    // If PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN is changed, causing the assertion below to fail, then the\n    // destructuring of the private note message encoding below must be updated as well.\n    std::static_assert(\n        PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN == 1,\n        \"unexpected value for PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN\",\n    );\n\n    // We currently have a single field that is not the note's packed representation, which is the storage slot.\n    let storage_slot = msg_content.get(0);\n    let packed_note = array::subbvec(msg_content, PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN);\n\n    (note_type_id, storage_slot, packed_note)\n}\n"
    },
    "117": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v1.0.0-staging.6/noir-projects/aztec-nr/aztec/src/messages/discovery/process_message.nr",
      "source": "use crate::messages::{\n    discovery::{\n        ComputeNoteHashAndNullifier, partial_notes::process_partial_note_private_msg,\n        private_events::process_private_event_msg, private_notes::process_private_note_msg,\n    },\n    encoding::decode_message,\n    encryption::{aes128::AES128, log_encryption::LogEncryption},\n    msg_type::{\n        PARTIAL_NOTE_PRIVATE_MSG_TYPE_ID, PRIVATE_EVENT_MSG_TYPE_ID, PRIVATE_NOTE_MSG_TYPE_ID,\n    },\n    processing::message_context::MessageContext,\n};\n\nuse protocol_types::{\n    address::AztecAddress,\n    constants::PRIVATE_LOG_CIPHERTEXT_LEN,\n    debug_log::{debug_log, debug_log_format},\n};\n\n/// Processes a message that can contain notes, partial notes, or events.\n///\n/// Notes result in nonce discovery being performed prior to delivery, which requires knowledge of the transaction hash\n/// in which the notes would've been created (typically the same transaction in which the log was emitted), along with\n/// the list of unique note hashes in said transaction and the `compute_note_hash_and_nullifier` function. Once\n/// discovered, the notes are enqueued for validation.\n///\n/// Partial notes result in a pending partial note entry being stored in a PXE capsule, which will later be retrieved to\n/// search for the note's completion public log.\n///\n/// Events are processed by computing an event commitment from the serialized event data and its randomness field, then\n/// enqueueing the event data and commitment for validation.\npub unconstrained fn do_process_message<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    message_ciphertext: BoundedVec<Field, PRIVATE_LOG_CIPHERTEXT_LEN>,\n    message_context: MessageContext,\n) {\n    let message = AES128::decrypt_log(message_ciphertext, message_context.recipient);\n\n    // The first thing to do after decrypting the message is to determine what type of message we're processing. We\n    // have 3 message types: private notes, partial notes and events.\n\n    // We decode the message to obtain the message type id, metadata and content.\n    let (msg_type_id, msg_metadata, msg_content) = decode_message(message);\n\n    if msg_type_id == PRIVATE_NOTE_MSG_TYPE_ID {\n        debug_log(\"Processing private note msg\");\n\n        process_private_note_msg(\n            contract_address,\n            message_context.tx_hash,\n            message_context.unique_note_hashes_in_tx,\n            message_context.first_nullifier_in_tx,\n            message_context.recipient,\n            compute_note_hash_and_nullifier,\n            msg_metadata,\n            msg_content,\n        );\n    } else if msg_type_id == PARTIAL_NOTE_PRIVATE_MSG_TYPE_ID {\n        debug_log(\"Processing partial note private msg\");\n\n        process_partial_note_private_msg(\n            contract_address,\n            message_context.recipient,\n            msg_metadata,\n            msg_content,\n        );\n    } else if msg_type_id == PRIVATE_EVENT_MSG_TYPE_ID {\n        debug_log(\"Processing private event msg\");\n\n        process_private_event_msg(\n            contract_address,\n            message_context.recipient,\n            msg_metadata,\n            msg_content,\n            message_context.tx_hash,\n        );\n    } else {\n        debug_log_format(\"Unknown msg type id {0}\", [msg_type_id as Field]);\n    }\n}\n"
    },
    "118": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v1.0.0-staging.6/noir-projects/aztec-nr/aztec/src/messages/encoding.nr",
      "source": "// TODO(#12750): don't make these values assume we're using AES.\nuse crate::{\n    messages::encryption::log_encryption::PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS, utils::array,\n};\n\npub global MAX_MESSAGE_LEN: u32 = PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS;\n\nglobal MESSAGE_EXPANDED_METADATA_LEN: u32 = 1;\n\n// The standard message layout is composed of:\n//  - an initial field called the 'expanded metadata'\n//  - an arbitrary number of fields following that called the 'message content'\n//\n// ```\n// message: [ msg_expanded_metadata, ...msg_content ]\n// ```\n//\n// The expanded metadata itself is interpreted as a u128, of which:\n//  - the upper 64 bits are the message type id\n//  - the lower 64 bits are called the 'message metadata'\n//\n// ```\n// msg_expanded_metadata: [  msg_type_id    |  msg_metadata  ]\n//                        <---  64 bits --->|<--- 64 bits --->\n// ```\n//\n// The meaning of the message metadata and message content depend on the value of the message type id. Note that there\n// is nothing special about the message metadata, it _can_ be considered part of the content. It just has a different\n// name to make it distinct from the message content given that it is not a full field.\n\n/// The maximum length of a message's content, i.e. not including the expanded message metadata.\npub global MAX_MESSAGE_CONTENT_LEN: u32 = MAX_MESSAGE_LEN - MESSAGE_EXPANDED_METADATA_LEN;\n\n/// Encodes a message following aztec-nr's standard message encoding. This message can later be decoded with\n/// `decode_message` to retrieve the original values.\n///\n/// - The `msg_type` is an identifier that groups types of messages that are all processed the same way, e.g. private\n/// notes or events. Possible values are defined in `aztec::messages::msg_type`.\n/// - The `msg_metadata` and `msg_content` are the values stored in the message, whose meaning depends on the\n///  `msg_type`. The only special thing about `msg_metadata` that separates it from `msg_content` is that it is a u64\n/// instead of a full Field (due to details of how messages are encoded), allowing applications that can fit values into\n/// this smaller variable to achieve higher data efficiency.\npub fn encode_message<let N: u32>(\n    msg_type: u64,\n    msg_metadata: u64,\n    msg_content: [Field; N],\n) -> [Field; (N + MESSAGE_EXPANDED_METADATA_LEN)] {\n    std::static_assert(\n        msg_content.len() <= MAX_MESSAGE_CONTENT_LEN,\n        \"Invalid message content: it must have a length of at most MAX_MESSAGE_CONTENT_LEN\",\n    );\n\n    // If MESSAGE_EXPANDED_METADATA_LEN is changed, causing the assertion below to fail, then the destructuring of\n    // the message encoding below must be updated as well.\n    std::static_assert(\n        MESSAGE_EXPANDED_METADATA_LEN == 1,\n        \"unexpected value for MESSAGE_EXPANDED_METADATA_LEN\",\n    );\n    let mut message: [Field; (N + MESSAGE_EXPANDED_METADATA_LEN)] = std::mem::zeroed();\n\n    message[0] = to_expanded_metadata(msg_type, msg_metadata);\n    for i in 0..msg_content.len() {\n        message[MESSAGE_EXPANDED_METADATA_LEN + i] = msg_content[i];\n    }\n\n    message\n}\n\n/// Decodes a standard aztec-nr message, i.e. one created via `encode_message`, returning the original encoded values.\n///\n/// Note that `encode_message` returns a fixed size array while this function takes a `BoundedVec`: this is because\n/// prior to decoding the message type is unknown, and consequentially not known at compile time. If working with\n/// fixed-size messages, consider using `BoundedVec::from_array` to convert them.\npub unconstrained fn decode_message(\n    message: BoundedVec<Field, MAX_MESSAGE_LEN>,\n) -> (u64, u64, BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>) {\n    assert(\n        message.len() >= MESSAGE_EXPANDED_METADATA_LEN,\n        f\"Invalid message: it must have at least {MESSAGE_EXPANDED_METADATA_LEN} fields\",\n    );\n\n    // If MESSAGE_EXPANDED_METADATA_LEN is changed, causing the assertion below to fail, then the destructuring of\n    // the message encoding below must be updated as well.\n    std::static_assert(\n        MESSAGE_EXPANDED_METADATA_LEN == 1,\n        \"unexpected value for MESSAGE_EXPANDED_METADATA_LEN\",\n    );\n\n    let msg_expanded_metadata = message.get(0);\n    let (msg_type_id, msg_metadata) = from_expanded_metadata(msg_expanded_metadata);\n    let msg_content = array::subbvec(message, MESSAGE_EXPANDED_METADATA_LEN);\n\n    (msg_type_id, msg_metadata, msg_content)\n}\n\nglobal U64_SHIFT_MULTIPLIER: Field = 2.pow_32(64);\n\nfn to_expanded_metadata(msg_type: u64, msg_metadata: u64) -> Field {\n    // We use multiplication instead of bit shifting operations to shift the type bits as bit shift operations are\n    // expensive in circuits.\n    let type_field: Field = (msg_type as Field) * U64_SHIFT_MULTIPLIER;\n    let msg_metadata_field = msg_metadata as Field;\n\n    type_field + msg_metadata_field\n}\n\nfn from_expanded_metadata(input: Field) -> (u64, u64) {\n    input.assert_max_bit_size::<128>();\n    let msg_metadata = (input as u64);\n    let msg_type = ((input - (msg_metadata as Field)) / U64_SHIFT_MULTIPLIER) as u64;\n    // Use division instead of bit shift since bit shifts are expensive in circuits\n    (msg_type, msg_metadata)\n}\n\nmod tests {\n    use crate::utils::array::subarray::subarray;\n    use super::{\n        decode_message, encode_message, from_expanded_metadata, MAX_MESSAGE_CONTENT_LEN,\n        to_expanded_metadata,\n    };\n\n    global U64_MAX: u64 = (2.pow_32(64) - 1) as u64;\n    global U128_MAX: Field = (2.pow_32(128) - 1);\n\n    #[test]\n    unconstrained fn encode_decode_empty_message(msg_type: u64, msg_metadata: u64) {\n        let encoded = encode_message(msg_type, msg_metadata, []);\n        let (decoded_msg_type, decoded_msg_metadata, decoded_msg_content) =\n            decode_message(BoundedVec::from_array(encoded));\n\n        assert_eq(decoded_msg_type, msg_type);\n        assert_eq(decoded_msg_metadata, msg_metadata);\n        assert_eq(decoded_msg_content.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn encode_decode_short_message(\n        msg_type: u64,\n        msg_metadata: u64,\n        msg_content: [Field; MAX_MESSAGE_CONTENT_LEN / 2],\n    ) {\n        let encoded = encode_message(msg_type, msg_metadata, msg_content);\n        let (decoded_msg_type, decoded_msg_metadata, decoded_msg_content) =\n            decode_message(BoundedVec::from_array(encoded));\n\n        assert_eq(decoded_msg_type, msg_type);\n        assert_eq(decoded_msg_metadata, msg_metadata);\n        assert_eq(decoded_msg_content.len(), msg_content.len());\n        assert_eq(subarray(decoded_msg_content.storage(), 0), msg_content);\n    }\n\n    #[test]\n    unconstrained fn encode_decode_full_message(\n        msg_type: u64,\n        msg_metadata: u64,\n        msg_content: [Field; MAX_MESSAGE_CONTENT_LEN],\n    ) {\n        let encoded = encode_message(msg_type, msg_metadata, msg_content);\n        let (decoded_msg_type, decoded_msg_metadata, decoded_msg_content) =\n            decode_message(BoundedVec::from_array(encoded));\n\n        assert_eq(decoded_msg_type, msg_type);\n        assert_eq(decoded_msg_metadata, msg_metadata);\n        assert_eq(decoded_msg_content.len(), msg_content.len());\n        assert_eq(subarray(decoded_msg_content.storage(), 0), msg_content);\n    }\n\n    #[test]\n    unconstrained fn to_expanded_metadata_packing() {\n        // Test case 1: All bits set\n        let packed = to_expanded_metadata(U64_MAX, U64_MAX);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 2: Only log type bits set\n        let packed = to_expanded_metadata(U64_MAX, 0);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, 0);\n\n        // Test case 3: Only msg_metadata bits set\n        let packed = to_expanded_metadata(0, U64_MAX);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 4: No bits set\n        let packed = to_expanded_metadata(0, 0);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, 0);\n    }\n\n    #[test]\n    unconstrained fn from_expanded_metadata_packing() {\n        // Test case 1: All bits set\n        let input = U128_MAX as Field;\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 2: Only log type bits set\n        let input = (U128_MAX - U64_MAX as Field);\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, 0);\n\n        // Test case 3: Only msg_metadata bits set\n        let input = U64_MAX as Field;\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 4: No bits set\n        let input = 0;\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, 0);\n    }\n\n    #[test]\n    unconstrained fn to_from_expanded_metadata(original_msg_type: u64, original_msg_metadata: u64) {\n        let packed = to_expanded_metadata(original_msg_type, original_msg_metadata);\n        let (unpacked_msg_type, unpacked_msg_metadata) = from_expanded_metadata(packed);\n\n        assert_eq(original_msg_type, unpacked_msg_type);\n        assert_eq(original_msg_metadata, unpacked_msg_metadata);\n    }\n}\n"
    },
    "119": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v1.0.0-staging.6/noir-projects/aztec-nr/aztec/src/messages/encryption/aes128.nr",
      "source": "use dep::protocol_types::{\n    constants::{\n        GENERATOR_INDEX__SYMMETRIC_KEY, GENERATOR_INDEX__SYMMETRIC_KEY_2,\n        PRIVATE_LOG_CIPHERTEXT_LEN,\n    },\n    hash::poseidon2_hash_with_separator,\n    point::Point,\n};\n\nuse crate::{\n    keys::{\n        ecdh_shared_secret::derive_ecdh_shared_secret_using_aztec_address,\n        ephemeral::generate_ephemeral_key_pair,\n    },\n    messages::{\n        encryption::log_encryption::{\n            EPH_PK_SIGN_BYTE_SIZE_IN_BYTES, EPH_PK_X_SIZE_IN_FIELDS,\n            HEADER_CIPHERTEXT_SIZE_IN_BYTES, LogEncryption, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS,\n        },\n        logs::arithmetic_generics_utils::{\n            get_arr_of_size__log_bytes__from_PT, get_arr_of_size__log_bytes_padding__from_PT,\n        },\n    },\n    oracle::{aes128_decrypt::aes128_decrypt_oracle, shared_secret::get_shared_secret},\n    prelude::AztecAddress,\n    utils::{\n        array,\n        conversion::{\n            bytes_to_fields::{bytes_from_fields, bytes_to_fields},\n            fields_to_bytes::{fields_from_bytes, fields_to_bytes},\n        },\n        point::{get_sign_of_point, point_from_x_coord_and_sign, point_to_bytes},\n        random::get_random_bytes,\n    },\n};\n\nuse std::aes128::aes128_encrypt;\n\nfn extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_poseidon2(\n    shared_secret: Point,\n) -> [u8; 32] {\n    let rand1: Field = poseidon2_hash_with_separator(\n        [shared_secret.x, shared_secret.y],\n        GENERATOR_INDEX__SYMMETRIC_KEY,\n    );\n    let rand2: Field = poseidon2_hash_with_separator(\n        [shared_secret.x, shared_secret.y],\n        GENERATOR_INDEX__SYMMETRIC_KEY_2,\n    );\n    let rand1_bytes: [u8; 16] = rand1.to_le_bytes();\n    let rand2_bytes: [u8; 16] = rand2.to_le_bytes();\n    let mut bytes: [u8; 32] = [0; 32];\n    for i in 0..16 {\n        bytes[i] = rand1_bytes[i];\n        bytes[i + 1] = rand2_bytes[i];\n    }\n    bytes\n}\n\n// TODO(#10537): Consider nuking this function.\nfn extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_sha256(\n    shared_secret: Point,\n) -> [u8; 32] {\n    let shared_secret_bytes: [u8; 32] = point_to_bytes(shared_secret);\n\n    let mut shared_secret_bytes_with_separator: [u8; 33] = std::mem::zeroed();\n    for i in 0..shared_secret_bytes.len() {\n        shared_secret_bytes_with_separator[i] = shared_secret_bytes[i];\n    }\n    shared_secret_bytes_with_separator[32] = GENERATOR_INDEX__SYMMETRIC_KEY;\n\n    sha256::digest(shared_secret_bytes_with_separator)\n}\n\nfn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n    shared_secret: Point,\n    randomness_extraction_fn: fn(Point) -> [u8; 32],\n) -> ([u8; 16], [u8; 16]) {\n    let random_256_bits = randomness_extraction_fn(shared_secret);\n    let mut sym_key = [0; 16];\n    let mut iv = [0; 16];\n    for i in 0..16 {\n        sym_key[i] = random_256_bits[i];\n        iv[i] = random_256_bits[i + 16];\n    }\n    (sym_key, iv)\n}\n\n// TODO(#10537): Consider nuking this function.\npub fn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n    shared_secret: Point,\n) -> ([u8; 16], [u8; 16]) {\n    derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n        shared_secret,\n        extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_sha256,\n    )\n}\n\n// TODO(#10537): This function is currently unused. Consider using it instead of the sha256 one.\npub fn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_poseidon2(\n    shared_secret: Point,\n) -> ([u8; 16], [u8; 16]) {\n    derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n        shared_secret,\n        extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_poseidon2,\n    )\n}\n\npub struct AES128 {}\n\nimpl LogEncryption for AES128 {\n    fn encrypt_log<let PLAINTEXT_LEN: u32>(\n        plaintext: [Field; PLAINTEXT_LEN],\n        recipient: AztecAddress,\n    ) -> [Field; PRIVATE_LOG_CIPHERTEXT_LEN] {\n        // AES 128 operates on bytes, not fields, so we need to convert the fields to bytes.\n        // (This process is then reversed when processing the log in `do_process_log`)\n        let plaintext_bytes = fields_to_bytes(plaintext);\n\n        // *****************************************************************************\n        // Compute the shared secret\n        // *****************************************************************************\n\n        let (eph_sk, eph_pk) = generate_ephemeral_key_pair();\n\n        let eph_pk_sign_byte: u8 = get_sign_of_point(eph_pk) as u8;\n\n        // (not to be confused with the tagging shared secret)\n        let ciphertext_shared_secret =\n            derive_ecdh_shared_secret_using_aztec_address(eph_sk, recipient);\n\n        // TODO: also use this shared secret for deriving note randomness.\n\n        // *****************************************************************************\n        // Convert the plaintext into whatever format the encryption function expects\n        // *****************************************************************************\n\n        // Already done for this strategy: AES expects bytes.\n\n        // *****************************************************************************\n        // Encrypt the plaintext\n        // *****************************************************************************\n\n        let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n            ciphertext_shared_secret,\n        );\n\n        let ciphertext_bytes = aes128_encrypt(plaintext_bytes, iv, sym_key);\n\n        // |full_pt| = |pt_length| + |pt|\n        // |pt_aes_padding| = 16 - (|full_pt| % 16)\n        // or... since a % b is the same as a - b * (a // b) (integer division), so:\n        // |pt_aes_padding| = 16 - (|full_pt| - 16 * (|full_pt| // 16))\n        // |ct| = |full_pt| + |pt_aes_padding|\n        //      = |full_pt| + 16 - (|full_pt| - 16 * (|full_pt| // 16))\n        //      = 16 + 16 * (|full_pt| // 16)\n        //      = 16 * (1 + |full_pt| // 16)\n        assert(ciphertext_bytes.len() == 16 * (1 + (PLAINTEXT_LEN * 32) / 16));\n\n        // *****************************************************************************\n        // Compute the header ciphertext\n        // *****************************************************************************\n\n        // Header contains only the length of the ciphertext stored in 2 bytes.\n        // TODO: consider nuking the header altogether and just have a fixed-size ciphertext by padding the plaintext.\n        // This would be more costly constraint-wise but cheaper DA-wise.\n        let mut header_plaintext: [u8; 2] = [0 as u8; 2];\n        let ciphertext_bytes_length = ciphertext_bytes.len();\n        header_plaintext[0] = (ciphertext_bytes_length >> 8) as u8;\n        header_plaintext[1] = ciphertext_bytes_length as u8;\n\n        // TODO: this is insecure and wasteful:\n        // \"Insecure\", because the esk shouldn't be used twice (once for the header,\n        // and again for the proper ciphertext) (at least, I never got the\n        // \"go ahead\" that this would be safe, unfortunately).\n        // \"Wasteful\", because the exact same computation is happening further down.\n        // I'm leaving that 2nd computation where it is, because this 1st computation\n        // will be imminently deleted, when the header logic is deleted.\n        let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n            ciphertext_shared_secret,\n        );\n\n        // Note: the aes128_encrypt builtin fn automatically appends bytes to the\n        // input, according to pkcs#7; hence why the output `header_ciphertext_bytes` is 16\n        // bytes larger than the input in this case.\n        let header_ciphertext_bytes = aes128_encrypt(header_plaintext, iv, sym_key);\n        // I recall that converting a slice to an array incurs constraints, so I'll check the length this way instead:\n        assert(header_ciphertext_bytes.len() == HEADER_CIPHERTEXT_SIZE_IN_BYTES);\n\n        // *****************************************************************************\n        // Prepend / append more bytes of data to the ciphertext, before converting back\n        // to fields.\n        // *****************************************************************************\n\n        let mut log_bytes_padding_to_mult_31 =\n            get_arr_of_size__log_bytes_padding__from_PT::<PLAINTEXT_LEN * 32>();\n        // Safety: this randomness won't be constrained to be random. It's in the\n        // interest of the executor of this fn to encrypt with random bytes.\n        log_bytes_padding_to_mult_31 = unsafe { get_random_bytes() };\n\n        let mut log_bytes = get_arr_of_size__log_bytes__from_PT::<PLAINTEXT_LEN * 32>();\n\n        assert(\n            log_bytes.len() % 31 == 0,\n            \"Unexpected error: log_bytes.len() should be divisible by 31, by construction.\",\n        );\n\n        log_bytes[0] = eph_pk_sign_byte;\n        let mut offset = 1;\n        for i in 0..header_ciphertext_bytes.len() {\n            log_bytes[offset + i] = header_ciphertext_bytes[i];\n        }\n        offset += header_ciphertext_bytes.len();\n\n        for i in 0..ciphertext_bytes.len() {\n            log_bytes[offset + i] = ciphertext_bytes[i];\n        }\n        offset += ciphertext_bytes.len();\n\n        for i in 0..log_bytes_padding_to_mult_31.len() {\n            log_bytes[offset + i] = log_bytes_padding_to_mult_31[i];\n        }\n\n        assert(\n            offset + log_bytes_padding_to_mult_31.len() == log_bytes.len(),\n            \"Something has gone wrong\",\n        );\n\n        // *****************************************************************************\n        // Convert bytes back to fields\n        // *****************************************************************************\n\n        // TODO(#12749): As Mike pointed out, we need to make logs produced by different encryption schemes\n        // indistinguishable from each other and for this reason the output here and in the last for-loop of this function\n        // should cover a full field.\n        let log_bytes_as_fields = bytes_to_fields(log_bytes);\n\n        // *****************************************************************************\n        // Prepend / append fields, to create the final log\n        // *****************************************************************************\n\n        let mut ciphertext: [Field; PRIVATE_LOG_CIPHERTEXT_LEN] = [0; PRIVATE_LOG_CIPHERTEXT_LEN];\n\n        ciphertext[0] = eph_pk.x;\n\n        let mut offset = 1;\n        for i in 0..log_bytes_as_fields.len() {\n            ciphertext[offset + i] = log_bytes_as_fields[i];\n        }\n        offset += log_bytes_as_fields.len();\n\n        for i in offset..PRIVATE_LOG_CIPHERTEXT_LEN {\n            // We need to get a random value that fits in 31 bytes to not leak information about the size of the log\n            // (all the \"real\" log fields contain at most 31 bytes because of the way we convert the bytes to fields).\n            // TODO(#12749): Long term, this is not a good solution.\n\n            // Safety: we assume that the sender wants for the log to be private - a malicious one could simply reveal its\n            // contents publicly. It is therefore fine to trust the sender to provide random padding.\n            let field_bytes = unsafe { get_random_bytes::<31>() };\n            ciphertext[i] = Field::from_be_bytes::<31>(field_bytes);\n        }\n\n        ciphertext\n    }\n\n    unconstrained fn decrypt_log(\n        ciphertext: BoundedVec<Field, PRIVATE_LOG_CIPHERTEXT_LEN>,\n        recipient: AztecAddress,\n    ) -> BoundedVec<Field, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS> {\n        let eph_pk_x = ciphertext.get(0);\n\n        let ciphertext_without_eph_pk_x_fields = array::subbvec::<Field, PRIVATE_LOG_CIPHERTEXT_LEN, PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS>(\n            ciphertext,\n            EPH_PK_X_SIZE_IN_FIELDS,\n        );\n\n        // Convert the ciphertext represented as fields to a byte representation (its original format)\n        let ciphertext_without_eph_pk_x = bytes_from_fields(ciphertext_without_eph_pk_x_fields);\n\n        // First byte of the ciphertext represents the ephemeral public key sign\n        let eph_pk_sign_bool = ciphertext_without_eph_pk_x.get(0) != 0;\n        // With the sign and the x-coordinate of the ephemeral public key, we can reconstruct the point\n        let eph_pk = point_from_x_coord_and_sign(eph_pk_x, eph_pk_sign_bool);\n\n        // Derive shared secret and symmetric key\n        let ciphertext_shared_secret = get_shared_secret(recipient, eph_pk);\n        let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n            ciphertext_shared_secret,\n        );\n\n        // Extract the header ciphertext\n        let header_start = EPH_PK_SIGN_BYTE_SIZE_IN_BYTES; // Skip eph_pk_sign byte\n        let header_ciphertext: [u8; HEADER_CIPHERTEXT_SIZE_IN_BYTES] =\n            array::subarray(ciphertext_without_eph_pk_x.storage(), header_start);\n        // We need to convert the array to a BoundedVec because the oracle expects a BoundedVec as it's designed to work\n        // with logs with unknown length at compile time. This would not be necessary here as the header ciphertext length\n        // is fixed. But we do it anyway to not have to have duplicate oracles.\n        let header_ciphertext_bvec =\n            BoundedVec::<u8, HEADER_CIPHERTEXT_SIZE_IN_BYTES>::from_array(header_ciphertext);\n\n        // Decrypt header\n        let header_plaintext = aes128_decrypt_oracle(header_ciphertext_bvec, iv, sym_key);\n\n        // Extract ciphertext length from header (2 bytes, big-endian)\n        let ciphertext_length =\n            ((header_plaintext.get(0) as u32) << 8) | (header_plaintext.get(1) as u32);\n\n        // Extract and decrypt main ciphertext\n        let ciphertext_start = header_start + HEADER_CIPHERTEXT_SIZE_IN_BYTES;\n        let ciphertext_with_padding: [u8; (PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS) * 31 - HEADER_CIPHERTEXT_SIZE_IN_BYTES - EPH_PK_SIGN_BYTE_SIZE_IN_BYTES] =\n            array::subarray(ciphertext_without_eph_pk_x.storage(), ciphertext_start);\n        let ciphertext: BoundedVec<u8, (PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS) * 31 - HEADER_CIPHERTEXT_SIZE_IN_BYTES - EPH_PK_SIGN_BYTE_SIZE_IN_BYTES> =\n            BoundedVec::from_parts(ciphertext_with_padding, ciphertext_length);\n\n        // Decrypt main ciphertext and return it\n        let plaintext_bytes = aes128_decrypt_oracle(ciphertext, iv, sym_key);\n\n        // Each field of the original note log was serialized to 32 bytes so we convert the bytes back to fields.\n        fields_from_bytes(plaintext_bytes)\n    }\n}\n\nmod test {\n    use crate::{\n        keys::ecdh_shared_secret::derive_ecdh_shared_secret_using_aztec_address,\n        messages::encryption::log_encryption::{LogEncryption, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS},\n        test::helpers::test_environment::TestEnvironment,\n    };\n    use super::AES128;\n    use protocol_types::{\n        address::AztecAddress,\n        indexed_tagging_secret::IndexedTaggingSecret,\n        traits::{Deserialize, FromField},\n    };\n    use std::{embedded_curve_ops::EmbeddedCurveScalar, test::OracleMock};\n\n    #[test]\n    unconstrained fn encrypt_decrypt_log() {\n        let mut env = TestEnvironment::new();\n        // Advance 1 block so we can read historic state from private\n        env.advance_block_by(1);\n\n        let plaintext = [1, 2, 3];\n\n        let recipient = AztecAddress::from_field(\n            0x25afb798ea6d0b8c1618e50fdeafa463059415013d3b7c75d46abf5e242be70c,\n        );\n\n        // Mock random values for deterministic test\n        let eph_sk = 0x1358d15019d4639393d62b97e1588c095957ce74a1c32d6ec7d62fe6705d9538;\n        let _ = OracleMock::mock(\"getRandomField\").returns(eph_sk).times(1);\n\n        let randomness = 0x0101010101010101010101010101010101010101010101010101010101010101;\n        let _ = OracleMock::mock(\"getRandomField\").returns(randomness).times(1000000);\n\n        let _ = OracleMock::mock(\"getIndexedTaggingSecretAsSender\").returns(\n            IndexedTaggingSecret::deserialize([69420, 1337]),\n        );\n        let _ = OracleMock::mock(\"incrementAppTaggingSecretIndexAsSender\").returns(());\n\n        // Encrypt the log\n        let encrypted_log = BoundedVec::from_array(AES128::encrypt_log(plaintext, recipient));\n\n        // Mock shared secret for deterministic test\n        let shared_secret = derive_ecdh_shared_secret_using_aztec_address(\n            EmbeddedCurveScalar::from_field(eph_sk),\n            recipient,\n        );\n        let _ = OracleMock::mock(\"getSharedSecret\").returns(shared_secret);\n\n        // Decrypt the log\n        let decrypted = AES128::decrypt_log(encrypted_log, recipient);\n\n        // The decryption function spits out a BoundedVec because it's designed to work with logs with unknown length\n        // at compile time. For this reason we need to convert the original input to a BoundedVec.\n        let plaintext_bvec =\n            BoundedVec::<Field, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS>::from_array(plaintext);\n\n        // Verify decryption matches original plaintext\n        assert_eq(decrypted, plaintext_bvec, \"Decrypted bytes should match original plaintext\");\n\n        // The following is a workaround of \"struct is never constructed\" Noir compilation error (we only ever use\n        // static methods of the struct).\n        let _ = AES128 {};\n    }\n}\n"
    },
    "12": {
      "path": "std/convert.nr",
      "source": "// docs:start:from-trait\npub trait From<T> {\n    fn from(input: T) -> Self;\n}\n// docs:end:from-trait\n\nimpl<T> From<T> for T {\n    fn from(input: T) -> T {\n        input\n    }\n}\n\n// docs:start:into-trait\npub trait Into<T> {\n    fn into(self) -> T;\n}\n\nimpl<T, U> Into<T> for U\nwhere\n    T: From<U>,\n{\n    fn into(self) -> T {\n        T::from(self)\n    }\n}\n// docs:end:into-trait\n\n// docs:start:from-impls\n// Unsigned integers\n\nimpl From<u8> for u32 {\n    fn from(value: u8) -> u32 {\n        value as u32\n    }\n}\n\nimpl From<u8> for u64 {\n    fn from(value: u8) -> u64 {\n        value as u64\n    }\n}\nimpl From<u32> for u64 {\n    fn from(value: u32) -> u64 {\n        value as u64\n    }\n}\n\nimpl From<u8> for u128 {\n    fn from(value: u8) -> u128 {\n        value as u128\n    }\n}\nimpl From<u32> for u128 {\n    fn from(value: u32) -> u128 {\n        value as u128\n    }\n}\nimpl From<u64> for u128 {\n    fn from(value: u64) -> u128 {\n        value as u128\n    }\n}\n\nimpl From<u8> for Field {\n    fn from(value: u8) -> Field {\n        value as Field\n    }\n}\nimpl From<u32> for Field {\n    fn from(value: u32) -> Field {\n        value as Field\n    }\n}\nimpl From<u64> for Field {\n    fn from(value: u64) -> Field {\n        value as Field\n    }\n}\n\nimpl From<u128> for Field {\n    fn from(value: u128) -> Field {\n        value as Field\n    }\n}\n\n// Signed integers\n\nimpl From<i8> for i32 {\n    fn from(value: i8) -> i32 {\n        value as i32\n    }\n}\n\nimpl From<i8> for i64 {\n    fn from(value: i8) -> i64 {\n        value as i64\n    }\n}\nimpl From<i32> for i64 {\n    fn from(value: i32) -> i64 {\n        value as i64\n    }\n}\n\n// Booleans\nimpl From<bool> for u8 {\n    fn from(value: bool) -> u8 {\n        value as u8\n    }\n}\nimpl From<bool> for u32 {\n    fn from(value: bool) -> u32 {\n        value as u32\n    }\n}\nimpl From<bool> for u64 {\n    fn from(value: bool) -> u64 {\n        value as u64\n    }\n}\nimpl From<bool> for i8 {\n    fn from(value: bool) -> i8 {\n        value as i8\n    }\n}\nimpl From<bool> for i32 {\n    fn from(value: bool) -> i32 {\n        value as i32\n    }\n}\nimpl From<bool> for i64 {\n    fn from(value: bool) -> i64 {\n        value as i64\n    }\n}\nimpl From<bool> for Field {\n    fn from(value: bool) -> Field {\n        value as Field\n    }\n}\n// docs:end:from-impls\n\n/// A generic interface for casting between primitive types,\n/// equivalent of using the `as` keyword between values.\n///\n/// # Example\n///\n/// ```\n/// let x: Field = 1234567890;\n/// let y: u8 = x as u8;\n/// let z: u8 = x.as_();\n/// assert_eq(y, z);\n/// ```\npub trait AsPrimitive<T> {\n    /// The equivalent of doing `self as T`.\n    fn as_(self) -> T;\n}\n\n#[generate_as_primitive_impls]\ncomptime fn generate_as_primitive_impls(_: FunctionDefinition) -> Quoted {\n    let types = [\n        quote { bool },\n        quote { u8 },\n        quote { u16 },\n        quote { u32 },\n        quote { u64 },\n        quote { u128 },\n        quote { i8 },\n        quote { i16 },\n        quote { i32 },\n        quote { i64 },\n        quote { Field },\n    ];\n\n    let mut impls = &[];\n    for type1 in types {\n        for type2 in types {\n            let body = if type1 == type2 {\n                quote { self }\n            } else if type1 == quote { bool } {\n                quote { self != 0 }\n            } else {\n                quote { self as $type1 }\n            };\n\n            impls = impls.push_back(\n                quote {\n                impl AsPrimitive<$type1> for $type2 {\n                    fn as_(self) -> $type1 {\n                        $body\n                    }\n                }\n            },\n            );\n        }\n    }\n    impls.join(quote {})\n}\n"
    },
    "135": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v1.0.0-staging.6/noir-projects/aztec-nr/aztec/src/messages/processing/mod.nr",
      "source": "pub(crate) mod event_validation_request;\npub mod message_context;\npub(crate) mod note_validation_request;\npub(crate) mod log_retrieval_request;\npub(crate) mod log_retrieval_response;\npub(crate) mod pending_tagged_log;\n\nuse crate::{\n    capsules::CapsuleArray,\n    event::event_selector::EventSelector,\n    messages::{\n        discovery::{\n            partial_notes::DeliveredPendingPartialNote, private_events::MAX_EVENT_SERIALIZED_LEN,\n            private_notes::MAX_NOTE_PACKED_LEN,\n        },\n        processing::{\n            log_retrieval_request::LogRetrievalRequest,\n            log_retrieval_response::LogRetrievalResponse,\n            note_validation_request::NoteValidationRequest, pending_tagged_log::PendingTaggedLog,\n        },\n    },\n    oracle,\n};\nuse event_validation_request::EventValidationRequest;\nuse protocol_types::{address::AztecAddress, hash::sha256_to_field};\n\n// Base slot for the pending tagged log array to which the fetch_tagged_logs oracle inserts found private logs.\nglobal PENDING_TAGGED_LOG_ARRAY_BASE_SLOT: Field =\n    sha256_to_field(\"AZTEC_NR::PENDING_TAGGED_LOG_ARRAY_BASE_SLOT\".as_bytes());\n\nglobal NOTE_VALIDATION_REQUESTS_ARRAY_BASE_SLOT: Field = sha256_to_field(\n    \"AZTEC_NR::NOTE_VALIDATION_REQUESTS_ARRAY_BASE_SLOT\".as_bytes(),\n);\n\nglobal EVENT_VALIDATION_REQUESTS_ARRAY_BASE_SLOT: Field = sha256_to_field(\n    \"AZTEC_NR::EVENT_VALIDATION_REQUESTS_ARRAY_BASE_SLOT\".as_bytes(),\n);\n\nglobal LOG_RETRIEVAL_REQUESTS_ARRAY_BASE_SLOT: Field = sha256_to_field(\n    \"AZTEC_NR::LOG_RETRIEVAL_REQUESTS_ARRAY_BASE_SLOT\".as_bytes(),\n);\n\nglobal LOG_RETRIEVAL_RESPONSES_ARRAY_BASE_SLOT: Field = sha256_to_field(\n    \"AZTEC_NR::LOG_RETRIEVAL_RESPONSES_ARRAY_BASE_SLOT\".as_bytes(),\n);\n\n/// Searches for private logs emitted by `contract_address` that might contain messages for one of the local accounts,\n/// and stores them in a `CapsuleArray` which is then returned.\npub(crate) unconstrained fn get_private_logs(\n    contract_address: AztecAddress,\n) -> CapsuleArray<PendingTaggedLog> {\n    // We will eventually perform log discovery via tagging here, but for now we simply call the `fetchTaggedLogs`\n    // oracle. This makes PXE synchronize tags, download logs and store the pending tagged logs in a capsule array.\n    oracle::message_processing::fetch_tagged_logs(PENDING_TAGGED_LOG_ARRAY_BASE_SLOT);\n\n    CapsuleArray::at(contract_address, PENDING_TAGGED_LOG_ARRAY_BASE_SLOT)\n}\n\n/// Enqueues a note for validation by PXE, so that it becomes aware of a note's existence allowing for later retrieval\n/// via `get_notes` oracle. The note will be scoped to `contract_address`, meaning other contracts will not be able to\n/// access it unless authorized.\n///\n/// In order for the note validation and insertion to occur, `validate_enqueued_notes_and_events` must be later called.\n/// For optimal performance, accumulate as many note validation requests as possible and then validate them all at the\n/// end (which results in PXE minimizing the number of network round-trips).\n///\n/// The `packed_note` is what `getNotes` will later return. PXE indexes notes by `storage_slot`, so this value\n/// is typically used to filter notes that correspond to different state variables. `note_hash` and `nullifier` are\n/// the inner hashes, i.e. the raw hashes returned by `NoteHash::compute_note_hash` and\n/// `NoteHash::compute_nullifier`. PXE will verify that the siloed unique note hash was inserted into the tree\n/// at `tx_hash`, and will store the nullifier to later check for nullification.\n///\n/// `recipient` is the account to which the note was sent to. Other accounts will not be able to access this note (e.g.\n/// other accounts will not be able to see one another's token balance notes, even in the same PXE) unless authorized.\npub(crate) unconstrained fn enqueue_note_for_validation(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    note_nonce: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n    note_hash: Field,\n    nullifier: Field,\n    tx_hash: Field,\n    recipient: AztecAddress,\n) {\n    // We store requests in a `CapsuleArray`, which PXE will later read from and deserialize into its version of the\n    // Noir `NoteValidationRequest`\n    CapsuleArray::at(contract_address, NOTE_VALIDATION_REQUESTS_ARRAY_BASE_SLOT).push(\n        NoteValidationRequest {\n            contract_address,\n            storage_slot,\n            note_nonce,\n            packed_note,\n            note_hash,\n            nullifier,\n            tx_hash,\n            recipient,\n        },\n    )\n}\n\n/// Enqueues an event for validation by PXE, so that it can be efficiently validated and then inserted into the event\n/// store.\n///\n/// In order for the event validation and insertion to occur, `validate_enqueued_notes_and_events` must be later\n/// called. For optimal performance, accumulate as many event validation requests as possible and then validate them\n/// all at the end (which results in PXE minimizing the number of network round-trips).\npub(crate) unconstrained fn enqueue_event_for_validation(\n    contract_address: AztecAddress,\n    event_type_id: EventSelector,\n    serialized_event: BoundedVec<Field, MAX_EVENT_SERIALIZED_LEN>,\n    event_commitment: Field,\n    tx_hash: Field,\n    recipient: AztecAddress,\n) {\n    // We store requests in a `CapsuleArray`, which PXE will later read from and deserialize into its version of the\n    // Noir `EventValidationRequest`\n    CapsuleArray::at(contract_address, EVENT_VALIDATION_REQUESTS_ARRAY_BASE_SLOT).push(\n        EventValidationRequest {\n            contract_address,\n            event_type_id,\n            serialized_event,\n            event_commitment,\n            tx_hash,\n            recipient,\n        },\n    )\n}\n\n/// Validates all note and event validation requests enqueued via `enqueue_note_for_validation` and\n/// `enqueue_event_for_validation`, inserting them into the note database and event store respectively, making them\n/// queryable via `get_notes` oracle and our TS API (PXE::getPrivateEvents).\n///\n/// This automatically clears both validation request queues, so no further work needs to be done by the caller.\npub(crate) unconstrained fn validate_enqueued_notes_and_events(contract_address: AztecAddress) {\n    oracle::message_processing::validate_enqueued_notes_and_events(\n        contract_address,\n        NOTE_VALIDATION_REQUESTS_ARRAY_BASE_SLOT,\n        EVENT_VALIDATION_REQUESTS_ARRAY_BASE_SLOT,\n    );\n}\n\n/// Efficiently queries the node for logs that result in the completion of all `DeliveredPendingPartialNote`s stored in\n/// a `CapsuleArray` by performing all node communication concurrently. Returns a second `CapsuleArray` with Options for\n/// the responses that correspond to the pending partial notes at the same index.\n///\n/// For example, given an array with pending partial notes `[ p1, p2, p3 ]`, where `p1` and `p3` have corresponding\n/// completion logs but `p2` does not, the returned `CapsuleArray` will have contents\n/// `[some(p1_log), none(), some(p3_log)]`.\npub(crate) unconstrained fn get_pending_partial_notes_completion_logs(\n    contract_address: AztecAddress,\n    pending_partial_notes: CapsuleArray<DeliveredPendingPartialNote>,\n) -> CapsuleArray<Option<LogRetrievalResponse>> {\n    let log_retrieval_requests =\n        CapsuleArray::at(contract_address, LOG_RETRIEVAL_REQUESTS_ARRAY_BASE_SLOT);\n\n    // We create a LogRetrievalRequest for each PendingPartialNote in the CapsuleArray. Because we need the indices in\n    // the request array to match the indices in the partial note array, we can't use CapsuleArray::for_each, as that\n    // function has arbitrary iteration order. Instead, we manually iterate the array from the beginning and push into\n    // the requests array, which we expect to be empty.\n    let mut i = 0;\n    let pending_partial_notes_count = pending_partial_notes.len();\n    while i < pending_partial_notes_count {\n        let pending_partial_note = pending_partial_notes.get(i);\n        log_retrieval_requests.push(\n            LogRetrievalRequest {\n                contract_address,\n                unsiloed_tag: pending_partial_note.note_completion_log_tag,\n            },\n        );\n        i += 1;\n    }\n\n    oracle::message_processing::bulk_retrieve_logs(\n        contract_address,\n        LOG_RETRIEVAL_REQUESTS_ARRAY_BASE_SLOT,\n        LOG_RETRIEVAL_RESPONSES_ARRAY_BASE_SLOT,\n    );\n\n    CapsuleArray::at(contract_address, LOG_RETRIEVAL_RESPONSES_ARRAY_BASE_SLOT)\n}\n"
    },
    "148": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v1.0.0-staging.6/noir-projects/aztec-nr/aztec/src/note/note_metadata.nr",
      "source": "use protocol_types::traits::Serialize;\n\n// There's temporarily quite a bit of boilerplate here because Noir does not yet support enums. This file will\n// eventually be simplified into something closer to:\n//\n// pub enum NoteMetadata {\n//   PendingSamePhase{ note_hash_counter: u32 },\n//   PendingOtherPhase{ note_hash_counter: u32, note_nonce: Field },\n//   Settled{ note_nonce: Field },\n// }\n//\n// For now, we have `NoteMetadata` acting as a sort of tagged union.\n\nstruct NoteStageEnum {\n    /// A note that was created in the transaction that is currently being executed, during the current execution phase,\n    /// i.e. non-revertible or revertible.\n    ///\n    /// These notes are not yet in the note hash tree, though they will be inserted unless nullified in this transaction\n    /// (becoming a transient note).\n    PENDING_SAME_PHASE: u8,\n    /// A note that was created in the transaction that is currently being executed, during the previous execution\n    /// phase. Because there are only two phases and their order is always the same (first non-revertible and then\n    /// revertible) this implies that the note was created in the non-revertible phase, and that the current phase is\n    /// the revertible phase.\n    ///\n    /// These notes are not yet in the note hash tree, though they will be inserted **even if nullified in this\n    /// transaction**. This means that they must be nullified as if they were settled (i.e. using the unique note hash)\n    /// in order to avoid double spends once they become settled.\n    PENDING_PREVIOUS_PHASE: u8,\n    /// A note that was created in a prior transaction and is therefore already in the note hash tree.\n    SETTLED: u8,\n}\n\nglobal NoteStage: NoteStageEnum =\n    NoteStageEnum { PENDING_SAME_PHASE: 1, PENDING_PREVIOUS_PHASE: 2, SETTLED: 3 };\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a note in any of the three valid stages (pending same phase, pending previous phase, or settled). In\n/// order to access the underlying fields callers must first find the appropriate stage (e.g. via `is_settled()`) and\n/// then convert this into the appropriate type (e.g. via `to_settled()`).\n#[derive(Eq, Serialize)]\npub struct NoteMetadata {\n    stage: u8,\n    maybe_note_nonce: Field,\n}\n\nimpl NoteMetadata {\n    /// Constructs a `NoteMetadata` object from optional note hash counter and nonce. Both a zero note hash counter and\n    /// a zero nonce are invalid, so those are used to signal non-existent values.\n    pub fn from_raw_data(nonzero_note_hash_counter: bool, maybe_note_nonce: Field) -> Self {\n        if nonzero_note_hash_counter {\n            if maybe_note_nonce == 0 {\n                Self { stage: NoteStage.PENDING_SAME_PHASE, maybe_note_nonce }\n            } else {\n                Self { stage: NoteStage.PENDING_PREVIOUS_PHASE, maybe_note_nonce }\n            }\n        } else if maybe_note_nonce != 0 {\n            Self { stage: NoteStage.SETTLED, maybe_note_nonce }\n        } else {\n            panic(\n                f\"Note has a zero note hash counter and no nonce - existence cannot be proven\",\n            )\n        }\n    }\n\n    /// Returns true if the note is pending **and** from the same phase, i.e. if it's been created in the current\n    /// transaction during the current execution phase (either non-revertible or revertible).\n    pub fn is_pending_same_phase(self) -> bool {\n        self.stage == NoteStage.PENDING_SAME_PHASE\n    }\n\n    /// Returns true if the note is pending **and** from the previous phase, i.e. if it's been created in the current\n    /// transaction during an execution phase prior to the current one. Because private execution only has two phases\n    /// with strict ordering, this implies that the note was created in the non-revertible phase, and that the current\n    /// phase is the revertible phase.\n    pub fn is_pending_previous_phase(self) -> bool {\n        self.stage == NoteStage.PENDING_PREVIOUS_PHASE\n    }\n\n    /// Returns true if the note is settled, i.e. if it's been created in a prior transaction and is therefore already\n    /// in the note hash tree.\n    pub fn is_settled(self) -> bool {\n        self.stage == NoteStage.SETTLED\n    }\n\n    /// Asserts that the metadata is that of a pending note from the same phase and converts it accordingly.\n    pub fn to_pending_same_phase(self) -> PendingSamePhaseNoteMetadata {\n        assert_eq(self.stage, NoteStage.PENDING_SAME_PHASE);\n        PendingSamePhaseNoteMetadata::new()\n    }\n\n    /// Asserts that the metadata is that of a pending note from a previous phase and converts it accordingly.\n    pub fn to_pending_previous_phase(self) -> PendingPreviousPhaseNoteMetadata {\n        assert_eq(self.stage, NoteStage.PENDING_PREVIOUS_PHASE);\n        PendingPreviousPhaseNoteMetadata::new(self.maybe_note_nonce)\n    }\n\n    /// Asserts that the metadata is that of a settled note and converts it accordingly.\n    pub fn to_settled(self) -> SettledNoteMetadata {\n        assert_eq(self.stage, NoteStage.SETTLED);\n        SettledNoteMetadata::new(self.maybe_note_nonce)\n    }\n}\n\nimpl From<PendingSamePhaseNoteMetadata> for NoteMetadata {\n    fn from(_value: PendingSamePhaseNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(true, std::mem::zeroed())\n    }\n}\n\nimpl From<PendingPreviousPhaseNoteMetadata> for NoteMetadata {\n    fn from(value: PendingPreviousPhaseNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(true, value.note_nonce())\n    }\n}\n\nimpl From<SettledNoteMetadata> for NoteMetadata {\n    fn from(value: SettledNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(false, value.note_nonce())\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a pending same phase note, i.e. a note that was created in the transaction that is currently being\n/// executed during the current execution phase (either non-revertible or revertible).\npub struct PendingSamePhaseNoteMetadata {\n    // This struct contains no fields since there is no metadata associated with a pending same phase note: it has no\n    // nonce (since it may get squashed by a nullifier emitted in the same phase), and while it does have a note hash\n    // counter we cannot constrain its value (and don't need to - only that it is non-zero).\n}\n\nimpl PendingSamePhaseNoteMetadata {\n    pub fn new() -> Self {\n        Self {}\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a pending previous phase note, i.e. a note that was created in the transaction that is currently\n/// being executed, during the previous execution phase. Because there are only two phases and their order is always the\n/// same (first non-revertible and then revertible) this implies that the note was created in the non-revertible phase,\n/// and that the current phase is the revertible phase.\npub struct PendingPreviousPhaseNoteMetadata {\n    note_nonce: Field,\n    // This struct does not contain a note hash counter, even though one exists for this note, because we cannot\n    // constrain its value (and don't need to - only that it is non-zero).\n}\n\nimpl PendingPreviousPhaseNoteMetadata {\n    pub fn new(note_nonce: Field) -> Self {\n        Self { note_nonce }\n    }\n\n    pub fn note_nonce(self) -> Field {\n        self.note_nonce\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a settled note, i.e. a note that was created in a prior transaction and is therefore already in the\n/// note hash tree.\npub struct SettledNoteMetadata {\n    note_nonce: Field,\n}\n\nimpl SettledNoteMetadata {\n    pub fn new(note_nonce: Field) -> Self {\n        Self { note_nonce }\n    }\n\n    pub fn note_nonce(self) -> Field {\n        self.note_nonce\n    }\n}\n"
    },
    "151": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v1.0.0-staging.6/noir-projects/aztec-nr/aztec/src/note/utils.nr",
      "source": "use crate::{\n    context::PrivateContext,\n    note::{note_interface::NoteHash, retrieved_note::RetrievedNote},\n};\n\nuse dep::protocol_types::hash::{\n    compute_siloed_note_hash, compute_siloed_nullifier, compute_unique_note_hash,\n};\n\n/// Returns the note hash that must be used to issue a private kernel read request for a note.\npub fn compute_note_hash_for_read_request<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    let note_hash = retrieved_note.note.compute_note_hash(storage_slot);\n\n    if retrieved_note.metadata.is_settled() {\n        // Settled notes are read by siloing with contract address and nonce (resulting in the final unique note hash,\n        // which is already in the note hash tree).\n        let siloed_note_hash = compute_siloed_note_hash(retrieved_note.contract_address, note_hash);\n        compute_unique_note_hash(\n            retrieved_note.metadata.to_settled().note_nonce(),\n            siloed_note_hash,\n        )\n    } else {\n        // Pending notes (both same phase and previous phase ones)  re read by their non-siloed hash (not even by\n        // contract address), which is what is stored in the new note hashes array (at the position hinted by note hash\n        // counter).\n        note_hash\n    }\n}\n\n/// Returns the note hash that must be used to compute a note's nullifier when calling `NoteHash::compute_nullifier` or\n/// `NoteHash::compute_nullifier_unconstrained`.\npub fn compute_note_hash_for_nullify<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    compute_note_hash_for_nullify_from_read_request(\n        retrieved_note,\n        compute_note_hash_for_read_request(retrieved_note, storage_slot),\n    )\n}\n\n/// Same as `compute_note_hash_for_nullify`, except it takes the note hash used in a read request (i.e. what\n/// `compute_note_hash_for_read_request` would return). This is useful in scenarios where that hash has already been\n/// computed to reduce constraints by reusing this value.\npub fn compute_note_hash_for_nullify_from_read_request<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    note_hash_for_read_request: Field,\n) -> Field {\n    // There is just one instance in which the note hash for nullification does not match the note hash used for a read\n    // request, which is when dealing with pending previous phase notes. These had their existence proven using their\n    // non-siloed note hash along with the note hash counter (like all pending notes), but since they will be\n    // unconditionally inserted in the note hash tree (since they cannot be squashed) they must be nullified using the\n    // *unique* note hash.\n    // If we didn't, it'd be possible to emit a second different nullifier for the same note in a follow up transaction,\n    // once the note is settled, resulting in a double spend.\n\n    if retrieved_note.metadata.is_pending_previous_phase() {\n        let siloed_note_hash =\n            compute_siloed_note_hash(retrieved_note.contract_address, note_hash_for_read_request);\n        let note_nonce = retrieved_note.metadata.to_pending_previous_phase().note_nonce();\n\n        compute_unique_note_hash(note_nonce, siloed_note_hash)\n    } else {\n        note_hash_for_read_request\n    }\n}\n\n/// Computes a note's siloed nullifier, i.e. the one that will be inserted into the nullifier tree.\npub fn compute_siloed_note_nullifier<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n    context: &mut PrivateContext,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    let note_hash_for_nullify = compute_note_hash_for_nullify(retrieved_note, storage_slot);\n    let inner_nullifier = retrieved_note.note.compute_nullifier(context, note_hash_for_nullify);\n\n    compute_siloed_nullifier(retrieved_note.contract_address, inner_nullifier)\n}\n"
    },
    "155": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v1.0.0-staging.6/noir-projects/aztec-nr/aztec/src/oracle/call_private_function.nr",
      "source": "use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress, utils::reader::Reader,\n};\n\n#[oracle(callPrivateFunction)]\nunconstrained fn call_private_function_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _start_side_effect_counter: u32,\n    _is_static_call: bool,\n) -> [Field; 2] {}\n\npub unconstrained fn call_private_function_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    start_side_effect_counter: u32,\n    is_static_call: bool,\n) -> (u32, Field) {\n    let fields = call_private_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        start_side_effect_counter,\n        is_static_call,\n    );\n\n    let mut reader = Reader::new(fields);\n    let end_side_effect_counter = reader.read_u32();\n    let returns_hash = reader.read();\n\n    (end_side_effect_counter, returns_hash)\n}\n"
    },
    "156": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v1.0.0-staging.6/noir-projects/aztec-nr/aztec/src/oracle/capsules.nr",
      "source": "use protocol_types::{address::AztecAddress, traits::{Deserialize, Serialize}};\n\n/// Stores arbitrary information in a per-contract non-volatile database, which can later be retrieved with `load`. If\n/// data was already stored at this slot, it is overwritten.\npub unconstrained fn store<T, let N: u32>(contract_address: AztecAddress, slot: Field, value: T)\nwhere\n    T: Serialize<N>,\n{\n    let serialized = value.serialize();\n    store_oracle(contract_address, slot, serialized);\n}\n\n/// Returns data previously stored via `storeCapsule` in the per-contract non-volatile database. Returns Option::none() if\n/// nothing was stored at the given slot.\npub unconstrained fn load<T, let N: u32>(contract_address: AztecAddress, slot: Field) -> Option<T>\nwhere\n    T: Deserialize<N>,\n{\n    let serialized_option = load_oracle::<N>(contract_address, slot, N);\n    serialized_option.map(|arr| Deserialize::deserialize(arr))\n}\n\n/// Deletes data in the per-contract non-volatile database. Does nothing if no data was present.\npub unconstrained fn delete(contract_address: AztecAddress, slot: Field) {\n    delete_oracle(contract_address, slot);\n}\n\n/// Copies a number of contiguous entries in the per-contract non-volatile database. This allows for efficient data\n/// structures by avoiding repeated calls to `loadCapsule` and `storeCapsule`.\n/// Supports overlapping source and destination regions (which will result in the overlapped source values being\n/// overwritten). All copied slots must exist in the database (i.e. have been stored and not deleted)\npub unconstrained fn copy(\n    contract_address: AztecAddress,\n    src_slot: Field,\n    dst_slot: Field,\n    num_entries: u32,\n) {\n    copy_oracle(contract_address, src_slot, dst_slot, num_entries);\n}\n\n#[oracle(storeCapsule)]\nunconstrained fn store_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    slot: Field,\n    values: [Field; N],\n) {}\n\n/// We need to pass in `array_len` (the value of N) as a parameter to tell the oracle how many fields the response must\n/// have.\n///\n/// Note that the oracle returns an Option<[Field; N]> because we cannot return an Option<T> directly. That would\n/// require for the oracle resolver to know the shape of T (e.g. if T were a struct of 3 u32 values then the expected\n/// response shape would be 3 single items, whereas it were a struct containing `u32, [Field;10], u32` then the expected\n/// shape would be single, array, single.). Instead, we return the serialization and deserialize in Noir.\n#[oracle(loadCapsule)]\nunconstrained fn load_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    slot: Field,\n    array_len: u32,\n) -> Option<[Field; N]> {}\n\n#[oracle(deleteCapsule)]\nunconstrained fn delete_oracle(contract_address: AztecAddress, slot: Field) {}\n\n#[oracle(copyCapsule)]\nunconstrained fn copy_oracle(\n    contract_address: AztecAddress,\n    src_slot: Field,\n    dst_slot: Field,\n    num_entries: u32,\n) {}\n\nmod test {\n    // These tests are sort of redundant since we already test the oracle implementation directly in TypeScript, but\n    // they are cheap regardless and help ensure both that the TXE implementation works accordingly and that the Noir\n    // oracles are hooked up correctly.\n\n    use crate::{\n        oracle::capsules::{copy, delete, load, store},\n        test::{helpers::test_environment::TestEnvironment, mocks::mock_struct::MockStruct},\n    };\n    use protocol_types::{address::AztecAddress, traits::{FromField, ToField}};\n\n    unconstrained fn setup() -> AztecAddress {\n        let env = TestEnvironment::new();\n        env.contract_address()\n    }\n\n    global SLOT: Field = 1;\n\n    #[test]\n    unconstrained fn stores_and_loads() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n\n        assert_eq(load(contract_address, SLOT).unwrap(), value);\n    }\n\n    #[test]\n    unconstrained fn store_overwrites() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n\n        let new_value = MockStruct::new(7, 8);\n        store(contract_address, SLOT, new_value);\n\n        assert_eq(load(contract_address, SLOT).unwrap(), new_value);\n    }\n\n    #[test]\n    unconstrained fn loads_empty_slot() {\n        let contract_address = setup();\n\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn deletes_stored_value() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n        delete(contract_address, SLOT);\n\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn deletes_empty_slot() {\n        let contract_address = setup();\n\n        delete(contract_address, SLOT);\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn copies_non_overlapping_values() {\n        let contract_address = setup();\n\n        let src = 5;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 10;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n    }\n\n    #[test]\n    unconstrained fn copies_overlapping_values_with_src_ahead() {\n        let contract_address = setup();\n\n        let src = 1;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 2;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n\n        // src[1] and src[2] should have been overwritten since they are also dst[0] and dst[1]\n        assert_eq(load(contract_address, src).unwrap(), values[0]); // src[0] (unchanged)\n        assert_eq(load(contract_address, src + 1).unwrap(), values[0]); // dst[0]\n        assert_eq(load(contract_address, src + 2).unwrap(), values[1]); // dst[1]\n    }\n\n    #[test]\n    unconstrained fn copies_overlapping_values_with_dst_ahead() {\n        let contract_address = setup();\n\n        let src = 2;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 1;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n\n        // src[0] and src[1] should have been overwritten since they are also dst[1] and dst[2]\n        assert_eq(load(contract_address, src).unwrap(), values[1]); // dst[1]\n        assert_eq(load(contract_address, src + 1).unwrap(), values[2]); // dst[2]\n        assert_eq(load(contract_address, src + 2).unwrap(), values[2]); // src[2] (unchanged)\n    }\n\n    #[test(should_fail_with = \"copy empty slot\")]\n    unconstrained fn cannot_copy_empty_values() {\n        let contract_address = setup();\n\n        copy(contract_address, SLOT, SLOT, 1);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_store_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        let value = MockStruct::new(5, 6);\n        store(other_contract_address, SLOT, value);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_load_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        let _: Option<MockStruct> = load(other_contract_address, SLOT);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_delete_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        delete(other_contract_address, SLOT);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_copy_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        copy(other_contract_address, SLOT, SLOT, 0);\n    }\n}\n"
    },
    "157": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v1.0.0-staging.6/noir-projects/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr",
      "source": "use dep::protocol_types::address::AztecAddress;\n\n#[oracle(notifyEnqueuedPublicFunctionCall)]\nunconstrained fn notify_enqueued_public_function_call_oracle(\n    _contract_address: AztecAddress,\n    _calldata_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n) {}\n\nunconstrained fn notify_enqueued_public_function_call_wrapper(\n    contract_address: AztecAddress,\n    calldata_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) {\n    notify_enqueued_public_function_call_oracle(\n        contract_address,\n        calldata_hash,\n        side_effect_counter,\n        is_static_call,\n    )\n}\n\npub fn notify_enqueued_public_function_call(\n    contract_address: AztecAddress,\n    calldata_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) {\n    // Safety: Notifies the simulator that a public call has been enqueued, allowing it to prepare hints for the AVM to process this call.\n    unsafe {\n        notify_enqueued_public_function_call_wrapper(\n            contract_address,\n            calldata_hash,\n            side_effect_counter,\n            is_static_call,\n        )\n    }\n}\n\n#[oracle(notifySetPublicTeardownFunctionCall)]\nunconstrained fn notify_set_public_teardown_function_call_oracle(\n    _contract_address: AztecAddress,\n    _calldata_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n) {}\n\nunconstrained fn notify_set_public_teardown_function_call_wrapper(\n    contract_address: AztecAddress,\n    calldata_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) {\n    notify_set_public_teardown_function_call_oracle(\n        contract_address,\n        calldata_hash,\n        side_effect_counter,\n        is_static_call,\n    )\n}\n\npub fn notify_set_public_teardown_function_call(\n    contract_address: AztecAddress,\n    calldata_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) {\n    // Safety: Notifies the simulator that a teardown call has been set, allowing it to prepare hints for the AVM to process this call.\n    unsafe {\n        notify_set_public_teardown_function_call_wrapper(\n            contract_address,\n            calldata_hash,\n            side_effect_counter,\n            is_static_call,\n        )\n    }\n}\n\npub fn notify_set_min_revertible_side_effect_counter(counter: u32) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe { notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter) };\n}\n\npub unconstrained fn notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter: u32) {\n    notify_set_min_revertible_side_effect_counter_oracle(counter);\n}\n\n#[oracle(notifySetMinRevertibleSideEffectCounter)]\nunconstrained fn notify_set_min_revertible_side_effect_counter_oracle(_counter: u32) {}\n"
    },
    "158": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v1.0.0-staging.6/noir-projects/aztec-nr/aztec/src/oracle/execution.nr",
      "source": "use dep::protocol_types::address::AztecAddress;\n\n#[oracle(getContractAddress)]\nunconstrained fn get_contract_address_oracle() -> AztecAddress {}\n\n#[oracle(getBlockNumber)]\nunconstrained fn get_block_number_oracle() -> u32 {}\n\n#[oracle(getTimestamp)]\nunconstrained fn get_timestamp_oracle() -> u64 {}\n\n#[oracle(getChainId)]\nunconstrained fn get_chain_id_oracle() -> Field {}\n\n#[oracle(getVersion)]\nunconstrained fn get_version_oracle() -> Field {}\n\npub unconstrained fn get_contract_address() -> AztecAddress {\n    get_contract_address_oracle()\n}\n\npub unconstrained fn get_block_number() -> u32 {\n    get_block_number_oracle()\n}\n\npub unconstrained fn get_timestamp() -> u64 {\n    get_timestamp_oracle()\n}\n\npub unconstrained fn get_chain_id() -> Field {\n    get_chain_id_oracle()\n}\n\npub unconstrained fn get_version() -> Field {\n    get_version_oracle()\n}\n"
    },
    "159": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v1.0.0-staging.6/noir-projects/aztec-nr/aztec/src/oracle/execution_cache.nr",
      "source": "/// Stores values represented as slice in execution cache to be later obtained by its hash.\npub fn store(values: [Field], hash: Field) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call. When loading the values, however, the caller must check that the values are indeed the preimage.\n    unsafe { store_in_execution_cache_oracle_wrapper(values, hash) };\n}\n\nunconstrained fn store_in_execution_cache_oracle_wrapper(values: [Field], hash: Field) {\n    store_in_execution_cache_oracle(values, hash);\n}\n\npub unconstrained fn load<let N: u32>(hash: Field) -> [Field; N] {\n    load_from_execution_cache_oracle(hash)\n}\n\n#[oracle(storeInExecutionCache)]\nunconstrained fn store_in_execution_cache_oracle(_values: [Field], _hash: Field) {}\n\n#[oracle(loadFromExecutionCache)]\nunconstrained fn load_from_execution_cache_oracle<let N: u32>(_hash: Field) -> [Field; N] {}\n"
    },
    "16": {
      "path": "std/embedded_curve_ops.nr",
      "source": "use crate::cmp::Eq;\nuse crate::hash::Hash;\nuse crate::ops::arith::{Add, Neg, Sub};\n\n/// A point on the embedded elliptic curve\n/// By definition, the base field of the embedded curve is the scalar field of the proof system curve, i.e the Noir Field.\n/// x and y denotes the Weierstrass coordinates of the point, if is_infinite is false.\npub struct EmbeddedCurvePoint {\n    pub x: Field,\n    pub y: Field,\n    pub is_infinite: bool,\n}\n\nimpl EmbeddedCurvePoint {\n    /// Elliptic curve point doubling operation\n    /// returns the doubled point of a point P, i.e P+P\n    pub fn double(self) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, self)\n    }\n\n    /// Returns the null element of the curve; 'the point at infinity'\n    pub fn point_at_infinity() -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    }\n\n    /// Returns the curve's generator point.\n    pub fn generator() -> EmbeddedCurvePoint {\n        // Generator point for the grumpkin curve (y^2 = x^3 - 17)\n        EmbeddedCurvePoint {\n            x: 1,\n            y: 17631683881184975370165255887551781615748388533673675138860, // sqrt(-16)\n            is_infinite: false,\n        }\n    }\n}\n\nimpl Add for EmbeddedCurvePoint {\n    /// Adds two points P+Q, using the curve addition formula, and also handles point at infinity\n    fn add(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, other)\n    }\n}\n\nimpl Sub for EmbeddedCurvePoint {\n    /// Points subtraction operation, using addition and negation\n    fn sub(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        self + other.neg()\n    }\n}\n\nimpl Neg for EmbeddedCurvePoint {\n    /// Negates a point P, i.e returns -P, by negating the y coordinate.\n    /// If the point is at infinity, then the result is also at infinity.\n    fn neg(self) -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: self.x, y: -self.y, is_infinite: self.is_infinite }\n    }\n}\n\nimpl Eq for EmbeddedCurvePoint {\n    /// Checks whether two points are equal\n    fn eq(self: Self, b: EmbeddedCurvePoint) -> bool {\n        (self.is_infinite & b.is_infinite)\n            | ((self.is_infinite == b.is_infinite) & (self.x == b.x) & (self.y == b.y))\n    }\n}\n\nimpl Hash for EmbeddedCurvePoint {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: crate::hash::Hasher,\n    {\n        if self.is_infinite {\n            self.is_infinite.hash(state);\n        } else {\n            self.x.hash(state);\n            self.y.hash(state);\n        }\n    }\n}\n\n/// Scalar for the embedded curve represented as low and high limbs\n/// By definition, the scalar field of the embedded curve is base field of the proving system curve.\n/// It may not fit into a Field element, so it is represented with two Field elements; its low and high limbs.\npub struct EmbeddedCurveScalar {\n    pub lo: Field,\n    pub hi: Field,\n}\n\nimpl EmbeddedCurveScalar {\n    pub fn new(lo: Field, hi: Field) -> Self {\n        EmbeddedCurveScalar { lo, hi }\n    }\n\n    #[field(bn254)]\n    pub fn from_field(scalar: Field) -> EmbeddedCurveScalar {\n        let (a, b) = crate::field::bn254::decompose(scalar);\n        EmbeddedCurveScalar { lo: a, hi: b }\n    }\n\n    //Bytes to scalar: take the first (after the specified offset) 16 bytes of the input as the lo value, and the next 16 bytes as the hi value\n    #[field(bn254)]\n    pub(crate) fn from_bytes(bytes: [u8; 64], offset: u32) -> EmbeddedCurveScalar {\n        let mut v = 1;\n        let mut lo = 0 as Field;\n        let mut hi = 0 as Field;\n        for i in 0..16 {\n            lo = lo + (bytes[offset + 31 - i] as Field) * v;\n            hi = hi + (bytes[offset + 15 - i] as Field) * v;\n            v = v * 256;\n        }\n        let sig_s = crate::embedded_curve_ops::EmbeddedCurveScalar { lo, hi };\n        sig_s\n    }\n}\n\nimpl Eq for EmbeddedCurveScalar {\n    fn eq(self, other: Self) -> bool {\n        (other.hi == self.hi) & (other.lo == self.lo)\n    }\n}\n\nimpl Hash for EmbeddedCurveScalar {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: crate::hash::Hasher,\n    {\n        self.hi.hash(state);\n        self.lo.hash(state);\n    }\n}\n\n// Computes a multi scalar multiplication over the embedded curve.\n// For bn254, We have Grumpkin and Baby JubJub.\n// For bls12-381, we have JubJub and Bandersnatch.\n//\n// The embedded curve being used is decided by the\n// underlying proof system.\n// docs:start:multi_scalar_mul\npub fn multi_scalar_mul<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> EmbeddedCurvePoint\n// docs:end:multi_scalar_mul\n{\n    multi_scalar_mul_array_return(points, scalars)[0]\n}\n\n#[foreign(multi_scalar_mul)]\npub(crate) fn multi_scalar_mul_array_return<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> [EmbeddedCurvePoint; 1] {}\n\n// docs:start:fixed_base_scalar_mul\npub fn fixed_base_scalar_mul(scalar: EmbeddedCurveScalar) -> EmbeddedCurvePoint\n// docs:end:fixed_base_scalar_mul\n{\n    multi_scalar_mul([EmbeddedCurvePoint::generator()], [scalar])\n}\n\n/// This function only assumes that the points are on the curve\n/// It handles corner cases around the infinity point causing some overhead compared to embedded_curve_add_not_nul and embedded_curve_add_unsafe\n// docs:start:embedded_curve_add\npub fn embedded_curve_add(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    // docs:end:embedded_curve_add\n    if crate::runtime::is_unconstrained() {\n        // `embedded_curve_add_unsafe` requires the inputs not to be the infinity point, so we check it here.\n        // This is because `embedded_curve_add_unsafe` uses the `embedded_curve_add` opcode.\n        // For efficiency, the backend does not check the inputs for the infinity point, but it assumes that they are not the infinity point\n        // so that it can apply the ec addition formula directly.\n        if point1.is_infinite {\n            point2\n        } else if point2.is_infinite {\n            point1\n        } else {\n            embedded_curve_add_unsafe(point1, point2)\n        }\n    } else {\n        // In a constrained context, we also need to check the inputs are not the infinity point because we also use `embedded_curve_add_unsafe`\n        // However we also need to identify the case where the two inputs are the same, because then\n        // the addition formula does not work and we need to use the doubling formula instead.\n        // In unconstrained context, we can check directly if the input values are the same when solving the opcode, so it is not an issue.\n\n        // x_coordinates_match is true if both abscissae are the same\n        let x_coordinates_match = point1.x == point2.x;\n        // y_coordinates_match is true if both ordinates are the same\n        let y_coordinates_match = point1.y == point2.y;\n        // double_predicate is true if both abscissae and ordinates are the same\n        let double_predicate = (x_coordinates_match & y_coordinates_match);\n        // If the abscissae are the same, but not the ordinates, then one point is the opposite of the other\n        let infinity_predicate = (x_coordinates_match & !y_coordinates_match);\n        let point1_1 = EmbeddedCurvePoint {\n            x: point1.x + (x_coordinates_match as Field),\n            y: point1.y,\n            is_infinite: false,\n        };\n        let point2_1 = EmbeddedCurvePoint { x: point2.x, y: point2.y, is_infinite: false };\n        // point1_1 is guaranteed to have a different abscissa than point2:\n        // - if x_coordinates_match is 0, that means point1.x != point2.x, and point1_1.x = point1.x + 0\n        // - if x_coordinates_match is 1, that means point1.x = point2.x, but point1_1.x = point1.x + 1 in this case\n        // Because the abscissa is different, the addition formula is guaranteed to succeed, so we can safely use `embedded_curve_add_unsafe`\n        // Note that this computation may be garbage: if x_coordinates_match is 1, or if one of the input is the point at infinity.\n        let mut result = embedded_curve_add_unsafe(point1_1, point2_1);\n\n        // `embedded_curve_add_unsafe` is doing a doubling if the input is the same variable, because in this case it is guaranteed (at 'compile time') that the input is the same.\n        let double = embedded_curve_add_unsafe(point1, point1);\n        // `embedded_curve_add_unsafe` would not perform doubling, even if the inputs point1 and point2 are the same, because it cannot know this without adding some logic (and some constraints)\n        // However we did this logic when we computed `double_predicate`, so we set the result to 2*point1 if point1 and point2 are the same\n        result = if double_predicate { double } else { result };\n\n        // Same logic as above for unconstrained context, we set the proper result when one of the inputs is the infinity point\n        if point1.is_infinite {\n            result = point2;\n        }\n        if point2.is_infinite {\n            result = point1;\n        }\n\n        // Finally, we set the is_infinity flag of the result:\n        // Opposite points should sum into the infinity point, however, if one of them is point at infinity, their coordinates are not meaningful\n        // so we should not use the fact that the inputs are opposite in this case:\n        let mut result_is_infinity =\n            infinity_predicate & (!point1.is_infinite & !point2.is_infinite);\n        // However, if both of them are at infinity, then the result is also at infinity\n        result.is_infinite = result_is_infinity | (point1.is_infinite & point2.is_infinite);\n        result\n    }\n}\n\n#[foreign(embedded_curve_add)]\nfn embedded_curve_add_array_return(\n    _point1: EmbeddedCurvePoint,\n    _point2: EmbeddedCurvePoint,\n) -> [EmbeddedCurvePoint; 1] {}\n\n/// This function assumes that:\n/// The points are on the curve, and\n/// The points don't share an x-coordinate, and\n/// Neither point is the infinity point.\n/// If it is used with correct input, the function ensures the correct non-zero result is returned.\n/// Except for points on the curve, the other assumptions are checked by the function. It will cause assertion failure if they are not respected.\npub fn embedded_curve_add_not_nul(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    assert(point1.x != point2.x);\n    assert(!point1.is_infinite);\n    assert(!point2.is_infinite);\n    // Ensure is_infinite is comptime\n    let point1_1 = EmbeddedCurvePoint { x: point1.x, y: point1.y, is_infinite: false };\n    let point2_1 = EmbeddedCurvePoint { x: point2.x, y: point2.y, is_infinite: false };\n    embedded_curve_add_unsafe(point1_1, point2_1)\n}\n\n/// Unsafe ec addition\n/// If the inputs are the same, it will perform a doubling, but only if point1 and point2 are the same variable.\n/// If they have the same value but are different variables, the result will be incorrect because in this case\n/// it assumes (but does not check) that the points' x-coordinates are not equal.\n/// It also assumes neither point is the infinity point.\npub fn embedded_curve_add_unsafe(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    embedded_curve_add_array_return(point1, point2)[0]\n}\n"
    },
    "160": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v1.0.0-staging.6/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr",
      "source": "use protocol_types::{\n    address::AztecAddress, contract_class_id::ContractClassId, contract_instance::ContractInstance,\n    traits::FromField,\n};\n\n// NOTE: this is for use in private only\n#[oracle(getContractInstance)]\nunconstrained fn get_contract_instance_oracle(_address: AztecAddress) -> ContractInstance {}\n\n// NOTE: this is for use in private only\nunconstrained fn get_contract_instance_internal(address: AztecAddress) -> ContractInstance {\n    get_contract_instance_oracle(address)\n}\n\n// NOTE: this is for use in private only\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    // Safety: The to_address function combines all values in the instance object to produce an address,\n    // so by checking that we get the expected address we validate the entire struct.\n    let instance = unsafe { get_contract_instance_internal(address) };\n    assert_eq(instance.to_address(), address);\n\n    instance\n}\n\nstruct GetContractInstanceResult {\n    exists: bool,\n    member: Field,\n}\n\n// These oracles each return a ContractInstance member\n// plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstanceDeployer)]\nunconstrained fn get_contract_instance_deployer_oracle_avm(\n    _address: AztecAddress,\n) -> [GetContractInstanceResult; 1] {}\n#[oracle(avmOpcodeGetContractInstanceClassId)]\nunconstrained fn get_contract_instance_class_id_oracle_avm(\n    _address: AztecAddress,\n) -> [GetContractInstanceResult; 1] {}\n#[oracle(avmOpcodeGetContractInstanceInitializationHash)]\nunconstrained fn get_contract_instance_initialization_hash_oracle_avm(\n    _address: AztecAddress,\n) -> [GetContractInstanceResult; 1] {}\n\nunconstrained fn get_contract_instance_deployer_internal_avm(\n    address: AztecAddress,\n) -> [GetContractInstanceResult; 1] {\n    get_contract_instance_deployer_oracle_avm(address)\n}\nunconstrained fn get_contract_instance_class_id_internal_avm(\n    address: AztecAddress,\n) -> [GetContractInstanceResult; 1] {\n    get_contract_instance_class_id_oracle_avm(address)\n}\nunconstrained fn get_contract_instance_initialization_hash_internal_avm(\n    address: AztecAddress,\n) -> [GetContractInstanceResult; 1] {\n    get_contract_instance_initialization_hash_oracle_avm(address)\n}\n\npub fn get_contract_instance_deployer_avm(address: AztecAddress) -> Option<AztecAddress> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let GetContractInstanceResult { exists, member } =\n        unsafe { get_contract_instance_deployer_internal_avm(address)[0] };\n    if exists {\n        Option::some(AztecAddress::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_class_id_avm(address: AztecAddress) -> Option<ContractClassId> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let GetContractInstanceResult { exists, member } =\n        unsafe { get_contract_instance_class_id_internal_avm(address)[0] };\n    if exists {\n        Option::some(ContractClassId::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_initialization_hash_avm(address: AztecAddress) -> Option<Field> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let GetContractInstanceResult { exists, member } =\n        unsafe { get_contract_instance_initialization_hash_internal_avm(address)[0] };\n    if exists {\n        Option::some(member)\n    } else {\n        Option::none()\n    }\n}\n"
    },
    "165": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v1.0.0-staging.6/noir-projects/aztec-nr/aztec/src/oracle/key_validation_request.nr",
      "source": "use protocol_types::abis::validation_requests::KeyValidationRequest;\n\n#[oracle(getKeyValidationRequest)]\nunconstrained fn get_key_validation_request_oracle(\n    _pk_m_hash: Field,\n    _key_index: Field,\n) -> KeyValidationRequest {}\n\npub unconstrained fn get_key_validation_request(\n    pk_m_hash: Field,\n    key_index: Field,\n) -> KeyValidationRequest {\n    get_key_validation_request_oracle(pk_m_hash, key_index)\n}\n"
    },
    "166": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v1.0.0-staging.6/noir-projects/aztec-nr/aztec/src/oracle/keys.nr",
      "source": "use dep::protocol_types::{\n    address::{AztecAddress, PartialAddress},\n    point::Point,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, TpkM},\n};\n\n#[oracle(getPublicKeysAndPartialAddress)]\nunconstrained fn get_public_keys_and_partial_address_oracle(_address: AztecAddress) -> [Field; 13] {}\n\npub unconstrained fn get_public_keys_and_partial_address(\n    address: AztecAddress,\n) -> (PublicKeys, PartialAddress) {\n    let result = get_public_keys_and_partial_address_oracle(address);\n\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: result[0], y: result[1], is_infinite: result[2] != 0 } },\n        ivpk_m: IvpkM { inner: Point { x: result[3], y: result[4], is_infinite: result[5] != 0 } },\n        ovpk_m: OvpkM { inner: Point { x: result[6], y: result[7], is_infinite: result[8] != 0 } },\n        tpk_m: TpkM { inner: Point { x: result[9], y: result[10], is_infinite: result[11] != 0 } },\n    };\n\n    let partial_address = PartialAddress::from_field(result[12]);\n\n    (keys, partial_address)\n}\n"
    },
    "168": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v1.0.0-staging.6/noir-projects/aztec-nr/aztec/src/oracle/message_processing.nr",
      "source": "use protocol_types::address::AztecAddress;\n\n/// Finds new private logs that may have been sent to all registered accounts in PXE in the current contract and makes\n/// them available for later processing in Noir by storing them in a capsule array.\npub unconstrained fn fetch_tagged_logs(pending_tagged_log_array_base_slot: Field) {\n    fetch_tagged_logs_oracle(pending_tagged_log_array_base_slot);\n}\n\n#[oracle(fetchTaggedLogs)]\nunconstrained fn fetch_tagged_logs_oracle(pending_tagged_log_array_base_slot: Field) {}\n\n// This must be a single oracle and not one for notes and one for events because the entire point is to validate\n// all notes and events in one go, minimizing node round-trips.\npub(crate) unconstrained fn validate_enqueued_notes_and_events(\n    contract_address: AztecAddress,\n    note_validation_requests_array_base_slot: Field,\n    event_validation_requests_array_base_slot: Field,\n) {\n    validate_enqueued_notes_and_events_oracle(\n        contract_address,\n        note_validation_requests_array_base_slot,\n        event_validation_requests_array_base_slot,\n    );\n}\n\n#[oracle(validateEnqueuedNotesAndEvents)]\nunconstrained fn validate_enqueued_notes_and_events_oracle(\n    contract_address: AztecAddress,\n    note_validation_requests_array_base_slot: Field,\n    event_validation_requests_array_base_slot: Field,\n) {}\n\npub(crate) unconstrained fn bulk_retrieve_logs(\n    contract_address: AztecAddress,\n    log_retrieval_requests_array_base_slot: Field,\n    log_retrieval_responses_array_base_slot: Field,\n) {\n    bulk_retrieve_logs_oracle(\n        contract_address,\n        log_retrieval_requests_array_base_slot,\n        log_retrieval_responses_array_base_slot,\n    );\n}\n\n#[oracle(bulkRetrieveLogs)]\nunconstrained fn bulk_retrieve_logs_oracle(\n    contract_address: AztecAddress,\n    log_retrieval_requests_array_base_slot: Field,\n    log_retrieval_responses_array_base_slot: Field,\n) {}\n"
    },
    "17": {
      "path": "std/field/bn254.nr",
      "source": "use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 128 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low = (x as u128) as Field;\n    let high = (x - low) / TWO_POW_128;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    // Safety: borrow is enforced to be boolean due to its type.\n    // if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    // if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        // Safety: decomposition is properly checked below\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            // Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unsafe in unconstrained\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        // Safety: Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n"
    },
    "173": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v1.0.0-staging.6/noir-projects/aztec-nr/aztec/src/oracle/shared_secret.nr",
      "source": "use protocol_types::{address::aztec_address::AztecAddress, point::Point};\n\n// TODO(#12656): return an app-siloed secret + document this\n#[oracle(getSharedSecret)]\nunconstrained fn get_shared_secret_oracle(address: AztecAddress, ephPk: Point) -> Point {}\n\n/// Returns an app-siloed shared secret between `address` and someone who knows the secret key behind an\n/// ephemeral public key `ephPk`. The app-siloing means that contracts cannot retrieve secrets that belong to\n/// other contracts, and therefore cannot e.g. decrypt their messages. This is an important security consideration\n/// given that both the `address` and `ephPk` are public information.\n///\n/// The shared secret `S` is computed as:\n/// `let S =  (ivsk + h) * ephPk`\n/// where `ivsk + h` is the 'preaddress' i.e. the preimage of the address, also called the address secret.\n/// TODO(#12656): app-silo this secret\npub unconstrained fn get_shared_secret(address: AztecAddress, ephPk: Point) -> Point {\n    get_shared_secret_oracle(address, ephPk)\n}\n"
    },
    "177": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v1.0.0-staging.6/noir-projects/aztec-nr/aztec/src/state_vars/map.nr",
      "source": "use crate::state_vars::storage::Storage;\nuse dep::protocol_types::{storage::map::derive_storage_slot_in_map, traits::ToField};\n\n// docs:start:map\npub struct Map<K, V, Context> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\n// Map reserves a single storage slot regardless of what it stores because nothing is stored at said slot: it is only\n// used to derive the storage slots of nested state variables, which is expected to never result in collisions or slots\n// being close to one another due to these being hashes. This mirrors the strategy adopted by Solidity mappings.\nimpl<K, T, Context> Storage<1> for Map<K, T, Context> {\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<K, V, Context> Map<K, V, Context> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V\n    where\n        K: ToField,\n    {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = derive_storage_slot_in_map(self.storage_slot, key);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n"
    },
    "18": {
      "path": "std/field/mod.nr",
      "source": "pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        __assert_max_bit_size(self, BIT_SIZE);\n    }\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = __to_le_bits(self);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = __to_be_bits(self);\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        __to_le_radix(self, radix)\n    }\n\n    fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        __to_be_radix(self, radix)\n    }\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(apply_range_constraint)]\nfn __assert_max_bit_size(value: Field, bit_size: u32) {}\n\n// `_radix` must be less than 256\n#[builtin(to_le_radix)]\nfn __to_le_radix<let N: u32>(value: Field, radix: u32) -> [u8; N] {}\n\n// `_radix` must be less than 256\n#[builtin(to_be_radix)]\nfn __to_be_radix<let N: u32>(value: Field, radix: u32) -> [u8; N] {}\n\n/// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n/// This slice will be zero padded should not all bits be necessary to represent `self`.\n///\n/// # Failures\n/// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n/// be able to represent the original `Field`.\n///\n/// # Safety\n/// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n/// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n/// wrap around due to overflow when verifying the decomposition.\n#[builtin(to_le_bits)]\nfn __to_le_bits<let N: u32>(value: Field) -> [u1; N] {}\n\n/// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n/// This array will be zero padded should not all bits be necessary to represent `self`.\n///\n/// # Failures\n/// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n/// be able to represent the original `Field`.\n///\n/// # Safety\n/// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n/// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n/// wrap around due to overflow when verifying the decomposition.\n#[builtin(to_be_bits)]\nfn __to_be_bits<let N: u32>(value: Field) -> [u1; N] {}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n"
    },
    "186": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v1.0.0-staging.6/noir-projects/aztec-nr/aztec/src/state_vars/public_mutable.nr",
      "source": "use crate::context::{PublicContext, UtilityContext};\nuse crate::state_vars::storage::Storage;\nuse dep::protocol_types::traits::Packable;\n\n// docs:start:public_mutable_struct\npub struct PublicMutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_mutable_struct\n\nimpl<T, Context, let N: u32> Storage<N> for PublicMutable<T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<T, Context> PublicMutable<T, Context> {\n    // docs:start:public_mutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicMutable { context, storage_slot }\n    }\n    // docs:end:public_mutable_struct_new\n}\n\nimpl<T> PublicMutable<T, &mut PublicContext> {\n    // docs:start:public_mutable_struct_read\n    pub fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN>,\n    {\n        self.context.storage_read(self.storage_slot)\n    }\n    // docs:end:public_mutable_struct_read\n\n    // docs:start:public_mutable_struct_write\n    pub fn write<let T_PACKED_LEN: u32>(self, value: T)\n    where\n        T: Packable<T_PACKED_LEN>,\n    {\n        self.context.storage_write(self.storage_slot, value);\n    }\n    // docs:end:public_mutable_struct_write\n}\n\nimpl<T> PublicMutable<T, UtilityContext> {\n    pub unconstrained fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN>,\n    {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n"
    },
    "19": {
      "path": "std/hash/mod.nr",
      "source": "// Exposed only for usage in `std::meta`\npub(crate) mod poseidon2;\n\nuse crate::default::Default;\nuse crate::embedded_curve_ops::{\n    EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_array_return,\n};\nuse crate::meta::derive_via;\n\n#[foreign(sha256_compression)]\n// docs:start:sha256_compression\npub fn sha256_compression(input: [u32; 16], state: [u32; 8]) -> [u32; 8] {}\n// docs:end:sha256_compression\n\n#[foreign(keccakf1600)]\n// docs:start:keccakf1600\npub fn keccakf1600(input: [u64; 25]) -> [u64; 25] {}\n// docs:end:keccakf1600\n\npub mod keccak {\n    #[deprecated(\"This function has been moved to std::hash::keccakf1600\")]\n    pub fn keccakf1600(input: [u64; 25]) -> [u64; 25] {\n        super::keccakf1600(input)\n    }\n}\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{\n    if crate::runtime::is_unconstrained() {\n        // Temporary measure while Barretenberg is main proving system.\n        // Please open an issue if you're working on another proving system and running into problems due to this.\n        crate::static_assert(\n            N <= 1024,\n            \"Barretenberg cannot prove blake3 hashes with inputs larger than 1024 bytes\",\n        );\n    }\n    __blake3(input)\n}\n\n#[foreign(blake3)]\nfn __blake3<let N: u32>(input: [u8; N]) -> [u8; 32] {}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[inline_always]\npub fn pedersen_commitment_with_separator<let N: u32>(\n    input: [Field; N],\n    separator: u32,\n) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[no_predicates]\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: [EmbeddedCurveScalar; N + 1] = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N + 1];\n    let mut generators: [EmbeddedCurvePoint; N + 1] =\n        [EmbeddedCurvePoint::point_at_infinity(); N + 1];\n    let domain_generators: [EmbeddedCurvePoint; N] =\n        derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n\n    for i in 0..N {\n        scalars[i] = from_field_unsafe(input[i]);\n        generators[i] = domain_generators[i];\n    }\n    scalars[N] = EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field };\n\n    let length_generator: [EmbeddedCurvePoint; 1] =\n        derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    generators[N] = length_generator[0];\n    multi_scalar_mul_array_return(generators, scalars)[0].x\n}\n\n#[field(bn254)]\n#[inline_always]\npub fn derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n// Same as from_field but:\n// does not assert the limbs are 128 bits\n// does not assert the decomposition does not overflow the EmbeddedCurveScalar\nfn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    // Safety: xlo and xhi decomposition is checked below\n    let (xlo, xhi) = unsafe { crate::field::bn254::decompose_hint(scalar) };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: TypeDefinition) -> Quoted {\n    let name = quote { $crate::hash::Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: $crate::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(\n        s,\n        name,\n        signature,\n        for_each_field,\n        quote {},\n        |fields| fields,\n    )\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher {\n    type H: Hasher;\n\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    type H = H;\n\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u128 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H)\n    where\n        H: Hasher,\n    {}\n}\n\nimpl<T, let N: u32> Hash for [T; N]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B)\nwhere\n    A: Hash,\n    B: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n    E: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1),\n        0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1),\n        EmbeddedCurvePoint {\n            x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n            y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n            is_infinite: false,\n        },\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2),\n        0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2),\n        EmbeddedCurvePoint {\n            x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n            y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3),\n        0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3),\n        EmbeddedCurvePoint {\n            x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n            y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4),\n        0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4),\n        EmbeddedCurvePoint {\n            x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n            y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5),\n        0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5),\n        EmbeddedCurvePoint {\n            x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n            y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6),\n        0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6),\n        EmbeddedCurvePoint {\n            x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n            y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        EmbeddedCurvePoint {\n            x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n            y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        EmbeddedCurvePoint {\n            x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n            y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        EmbeddedCurvePoint {\n            x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n            y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        EmbeddedCurvePoint {\n            x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n            y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n            is_infinite: false,\n        },\n    );\n}\n"
    },
    "200": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v1.0.0-staging.6/noir-projects/aztec-nr/aztec/src/utils/array/append.nr",
      "source": "/// Appends two `BoundedVec`s together, returning one that contains all of the elements of the first one followed by all\n/// of the elements of the second one. The resulting `BoundedVec` can have any arbitrary maximum length, but it must be\n/// large enough to fit all of the elements of both the first and second vectors.\npub fn append<T, let A_LEN: u32, let B_LEN: u32, let DST_LEN: u32>(\n    a: BoundedVec<T, A_LEN>,\n    b: BoundedVec<T, B_LEN>,\n) -> BoundedVec<T, DST_LEN> {\n    let mut dst = BoundedVec::new();\n\n    dst.extend_from_bounded_vec(a);\n    dst.extend_from_bounded_vec(b);\n\n    dst\n}\n\nmod test {\n    use super::append;\n\n    #[test]\n    unconstrained fn append_empty_vecs() {\n        let a: BoundedVec<_, 3> = BoundedVec::new();\n        let b: BoundedVec<_, 14> = BoundedVec::new();\n\n        let result: BoundedVec<Field, 5> = append(a, b);\n\n        assert_eq(result.len(), 0);\n        assert_eq(result.storage(), std::mem::zeroed());\n    }\n\n    #[test]\n    unconstrained fn append_non_empty_vecs() {\n        let a: BoundedVec<_, 3> = BoundedVec::from_array([1, 2, 3]);\n        let b: BoundedVec<_, 14> = BoundedVec::from_array([4, 5, 6]);\n\n        let result: BoundedVec<Field, 8> = append(a, b);\n\n        assert_eq(result.len(), 6);\n        assert_eq(result.storage(), [1, 2, 3, 4, 5, 6, std::mem::zeroed(), std::mem::zeroed()]);\n    }\n\n    #[test(should_fail_with = \"out of bounds\")]\n    unconstrained fn append_non_empty_vecs_insufficient_max_len() {\n        let a: BoundedVec<_, 3> = BoundedVec::from_array([1, 2, 3]);\n        let b: BoundedVec<_, 14> = BoundedVec::from_array([4, 5, 6]);\n\n        let _: BoundedVec<Field, 5> = append(a, b);\n    }\n}\n"
    },
    "203": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v1.0.0-staging.6/noir-projects/aztec-nr/aztec/src/utils/array/subarray.nr",
      "source": "/// Returns `DST_LEN` elements from a source array, starting at `offset`. `DST_LEN` must not be larger than the number\n/// of elements past `offset`.\n///\n/// Examples:\n/// ```\n/// let foo: [Field; 2] = subarray([1, 2, 3, 4, 5], 2);\n/// assert_eq(foo, [3, 4]);\n///\n/// let bar: [Field; 5] = subarray([1, 2, 3, 4, 5], 2); // fails - we can't return 5 elements since only 3 remain\n/// ```\npub fn subarray<T, let SRC_LEN: u32, let DST_LEN: u32>(\n    src: [T; SRC_LEN],\n    offset: u32,\n) -> [T; DST_LEN] {\n    assert(offset + DST_LEN <= SRC_LEN, \"DST_LEN too large for offset\");\n\n    let mut dst: [T; DST_LEN] = std::mem::zeroed();\n    for i in 0..DST_LEN {\n        dst[i] = src[i + offset];\n    }\n\n    dst\n}\n\nmod test {\n    use super::subarray;\n\n    #[test]\n    unconstrained fn subarray_into_empty() {\n        // In all of these cases we're setting DST_LEN to be 0, so we always get back an emtpy array.\n        assert_eq(subarray::<Field, _, _>([], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 2), []);\n    }\n\n    #[test]\n    unconstrained fn subarray_complete() {\n        assert_eq(subarray::<Field, _, _>([], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 0), [1, 2, 3, 4, 5]);\n    }\n\n    #[test]\n    unconstrained fn subarray_different_end_sizes() {\n        // We implicitly select how many values to read in the size of the return array\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3, 4, 5]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3, 4]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2]);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subarray_offset_too_large() {\n        // With an offset of 1 we can only request up to 4 elements\n        let _: [_; 5] = subarray([1, 2, 3, 4, 5], 1);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subarray_bad_return_value() {\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [3, 3, 4, 5]);\n    }\n}\n"
    },
    "204": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v1.0.0-staging.6/noir-projects/aztec-nr/aztec/src/utils/array/subbvec.nr",
      "source": "use crate::utils::array;\n\n/// Returns `DST_MAX_LEN` elements from a source BoundedVec, starting at `offset`. `offset` must not be larger than the\n/// original length, and `DST_LEN` must not be larger than the total number of elements past `offset` (including the\n/// zeroed elements past `len()`).\n///\n/// Only elements at the beginning of the vector can be removed: it is not possible to also remove elements at the end\n/// of the vector by passing a value for `DST_LEN` that is smaller than `len() - offset`.\n///\n/// Examples:\n/// ```\n/// let foo = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n/// assert_eq(subbvec(foo, 2), BoundedVec::<_, 8>::from_array([3, 4, 5]));\n///\n/// let bar: BoundedVec<_, 1> = subbvec(foo, 2); // fails - we can't return just 1 element since 3 remain\n/// let baz: BoundedVec<_, 10> = subbvec(foo, 3); // fails - we can't return 10 elements since only 7 remain\n/// ```\npub fn subbvec<T, let SRC_MAX_LEN: u32, let DST_MAX_LEN: u32>(\n    bvec: BoundedVec<T, SRC_MAX_LEN>,\n    offset: u32,\n) -> BoundedVec<T, DST_MAX_LEN> {\n    // from_parts_unchecked does not verify that the elements past len are zeroed, but that is not an issue in our case\n    // because we're constructing the new storage array as a subarray of the original one (which should have zeroed\n    // storage past len), guaranteeing correctness. This is because `subarray` does not allow extending arrays past\n    // their original length.\n    BoundedVec::from_parts_unchecked(array::subarray(bvec.storage(), offset), bvec.len() - offset)\n}\n\nmod test {\n    use super::subbvec;\n\n    #[test]\n    unconstrained fn subbvec_empty() {\n        let bvec = BoundedVec::<Field, 0>::from_array([]);\n        assert_eq(subbvec(bvec, 0), bvec);\n    }\n\n    #[test]\n    unconstrained fn subbvec_complete() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 0), bvec);\n\n        let smaller_capacity = BoundedVec::<_, 5>::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 0), smaller_capacity);\n    }\n\n    #[test]\n    unconstrained fn subbvec_partial() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        assert_eq(subbvec(bvec, 2), BoundedVec::<_, 8>::from_array([3, 4, 5]));\n        assert_eq(subbvec(bvec, 2), BoundedVec::<_, 3>::from_array([3, 4, 5]));\n    }\n\n    #[test]\n    unconstrained fn subbvec_into_empty() {\n        let bvec: BoundedVec<_, 10> = BoundedVec::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 5), BoundedVec::<_, 5>::from_array([]));\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subbvec_offset_past_len() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n        let _: BoundedVec<_, 1> = subbvec(bvec, 6);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subbvec_insufficient_dst_len() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // We're not providing enough space to hold all of the items inside the original BoundedVec. subbvec can cause\n        // for the capacity to reduce, but not the length (other than by len - offset).\n        let _: BoundedVec<_, 1> = subbvec(bvec, 2);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subbvec_dst_len_causes_enlarge() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // subbvec does not supprt capacity increases\n        let _: BoundedVec<_, 11> = subbvec(bvec, 0);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subbvec_dst_len_too_large_for_offset() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // This effectively requests a capacity increase, since there'd be just one element plus the 5 empty slots,\n        // which is less than 7.\n        let _: BoundedVec<_, 7> = subbvec(bvec, 4);\n    }\n}\n"
    },
    "206": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v1.0.0-staging.6/noir-projects/aztec-nr/aztec/src/utils/conversion/bytes_to_fields.nr",
      "source": "use std::static_assert;\n\n// These functions are used to facilitate the conversion of log ciphertext between byte and field representations.\n//\n// `bytes_to_fields` uses fixed-size arrays since encryption contexts have compile-time size information.\n// `bytes_from_fields` uses BoundedVec for flexibility in unconstrained contexts where sizes are dynamic.\n//\n// Together they provide bidirectional conversion between bytes and fields when processing encrypted logs.\n\n/// Converts the input bytes into an array of fields. A Field is ~254 bits meaning that each field can store 31 whole\n/// bytes. Use `bytes_from_fields` to obtain the original bytes array.\n///\n/// The input bytes are chunked into chunks of 31 bytes. Each 31-byte chunk is viewed as big-endian, and is converted\n/// into a Field.\n/// For example, [1, 10, 3, ..., 0] (31 bytes) is encoded as [1 * 256^30 + 10 * 256^29 + 3 * 256^28 + ... + 0]\n/// Note: N must be a multiple of 31 bytes\npub fn bytes_to_fields<let N: u32>(bytes: [u8; N]) -> [Field; N / 31] {\n    // Assert that N is a multiple of 31\n    static_assert(N % 31 == 0, \"N must be a multiple of 31\");\n\n    let mut fields = [0; N / 31];\n\n    // Since N is a multiple of 31, we can simply process all chunks fully\n    for i in 0..N / 31 {\n        let mut field = 0;\n        for j in 0..31 {\n            // Shift the existing value left by 8 bits and add the new byte\n            field = field * 256 + bytes[i * 31 + j] as Field;\n        }\n        fields[i] = field;\n    }\n\n    fields\n}\n\n/// Converts an input BoundedVec of fields into a BoundedVec of bytes in big-endian order. Arbitrary Field arrays\n/// are not allowed: this is assumed to be an array obtained via `bytes_to_fields`, i.e. one that actually represents\n/// bytes. To convert a Field array into bytes, use `fields_to_bytes`.\n///\n/// Each input field must contain at most 31 bytes (this is constrained to be so).\n/// Each field is converted into 31 big-endian bytes, and the resulting 31-byte chunks are concatenated\n/// back together in the order of the original fields.\npub fn bytes_from_fields<let N: u32>(fields: BoundedVec<Field, N>) -> BoundedVec<u8, N * 31> {\n    let mut bytes = BoundedVec::new();\n\n    for i in 0..fields.len() {\n        let field = fields.get(i);\n\n        // We expect that the field contains at most 31 bytes of information.\n        field.assert_max_bit_size::<248>();\n\n        // Now we can safely convert the field to 31 bytes.\n        let field_as_bytes: [u8; 31] = field.to_be_bytes();\n\n        for j in 0..31 {\n            bytes.push(field_as_bytes[j]);\n        }\n    }\n\n    bytes\n}\n\nmod tests {\n    use crate::utils::array::subarray;\n    use super::{bytes_from_fields, bytes_to_fields};\n\n    #[test]\n    unconstrained fn random_bytes_to_fields_and_back(input: [u8; 93]) {\n        let fields = bytes_to_fields(input);\n\n        // At this point in production, the log flies through the system and we get a BoundedVec on the other end.\n        // So we need to convert the field array to a BoundedVec to be able to feed it to the `bytes_from_fields`\n        // function.\n        let fields_as_bounded_vec = BoundedVec::<_, 6>::from_array(fields);\n\n        let bytes_back = bytes_from_fields(fields_as_bounded_vec);\n\n        // Compare the original input with the round-tripped result\n        assert_eq(bytes_back.len(), input.len());\n        assert_eq(subarray(bytes_back.storage(), 0), input);\n    }\n\n    #[test(should_fail_with = \"N must be a multiple of 31\")]\n    unconstrained fn bytes_to_fields_input_length_not_multiple_of_31() {\n        // Try to convert 32 bytes (not a multiple of 31) to fields\n        let _fields = bytes_to_fields([0; 32]);\n    }\n\n}\n"
    },
    "207": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v1.0.0-staging.6/noir-projects/aztec-nr/aztec/src/utils/conversion/fields_to_bytes.nr",
      "source": "// These functions are used to facilitate the conversion of log plaintext represented as fields into bytes and back.\n//\n// `fields_to_bytes` uses fixed-size arrays since encryption contexts have compile-time size information.\n// `fields_from_bytes` uses BoundedVec for flexibility in unconstrained contexts where sizes are dynamic.\n//\n// Together they provide bidirectional conversion between fields and bytes.\n\n/// Converts an input array of fields into a single array of bytes. Use `fields_from_bytes` to obtain the original\n/// field array.\n/// Each field is converted to a 32-byte big-endian array.\n///\n/// For example, if you have a field array [123, 456], it will be converted to a 64-byte array:\n/// [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,  // First field (32 bytes)\n///  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,200]  // Second field (32 bytes)\n///\n/// Since a field is ~254 bits, you'll end up with a subtle 2-bit \"gap\" at the big end, every 32 bytes. Be careful\n/// that such a gap doesn't leak information! This could happen if you for example expected the output to be\n/// indistinguishable from random bytes.\npub fn fields_to_bytes<let N: u32>(fields: [Field; N]) -> [u8; 32 * N] {\n    let mut bytes = [0; 32 * N];\n\n    for i in 0..N {\n        let field_as_bytes: [u8; 32] = fields[i].to_be_bytes();\n\n        for j in 0..32 {\n            bytes[i * 32 + j] = field_as_bytes[j];\n        }\n    }\n\n    bytes\n}\n\n/// Converts an input BoundedVec of bytes into a BoundedVec of fields. Arbitrary byte arrays are not allowed: this\n/// is assumed to be an array obtained via `fields_to_bytes`, i.e. one that actually represents fields. To convert\n/// a byte array into Fields, use `bytes_to_fields`.\n///\n/// The input bytes are chunked into chunks of 32 bytes. Each 32-byte chunk is viewed as big-endian, and is converted\n/// into a Field.\n/// For example, [1, 10, 3, ..., 0] (32 bytes) is encoded as [1 * 256^31 + 10 * 256^30 + 3 * 256^29 + ... + 0]\n/// Note 1: N must be a multiple of 32 bytes\n/// Note 2: The max value check code was taken from std::field::to_be_bytes function.\npub fn fields_from_bytes<let N: u32>(bytes: BoundedVec<u8, N>) -> BoundedVec<Field, N / 32> {\n    // Assert that input length is a multiple of 32\n    assert(bytes.len() % 32 == 0, \"Input length must be a multiple of 32\");\n\n    let mut fields = BoundedVec::new();\n\n    let p = std::field::modulus_be_bytes();\n\n    // Since input length is a multiple of 32, we can simply process all chunks fully\n    for i in 0..bytes.len() / 32 {\n        let mut field = 0;\n\n        // Process each byte in the 32-byte chunk\n        let mut ok = false;\n\n        for j in 0..32 {\n            let next_byte = bytes.get(i * 32 + j);\n            field = field * 256 + next_byte as Field;\n\n            if !ok {\n                if next_byte != p[j] {\n                    assert(next_byte < p[j], \"Value does not fit in field\");\n                    ok = true;\n                }\n            }\n        }\n        assert(ok, \"Value does not fit in field\");\n\n        fields.push(field);\n    }\n\n    fields\n}\n\nmod tests {\n    use crate::utils::array::subarray;\n    use super::{fields_from_bytes, fields_to_bytes};\n\n    #[test]\n    unconstrained fn random_fields_to_bytes_and_back(input: [Field; 3]) {\n        // Convert to bytes\n        let bytes = fields_to_bytes(input);\n\n        // At this point in production, the log flies through the system and we get a BoundedVec on the other end.\n        // So we need to convert the field array to a BoundedVec to be able to feed it to the `fields_from_bytes`\n        // function.\n        // 113 is an arbitrary max length that is larger than the input length of 96.\n        let bytes_as_bounded_vec = BoundedVec::<_, 113>::from_array(bytes);\n\n        // Convert back to fields\n        let fields_back = fields_from_bytes(bytes_as_bounded_vec);\n\n        // Compare the original input with the round-tripped result\n        assert_eq(fields_back.len(), input.len());\n        assert_eq(subarray(fields_back.storage(), 0), input);\n    }\n\n    #[test(should_fail_with = \"Input length must be a multiple of 32\")]\n    unconstrained fn to_fields_assert() {\n        // 143 is an arbitrary max length that is larger than 33\n        let input = BoundedVec::<_, 143>::from_array([\n            1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n            25, 26, 27, 28, 29, 30, 31, 32, 33,\n        ]);\n\n        // This should fail since 33 is not a multiple of 32\n        let _fields = fields_from_bytes(input);\n    }\n\n    #[test]\n    unconstrained fn fields_from_bytes_max_value() {\n        let max_field_as_bytes: [u8; 32] = (-1).to_be_bytes();\n        let input = BoundedVec::<_, 32>::from_array(max_field_as_bytes);\n\n        let fields = fields_from_bytes(input);\n\n        // The result should be a largest value storable in a field (-1 since we are modulo-ing)\n        assert_eq(fields.get(0), -1);\n    }\n\n    // In this test we verify that overflow check works by taking the max allowed value, bumping a random byte\n    // and then feeding it to `fields_from_bytes` as input.\n    #[test(should_fail_with = \"Value does not fit in field\")]\n    unconstrained fn fields_from_bytes_overflow(random_value: u8) {\n        let index_of_byte_to_bump = random_value % 32;\n\n        // Obtain the byte representation of the maximum field value\n        let max_field_value_as_bytes: [u8; 32] = (-1).to_be_bytes();\n\n        let byte_to_bump = max_field_value_as_bytes[index_of_byte_to_bump as u32];\n\n        // Skip test execution if the selected byte is already at maximum value (255).\n        // This is acceptable since we are using fuzz testing to generate many test cases.\n        if byte_to_bump != 255 {\n            let mut input = BoundedVec::<_, 32>::from_array(max_field_value_as_bytes);\n\n            // Increment the selected byte to exceed the field's maximum value\n            input.set(index_of_byte_to_bump as u32, byte_to_bump + 1);\n\n            // Attempt the conversion, which should fail due to the value exceeding the field's capacity\n            let _fields = fields_from_bytes(input);\n        }\n    }\n\n}\n"
    },
    "209": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v1.0.0-staging.6/noir-projects/aztec-nr/aztec/src/utils/field.nr",
      "source": "use std::option::Option;\n\nglobal KNOWN_NON_RESIDUE: Field = 5; // This is a non-residue in Noir's native Field.\n\nglobal C1: u32 = 28;\nglobal C3: Field = 40770029410420498293352137776570907027550720424234931066070132305055;\nglobal C5: Field = 19103219067921713944291392827692070036145651957329286315305642004821462161904;\n\n// Power function of two Field arguments of arbitrary size.\n// Adapted from std::field::pow_32.\npub fn pow(x: Field, y: Field) -> Field {\n    let mut r = 1 as Field;\n    let b: [u1; 254] = y.to_le_bits();\n\n    for i in 0..254 {\n        r *= r;\n        r *= (b[254 - 1 - i] as Field) * x + (1 - b[254 - 1 - i] as Field);\n    }\n\n    r\n}\n\n// Boolean indicating whether Field element is a square, i.e. whether there exists a y in Field s.t. x = y*y.\nunconstrained fn is_square(x: Field) -> bool {\n    let v = pow(x, -1 / 2);\n    v * (v - 1) == 0\n}\n\n// Tonelli-Shanks algorithm for computing the square root of a Field element.\n// Requires C1 = max{c: 2^c divides (p-1)}, where p is the order of Field\n// as well as C3 = (C2 - 1)/2, where C2 = (p-1)/(2^c1),\n// and C5 = ZETA^C2, where ZETA is a non-square element of Field.\n// These are pre-computed above as globals.\nunconstrained fn tonelli_shanks_sqrt(x: Field) -> Field {\n    let mut z = pow(x, C3);\n    let mut t = z * z * x;\n    z *= x;\n    let mut b = t;\n    let mut c = C5;\n\n    for i in 0..(C1 - 1) {\n        for _j in 1..(C1 - i - 1) {\n            b *= b;\n        }\n\n        z *= if b == 1 { 1 } else { c };\n\n        c *= c;\n\n        t *= if b == 1 { 1 } else { c };\n\n        b = t;\n    }\n\n    z\n}\n\n// NB: this doesn't return an option, because in the case of there _not_ being a square root, we still want to return a field element that allows us to then assert in the _constrained_ sqrt function that there is no sqrt.\npub unconstrained fn __sqrt(x: Field) -> (bool, Field) {\n    let is_sq = is_square(x);\n    if is_sq {\n        let sqrt = tonelli_shanks_sqrt(x);\n        (true, sqrt)\n    } else {\n        // Demonstrate that x is not a square (a.k.a. a \"quadratic non-residue\").\n        // Facts:\n        // The Legendre symbol (\"LS\") of x, is x^((p-1)/2) (mod p).\n        // - If x is a square, LS(x) = 1\n        // - If x is not a square, LS(x) = -1\n        // - If x = 0, LS(x) = 0.\n        //\n        // Hence:\n        // sq * sq = sq // 1 * 1 = 1\n        // non-sq * non-sq = sq // -1 * -1 = 1\n        // sq * non-sq = non-sq // -1 * 1 = -1\n        //\n        // See: https://en.wikipedia.org/wiki/Legendre_symbol\n        let demo_x_not_square = x * KNOWN_NON_RESIDUE;\n        let not_sqrt = tonelli_shanks_sqrt(demo_x_not_square);\n        (false, not_sqrt)\n    }\n}\n\n// Returns (false, 0) if there is no square root.\n// Returns (true, sqrt) if there is a square root.\npub fn sqrt(x: Field) -> Option<Field> {\n    // Safety: if the hint returns the square root of x, then we simply square it\n    // check the result equals x. If x is not square, we return a value that\n    // enables us to prove that fact (see the `else` clause below).\n    let (is_sq, maybe_sqrt) = unsafe { __sqrt(x) };\n\n    if is_sq {\n        let sqrt = maybe_sqrt;\n        validate_sqrt_hint(x, sqrt);\n        Option::some(sqrt)\n    } else {\n        let not_sqrt_hint = maybe_sqrt;\n        validate_not_sqrt_hint(x, not_sqrt_hint);\n        Option::none()\n    }\n}\n\nfn validate_sqrt_hint(x: Field, hint: Field) {\n    assert(hint * hint == x, f\"The claimed_sqrt {hint} is not the sqrt of x {x}\");\n}\n\nfn validate_not_sqrt_hint(x: Field, hint: Field) {\n    // We need this assertion, because x = 0 would pass the other assertions in this\n    // function, and we don't want people to be able to prove that 0 is not square!\n    assert(x != 0, \"0 has a square root; you cannot claim it is not square\");\n    // Demonstrate that x is not a square (a.k.a. a \"quadratic non-residue\").\n    //\n    // Facts:\n    // The Legendre symbol (\"LS\") of x, is x^((p-1)/2) (mod p).\n    // - If x is a square, LS(x) = 1\n    // - If x is not a square, LS(x) = -1\n    // - If x = 0, LS(x) = 0.\n    //\n    // Hence:\n    // 1. sq * sq = sq // 1 * 1 = 1\n    // 2. non-sq * non-sq = sq // -1 * -1 = 1\n    // 3. sq * non-sq = non-sq // -1 * 1 = -1\n    //\n    // See: https://en.wikipedia.org/wiki/Legendre_symbol\n    //\n    // We want to demonstrate that this below multiplication falls under bullet-point (2):\n    let demo_x_not_square = x * KNOWN_NON_RESIDUE;\n    // I.e. we want to demonstrate that `demo_x_not_square` has Legendre symbol 1\n    // (i.e. that it is a square), so we prove that it is square below.\n    // Why do we want to prove that it has LS 1?\n    // Well, since it was computed with a known-non-residue, its squareness implies we're\n    // in case 2 (something multiplied by a known-non-residue yielding a result which\n    // has a LS of 1), which implies that x must be a non-square. The unconstrained\n    // function gave us the sqrt of demo_x_not_square, so all we need to do is\n    // assert its squareness:\n    assert(\n        hint * hint == demo_x_not_square,\n        f\"The hint {hint} does not demonstrate that {x} is not a square\",\n    );\n}\n\n#[test]\nfn test_sqrt() {\n    let x = 9;\n    let maybe_sqrt = sqrt(x);\n    assert(maybe_sqrt.is_some());\n    let sqrt = maybe_sqrt.unwrap_unchecked();\n    assert((sqrt == 3) | (sqrt == -3));\n}\n\n#[test]\nfn test_non_square() {\n    let x = 5;\n    let maybe_sqrt = sqrt(x);\n    assert(maybe_sqrt.is_none());\n}\n\n#[test]\nunconstrained fn test_known_non_residue_is_actually_a_non_residue_in_the_field() {\n    assert(!is_square(KNOWN_NON_RESIDUE));\n}\n\n#[test]\nfn test_sqrt_0() {\n    let x = 0;\n    let sqrt = sqrt(x).unwrap();\n    assert(sqrt == 0);\n}\n\n#[test]\nfn test_sqrt_1() {\n    let x = 1;\n    let sqrt = sqrt(x).unwrap();\n    assert((sqrt == 1) | (sqrt == -1));\n}\n\n#[test(should_fail_with = \"The claimed_sqrt 0x04 is not the sqrt of x 0x09\")]\nfn test_bad_sqrt_hint_fails() {\n    validate_sqrt_hint(9, 4);\n}\n\n#[test(should_fail_with = \"The hint 0x04 does not demonstrate that 0x0a is not a square\")]\nfn test_bad_not_sqrt_hint_fails() {\n    validate_not_sqrt_hint(10, 4);\n}\n\n#[test(should_fail_with = \"0 has a square root; you cannot claim it is not square\")]\nfn test_0_not_sqrt_hint_fails() {\n    validate_not_sqrt_hint(0, 0);\n}\n\n#[test]\nunconstrained fn test_is_square() {\n    assert(is_square(25));\n}\n\n#[test]\nunconstrained fn test_is_not_square() {\n    assert(!is_square(10));\n}\n"
    },
    "211": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v1.0.0-staging.6/noir-projects/aztec-nr/aztec/src/utils/point.nr",
      "source": "use crate::utils::field::sqrt;\nuse dep::protocol_types::point::Point;\n\n// I am storing the modulus minus 1 divided by 2 here because full modulus would throw \"String literal too large\" error\n// Full modulus is 21888242871839275222246405745257275088548364400416034343698204186575808495617\nglobal BN254_FR_MODULUS_DIV_2: Field =\n    10944121435919637611123202872628637544274182200208017171849102093287904247808;\n\n/// Converts a point to a byte array.\n///\n/// We don't serialize the point at infinity flag because this function is used in situations where we do not want\n/// to waste the extra byte (encrypted log).\npub fn point_to_bytes(p: Point) -> [u8; 32] {\n    // Note that there is 1 more free bit in the 32 bytes (254 bits currently occupied by the x coordinate, 1 bit for\n    // the \"sign\") so it's possible to use that last bit as an \"is_infinite\" flag if desired in the future.\n    assert(!p.is_infinite, \"Cannot serialize point at infinity as bytes.\");\n\n    let mut result: [u8; 32] = p.x.to_be_bytes();\n\n    if get_sign_of_point(p) {\n        // y is <= (modulus - 1) / 2 so we set the sign bit to 1\n        // Here we leverage that field fits into 254 bits (log2(Fr.MODULUS) < 254) and given that we serialize Fr to 32\n        // bytes and we use big-endian the 2 most significant bits are never populated. Hence we can use one of\n        // the bits as a sign bit.\n        result[0] += 128;\n    }\n\n    result\n}\n\n/**\n * Returns: true if p.y <= MOD_DIV_2, else false.\n */\npub fn get_sign_of_point(p: Point) -> bool {\n    // We store only a \"sign\" of the y coordinate because the rest can be derived from the x coordinate. To get\n    // the sign we check if the y coordinate is less or equal than the curve's order minus 1 divided by 2.\n    // Ideally we'd do `y <= MOD_DIV_2`, but there's no `lte` function, so instead we do `!(y > MOD_DIV_2)`, which is\n    // equivalent, and then rewrite that as `!(MOD_DIV_2 < y)`, since we also have no `gt` function.\n    !BN254_FR_MODULUS_DIV_2.lt(p.y)\n}\n\npub fn point_from_x_coord(x: Field) -> Point {\n    // y ^ 2 = x ^ 3 - 17\n    let rhs = x * x * x - 17;\n    let y = sqrt(rhs).unwrap();\n    Point { x, y, is_infinite: false }\n}\n\n/// Uses the x coordinate and sign flag (+/-) to reconstruct the point.\n/// The y coordinate can be derived from the x coordinate and the \"sign\" flag by solving the grumpkin curve\n/// equation for y.\n/// @param x - The x coordinate of the point\n/// @param sign - The \"sign\" of the y coordinate - determines whether y <= (Fr.MODULUS - 1) / 2\npub fn point_from_x_coord_and_sign(x: Field, sign: bool) -> Point {\n    // y ^ 2 = x ^ 3 - 17\n    let rhs = x * x * x - 17;\n    let y = sqrt(rhs).unwrap();\n\n    // If y > MOD_DIV_2 and we want positive sign (or vice versa), negate y\n    let y_is_positive = !BN254_FR_MODULUS_DIV_2.lt(y);\n    let final_y = if y_is_positive == sign { y } else { -y };\n\n    Point { x, y: final_y, is_infinite: false }\n}\n\nmod test {\n    use crate::utils::point::{point_from_x_coord_and_sign, point_to_bytes};\n    use dep::protocol_types::point::Point;\n\n    #[test]\n    unconstrained fn test_point_to_bytes_positive_sign() {\n        let p = Point {\n            x: 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73,\n            y: 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_positive_sign = [\n            154, 244, 31, 93, 233, 100, 70, 220, 55, 118, 161, 235, 45, 152, 187, 149, 107, 122,\n            205, 153, 121, 166, 120, 84, 190, 198, 250, 124, 41, 115, 189, 115,\n        ];\n        assert_eq(expected_compressed_point_positive_sign, compressed_point);\n    }\n\n    #[test]\n    unconstrained fn test_point_to_bytes_negative_sign() {\n        let p = Point {\n            x: 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5,\n            y: 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_negative_sign = [\n            36, 115, 113, 101, 46, 85, 221, 116, 201, 175, 141, 190, 159, 180, 73, 49, 186, 41, 169,\n            34, 153, 148, 56, 75, 215, 7, 119, 150, 193, 78, 226, 181,\n        ];\n\n        assert_eq(expected_compressed_point_negative_sign, compressed_point);\n    }\n\n    #[test]\n    unconstrained fn test_point_from_x_coord_and_sign() {\n        // Test positive y coordinate\n        let x = 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73;\n        let sign = true;\n        let p = point_from_x_coord_and_sign(x, sign);\n\n        assert_eq(p.x, x);\n        assert_eq(p.y, 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a);\n        assert_eq(p.is_infinite, false);\n\n        // Test negative y coordinate\n        let x2 = 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5;\n        let sign2 = false;\n        let p2 = point_from_x_coord_and_sign(x2, sign2);\n\n        assert_eq(p2.x, x2);\n        assert_eq(p2.y, 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0);\n        assert_eq(p2.is_infinite, false);\n    }\n}\n"
    },
    "223": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/noir-lang/poseidon/v0.1.1/src/poseidon2.nr",
      "source": "use std::default::Default;\nuse std::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n"
    },
    "241": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v1.0.0-staging.6/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr",
      "source": "use crate::traits::{Deserialize, Empty, FromField, Serialize, ToField};\n\npub struct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    pub inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for FunctionSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for FunctionSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl FunctionSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // `hash` is automatically truncated to fit within 32 bits.\n        FunctionSelector::from_field(hash)\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n\n#[test]\nfn test_is_valid_selector() {\n    let selector = FunctionSelector::from_signature(\"IS_VALID()\");\n    assert_eq(selector.to_field(), 0x73cdda47);\n}\n\n#[test]\nfn test_long_selector() {\n    let selector =\n        FunctionSelector::from_signature(\"foo_and_bar_and_baz_and_foo_bar_baz_and_bar_foo\");\n    assert_eq(selector.to_field(), 0x7590a997);\n}\n"
    },
    "25": {
      "path": "std/meta/expr.nr",
      "source": "//! Contains methods on the built-in `Expr` type for quoted, syntactically valid expressions.\n\nuse crate::meta::op::BinaryOp;\nuse crate::meta::op::UnaryOp;\nuse crate::option::Option;\n\nimpl Expr {\n    /// If this expression is an array literal `[elem1, ..., elemN]`, this returns a slice of each element in the array.\n    #[builtin(expr_as_array)]\n    // docs:start:as_array\n    pub comptime fn as_array(self) -> Option<[Expr]> {}\n    // docs:end:as_array\n\n    /// If this expression is an assert, this returns the assert expression and the optional message.\n    #[builtin(expr_as_assert)]\n    // docs:start:as_assert\n    pub comptime fn as_assert(self) -> Option<(Expr, Option<Expr>)> {}\n    // docs:end:as_assert\n\n    /// If this expression is an assert_eq, this returns the left-hand-side and right-hand-side\n    /// expressions, together with the optional message.\n    #[builtin(expr_as_assert_eq)]\n    // docs:start:as_assert_eq\n    pub comptime fn as_assert_eq(self) -> Option<(Expr, Expr, Option<Expr>)> {}\n    // docs:end:as_assert_eq\n\n    /// If this expression is an assignment, this returns a tuple with the left hand side\n    /// and right hand side in order.\n    #[builtin(expr_as_assign)]\n    // docs:start:as_assign\n    pub comptime fn as_assign(self) -> Option<(Expr, Expr)> {}\n    // docs:end:as_assign\n\n    /// If this expression is a binary operator operation `<lhs> <op> <rhs>`,\n    /// return the left-hand side, operator, and the right-hand side of the operation.\n    #[builtin(expr_as_binary_op)]\n    // docs:start:as_binary_op\n    pub comptime fn as_binary_op(self) -> Option<(Expr, BinaryOp, Expr)> {}\n    // docs:end:as_binary_op\n\n    /// If this expression is a block `{ stmt1; stmt2; ...; stmtN }`, return\n    /// a slice containing each statement.\n    #[builtin(expr_as_block)]\n    // docs:start:as_block\n    pub comptime fn as_block(self) -> Option<[Expr]> {}\n    // docs:end:as_block\n\n    /// If this expression is a boolean literal, return that literal.\n    #[builtin(expr_as_bool)]\n    // docs:start:as_bool\n    pub comptime fn as_bool(self) -> Option<bool> {}\n    // docs:end:as_bool\n\n    /// If this expression is a cast expression `expr as type`, returns the casted\n    /// expression and the type to cast to.\n    // docs:start:as_cast\n    #[builtin(expr_as_cast)]\n    pub comptime fn as_cast(self) -> Option<(Expr, UnresolvedType)> {}\n    // docs:end:as_cast\n\n    /// If this expression is a `comptime { stmt1; stmt2; ...; stmtN }` block,\n    /// return each statement in the block.\n    #[builtin(expr_as_comptime)]\n    // docs:start:as_comptime\n    pub comptime fn as_comptime(self) -> Option<[Expr]> {}\n    // docs:end:as_comptime\n\n    /// If this expression is a constructor `Type { field1: expr1, ..., fieldN: exprN }`,\n    /// return the type and the fields.\n    #[builtin(expr_as_constructor)]\n    // docs:start:as_constructor\n    pub comptime fn as_constructor(self) -> Option<(UnresolvedType, [(Quoted, Expr)])> {}\n    // docs:end:as_constructor\n\n    /// If this expression is a for statement over a single expression, return the identifier,\n    /// the expression and the for loop body.\n    #[builtin(expr_as_for)]\n    // docs:start:as_for\n    pub comptime fn as_for(self) -> Option<(Quoted, Expr, Expr)> {}\n    // docs:end:as_for\n\n    /// If this expression is a for statement over a range, return the identifier,\n    /// the range start, the range end and the for loop body.\n    #[builtin(expr_as_for_range)]\n    // docs:start:as_for_range\n    pub comptime fn as_for_range(self) -> Option<(Quoted, Expr, Expr, Expr)> {}\n    // docs:end:as_for_range\n\n    /// If this expression is a function call `foo(arg1, ..., argN)`, return\n    /// the function and a slice of each argument.\n    #[builtin(expr_as_function_call)]\n    // docs:start:as_function_call\n    pub comptime fn as_function_call(self) -> Option<(Expr, [Expr])> {}\n    // docs:end:as_function_call\n\n    /// If this expression is an `if condition { then_branch } else { else_branch }`,\n    /// return the condition, then branch, and else branch. If there is no else branch,\n    /// `None` is returned for that branch instead.\n    #[builtin(expr_as_if)]\n    // docs:start:as_if\n    pub comptime fn as_if(self) -> Option<(Expr, Expr, Option<Expr>)> {}\n    // docs:end:as_if\n\n    /// If this expression is an index into an array `array[index]`, return the\n    /// array and the index.\n    #[builtin(expr_as_index)]\n    // docs:start:as_index\n    pub comptime fn as_index(self) -> Option<(Expr, Expr)> {}\n    // docs:end:as_index\n\n    /// If this expression is an integer literal, return the integer as a field\n    /// as well as whether the integer is negative (true) or not (false).\n    #[builtin(expr_as_integer)]\n    // docs:start:as_integer\n    pub comptime fn as_integer(self) -> Option<(Field, bool)> {}\n    // docs:end:as_integer\n\n    /// If this expression is a lambda, returns the parameters, return type and body.\n    #[builtin(expr_as_lambda)]\n    // docs:start:as_lambda\n    pub comptime fn as_lambda(\n        self,\n    ) -> Option<([(Expr, Option<UnresolvedType>)], Option<UnresolvedType>, Expr)> {}\n    // docs:end:as_lambda\n\n    /// If this expression is a let statement, returns the let pattern as an `Expr`,\n    /// the optional type annotation, and the assigned expression.\n    #[builtin(expr_as_let)]\n    // docs:start:as_let\n    pub comptime fn as_let(self) -> Option<(Expr, Option<UnresolvedType>, Expr)> {}\n    // docs:end:as_let\n\n    /// If this expression is a member access `foo.bar`, return the struct/tuple\n    /// expression and the field. The field will be represented as a quoted value.\n    #[builtin(expr_as_member_access)]\n    // docs:start:as_member_access\n    pub comptime fn as_member_access(self) -> Option<(Expr, Quoted)> {}\n    // docs:end:as_member_access\n\n    /// If this expression is a method call `foo.bar::<generic1, ..., genericM>(arg1, ..., argN)`, return\n    /// the receiver, method name, a slice of each generic argument, and a slice of each argument.\n    #[builtin(expr_as_method_call)]\n    // docs:start:as_method_call\n    pub comptime fn as_method_call(self) -> Option<(Expr, Quoted, [UnresolvedType], [Expr])> {}\n    // docs:end:as_method_call\n\n    /// If this expression is a repeated element array `[elem; length]`, return\n    /// the repeated element and the length expressions.\n    #[builtin(expr_as_repeated_element_array)]\n    // docs:start:as_repeated_element_array\n    pub comptime fn as_repeated_element_array(self) -> Option<(Expr, Expr)> {}\n    // docs:end:as_repeated_element_array\n\n    /// If this expression is a repeated element slice `[elem; length]`, return\n    /// the repeated element and the length expressions.\n    #[builtin(expr_as_repeated_element_slice)]\n    // docs:start:as_repeated_element_slice\n    pub comptime fn as_repeated_element_slice(self) -> Option<(Expr, Expr)> {}\n    // docs:end:as_repeated_element_slice\n\n    /// If this expression is a slice literal `&[elem1, ..., elemN]`,\n    /// return each element of the slice.\n    #[builtin(expr_as_slice)]\n    // docs:start:as_slice\n    pub comptime fn as_slice(self) -> Option<[Expr]> {}\n    // docs:end:as_slice\n\n    /// If this expression is a tuple `(field1, ..., fieldN)`,\n    /// return each element of the tuple.\n    #[builtin(expr_as_tuple)]\n    // docs:start:as_tuple\n    pub comptime fn as_tuple(self) -> Option<[Expr]> {}\n    // docs:end:as_tuple\n\n    /// If this expression is a unary operation `<op> <rhs>`,\n    /// return the unary operator as well as the right-hand side expression.\n    #[builtin(expr_as_unary_op)]\n    // docs:start:as_unary_op\n    pub comptime fn as_unary_op(self) -> Option<(UnaryOp, Expr)> {}\n    // docs:end:as_unary_op\n\n    /// If this expression is an `unsafe { stmt1; ...; stmtN }` block,\n    /// return each statement inside in a slice.\n    #[builtin(expr_as_unsafe)]\n    // docs:start:as_unsafe\n    pub comptime fn as_unsafe(self) -> Option<[Expr]> {}\n    // docs:end:as_unsafe\n\n    /// Returns `true` if this expression is trailed by a semicolon.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// comptime {\n    ///     let expr1 = quote { 1 + 2 }.as_expr().unwrap();\n    ///     let expr2 = quote { 1 + 2; }.as_expr().unwrap();\n    ///\n    ///     assert(expr1.as_binary_op().is_some());\n    ///     assert(expr2.as_binary_op().is_some());\n    ///\n    ///     assert(!expr1.has_semicolon());\n    ///     assert(expr2.has_semicolon());\n    /// }\n    /// ```\n    #[builtin(expr_has_semicolon)]\n    // docs:start:has_semicolon\n    pub comptime fn has_semicolon(self) -> bool {}\n    // docs:end:has_semicolon\n\n    /// Returns `true` if this expression is `break`.\n    #[builtin(expr_is_break)]\n    // docs:start:is_break\n    pub comptime fn is_break(self) -> bool {}\n    // docs:end:is_break\n\n    /// Returns `true` if this expression is `continue`.\n    #[builtin(expr_is_continue)]\n    // docs:start:is_continue\n    pub comptime fn is_continue(self) -> bool {}\n    // docs:end:is_continue\n\n    /// Applies a mapping function to this expression and to all of its sub-expressions.\n    /// `f` will be applied to each sub-expression first, then applied to the expression itself.\n    ///\n    /// This happens recursively for every expression within `self`.\n    ///\n    /// For example, calling `modify` on `(&[1], &[2, 3])` with an `f` that returns `Option::some`\n    /// for expressions that are integers, doubling them, would return `(&[2], &[4, 6])`.\n    // docs:start:modify\n    pub comptime fn modify<Env>(self, f: fn[Env](Expr) -> Option<Expr>) -> Expr {\n        // docs:end:modify\n        let result = modify_array(self, f);\n        let result = result.or_else(|| modify_assert(self, f));\n        let result = result.or_else(|| modify_assert_eq(self, f));\n        let result = result.or_else(|| modify_assign(self, f));\n        let result = result.or_else(|| modify_binary_op(self, f));\n        let result = result.or_else(|| modify_block(self, f));\n        let result = result.or_else(|| modify_cast(self, f));\n        let result = result.or_else(|| modify_comptime(self, f));\n        let result = result.or_else(|| modify_constructor(self, f));\n        let result = result.or_else(|| modify_if(self, f));\n        let result = result.or_else(|| modify_index(self, f));\n        let result = result.or_else(|| modify_for(self, f));\n        let result = result.or_else(|| modify_for_range(self, f));\n        let result = result.or_else(|| modify_lambda(self, f));\n        let result = result.or_else(|| modify_let(self, f));\n        let result = result.or_else(|| modify_function_call(self, f));\n        let result = result.or_else(|| modify_member_access(self, f));\n        let result = result.or_else(|| modify_method_call(self, f));\n        let result = result.or_else(|| modify_repeated_element_array(self, f));\n        let result = result.or_else(|| modify_repeated_element_slice(self, f));\n        let result = result.or_else(|| modify_slice(self, f));\n        let result = result.or_else(|| modify_tuple(self, f));\n        let result = result.or_else(|| modify_unary_op(self, f));\n        let result = result.or_else(|| modify_unsafe(self, f));\n        if result.is_some() {\n            let result = result.unwrap_unchecked();\n            let modified = f(result);\n            modified.unwrap_or(result)\n        } else {\n            f(self).unwrap_or(self)\n        }\n    }\n\n    /// Returns this expression as a `Quoted` value. It's the same as `quote { $self }`.\n    // docs:start:quoted\n    pub comptime fn quoted(self) -> Quoted {\n        // docs:end:quoted\n        quote { $self }\n    }\n\n    /// Resolves and type-checks this expression and returns the result as a `TypedExpr`.\n    ///\n    /// The `in_function` argument specifies where the expression is resolved:\n    /// - If it's `none`, the expression is resolved in the function where `resolve` was called\n    /// - If it's `some`, the expression is resolved in the given function\n    ///\n    /// If any names used by this expression are not in scope or if there are any type errors,\n    /// this will give compiler errors as if the expression was written directly into\n    /// the current `comptime` function.\n    #[builtin(expr_resolve)]\n    // docs:start:resolve\n    pub comptime fn resolve(self, in_function: Option<FunctionDefinition>) -> TypedExpr {}\n    // docs:end:resolve\n}\n\ncomptime fn modify_array<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_array().map(|exprs| {\n        let exprs = modify_expressions(exprs, f);\n        new_array(exprs)\n    })\n}\n\ncomptime fn modify_assert<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_assert().map(|(predicate, msg)| {\n        let predicate = predicate.modify(f);\n        let msg = msg.map(|msg| msg.modify(f));\n        new_assert(predicate, msg)\n    })\n}\n\ncomptime fn modify_assert_eq<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_assert_eq().map(|(lhs, rhs, msg)| {\n        let lhs = lhs.modify(f);\n        let rhs = rhs.modify(f);\n        let msg = msg.map(|msg| msg.modify(f));\n        new_assert_eq(lhs, rhs, msg)\n    })\n}\n\ncomptime fn modify_assign<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_assign().map(|expr| {\n        let (lhs, rhs) = expr;\n        let lhs = lhs.modify(f);\n        let rhs = rhs.modify(f);\n        new_assign(lhs, rhs)\n    })\n}\n\ncomptime fn modify_binary_op<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_binary_op().map(|(lhs, op, rhs)| {\n        let lhs = lhs.modify(f);\n        let rhs = rhs.modify(f);\n        new_binary_op(lhs, op, rhs)\n    })\n}\n\ncomptime fn modify_block<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_block().map(|exprs| {\n        let exprs = modify_expressions(exprs, f);\n        new_block(exprs)\n    })\n}\n\ncomptime fn modify_cast<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_cast().map(|(expr, typ)| {\n        let expr = expr.modify(f);\n        new_cast(expr, typ)\n    })\n}\n\ncomptime fn modify_comptime<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_comptime().map(|exprs| {\n        let exprs = exprs.map(|expr| expr.modify(f));\n        new_comptime(exprs)\n    })\n}\n\ncomptime fn modify_constructor<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_constructor().map(|(typ, fields)| {\n        let fields = fields.map(|(name, value)| (name, value.modify(f)));\n        new_constructor(typ, fields)\n    })\n}\n\ncomptime fn modify_function_call<Env>(\n    expr: Expr,\n    f: fn[Env](Expr) -> Option<Expr>,\n) -> Option<Expr> {\n    expr.as_function_call().map(|(function, arguments)| {\n        let function = function.modify(f);\n        let arguments = arguments.map(|arg| arg.modify(f));\n        new_function_call(function, arguments)\n    })\n}\n\ncomptime fn modify_if<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_if().map(|(condition, consequence, alternative)| {\n        let condition = condition.modify(f);\n        let consequence = consequence.modify(f);\n        let alternative = alternative.map(|alternative| alternative.modify(f));\n        new_if(condition, consequence, alternative)\n    })\n}\n\ncomptime fn modify_index<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_index().map(|(object, index)| {\n        let object = object.modify(f);\n        let index = index.modify(f);\n        new_index(object, index)\n    })\n}\n\ncomptime fn modify_for<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_for().map(|(identifier, array, body)| {\n        let array = array.modify(f);\n        let body = body.modify(f);\n        new_for(identifier, array, body)\n    })\n}\n\ncomptime fn modify_for_range<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_for_range().map(|(identifier, from, to, body)| {\n        let from = from.modify(f);\n        let to = to.modify(f);\n        let body = body.modify(f);\n        new_for_range(identifier, from, to, body)\n    })\n}\n\ncomptime fn modify_lambda<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_lambda().map(|(params, return_type, body)| {\n        let params = params.map(|(name, typ)| (name.modify(f), typ));\n        let body = body.modify(f);\n        new_lambda(params, return_type, body)\n    })\n}\n\ncomptime fn modify_let<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_let().map(|(pattern, typ, expr)| {\n        let pattern = pattern.modify(f);\n        let expr = expr.modify(f);\n        new_let(pattern, typ, expr)\n    })\n}\n\ncomptime fn modify_member_access<Env>(\n    expr: Expr,\n    f: fn[Env](Expr) -> Option<Expr>,\n) -> Option<Expr> {\n    expr.as_member_access().map(|(object, name)| {\n        let object = object.modify(f);\n        new_member_access(object, name)\n    })\n}\n\ncomptime fn modify_method_call<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_method_call().map(|(object, name, generics, arguments)| {\n        let object = object.modify(f);\n        let arguments = arguments.map(|arg| arg.modify(f));\n        new_method_call(object, name, generics, arguments)\n    })\n}\n\ncomptime fn modify_repeated_element_array<Env>(\n    expr: Expr,\n    f: fn[Env](Expr) -> Option<Expr>,\n) -> Option<Expr> {\n    expr.as_repeated_element_array().map(|(expr, length)| {\n        let expr = expr.modify(f);\n        let length = length.modify(f);\n        new_repeated_element_array(expr, length)\n    })\n}\n\ncomptime fn modify_repeated_element_slice<Env>(\n    expr: Expr,\n    f: fn[Env](Expr) -> Option<Expr>,\n) -> Option<Expr> {\n    expr.as_repeated_element_slice().map(|(expr, length)| {\n        let expr = expr.modify(f);\n        let length = length.modify(f);\n        new_repeated_element_slice(expr, length)\n    })\n}\n\ncomptime fn modify_slice<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_slice().map(|exprs| {\n        let exprs = modify_expressions(exprs, f);\n        new_slice(exprs)\n    })\n}\n\ncomptime fn modify_tuple<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_tuple().map(|exprs| {\n        let exprs = modify_expressions(exprs, f);\n        new_tuple(exprs)\n    })\n}\n\ncomptime fn modify_unary_op<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_unary_op().map(|(op, rhs)| {\n        let rhs = rhs.modify(f);\n        new_unary_op(op, rhs)\n    })\n}\n\ncomptime fn modify_unsafe<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_unsafe().map(|exprs| {\n        let exprs = exprs.map(|expr| expr.modify(f));\n        new_unsafe(exprs)\n    })\n}\n\ncomptime fn modify_expressions<Env>(exprs: [Expr], f: fn[Env](Expr) -> Option<Expr>) -> [Expr] {\n    exprs.map(|expr| expr.modify(f))\n}\n\ncomptime fn new_array(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { , });\n    quote { [$exprs]}.as_expr().unwrap()\n}\n\ncomptime fn new_assert(predicate: Expr, msg: Option<Expr>) -> Expr {\n    if msg.is_some() {\n        let msg = msg.unwrap();\n        quote { assert($predicate, $msg) }.as_expr().unwrap()\n    } else {\n        quote { assert($predicate) }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_assert_eq(lhs: Expr, rhs: Expr, msg: Option<Expr>) -> Expr {\n    if msg.is_some() {\n        let msg = msg.unwrap();\n        quote { assert_eq($lhs, $rhs, $msg) }.as_expr().unwrap()\n    } else {\n        quote { assert_eq($lhs, $rhs) }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_assign(lhs: Expr, rhs: Expr) -> Expr {\n    quote { $lhs = $rhs }.as_expr().unwrap()\n}\n\ncomptime fn new_binary_op(lhs: Expr, op: BinaryOp, rhs: Expr) -> Expr {\n    let op = op.quoted();\n    quote { ($lhs) $op ($rhs) }.as_expr().unwrap()\n}\n\ncomptime fn new_block(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { ; });\n    quote { { $exprs }}.as_expr().unwrap()\n}\n\ncomptime fn new_cast(expr: Expr, typ: UnresolvedType) -> Expr {\n    quote { ($expr) as $typ }.as_expr().unwrap()\n}\n\ncomptime fn new_comptime(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { ; });\n    quote { comptime { $exprs }}.as_expr().unwrap()\n}\n\ncomptime fn new_constructor(typ: UnresolvedType, fields: [(Quoted, Expr)]) -> Expr {\n    let fields = fields.map(|(name, value)| quote { $name: $value }).join(quote { , });\n    quote { $typ { $fields }}.as_expr().unwrap()\n}\n\ncomptime fn new_if(condition: Expr, consequence: Expr, alternative: Option<Expr>) -> Expr {\n    if alternative.is_some() {\n        let alternative = alternative.unwrap();\n        quote { if $condition { $consequence } else { $alternative }}.as_expr().unwrap()\n    } else {\n        quote { if $condition { $consequence } }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_for(identifier: Quoted, array: Expr, body: Expr) -> Expr {\n    quote { for $identifier in $array { $body } }.as_expr().unwrap()\n}\n\ncomptime fn new_for_range(identifier: Quoted, from: Expr, to: Expr, body: Expr) -> Expr {\n    quote { for $identifier in $from .. $to { $body } }.as_expr().unwrap()\n}\n\ncomptime fn new_index(object: Expr, index: Expr) -> Expr {\n    quote { $object[$index] }.as_expr().unwrap()\n}\n\ncomptime fn new_lambda(\n    params: [(Expr, Option<UnresolvedType>)],\n    return_type: Option<UnresolvedType>,\n    body: Expr,\n) -> Expr {\n    let params = params\n        .map(|(name, typ)| {\n            if typ.is_some() {\n                let typ = typ.unwrap();\n                quote { $name: $typ }\n            } else {\n                quote { $name }\n            }\n        })\n        .join(quote { , });\n\n    if return_type.is_some() {\n        let return_type = return_type.unwrap();\n        quote { |$params| -> $return_type { $body } }.as_expr().unwrap()\n    } else {\n        quote { |$params| { $body } }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_let(pattern: Expr, typ: Option<UnresolvedType>, expr: Expr) -> Expr {\n    if typ.is_some() {\n        let typ = typ.unwrap();\n        quote { let $pattern : $typ = $expr; }.as_expr().unwrap()\n    } else {\n        quote { let $pattern = $expr; }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_member_access(object: Expr, name: Quoted) -> Expr {\n    quote { $object.$name }.as_expr().unwrap()\n}\n\ncomptime fn new_function_call(function: Expr, arguments: [Expr]) -> Expr {\n    let arguments = join_expressions(arguments, quote { , });\n\n    quote { $function($arguments) }.as_expr().unwrap()\n}\n\ncomptime fn new_method_call(\n    object: Expr,\n    name: Quoted,\n    generics: [UnresolvedType],\n    arguments: [Expr],\n) -> Expr {\n    let arguments = join_expressions(arguments, quote { , });\n\n    if generics.len() == 0 {\n        quote { $object.$name($arguments) }.as_expr().unwrap()\n    } else {\n        let generics = generics.map(|generic| quote { $generic }).join(quote { , });\n        quote { $object.$name::<$generics>($arguments) }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_repeated_element_array(expr: Expr, length: Expr) -> Expr {\n    quote { [$expr; $length] }.as_expr().unwrap()\n}\n\ncomptime fn new_repeated_element_slice(expr: Expr, length: Expr) -> Expr {\n    quote { &[$expr; $length] }.as_expr().unwrap()\n}\n\ncomptime fn new_slice(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { , });\n    quote { &[$exprs]}.as_expr().unwrap()\n}\n\ncomptime fn new_tuple(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { , });\n    quote { ($exprs) }.as_expr().unwrap()\n}\n\ncomptime fn new_unary_op(op: UnaryOp, rhs: Expr) -> Expr {\n    let op = op.quoted();\n    quote { $op($rhs) }.as_expr().unwrap()\n}\n\ncomptime fn new_unsafe(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { ; });\n    quote { \n        // Safety: generated by macro\n        unsafe { $exprs }\n    }\n        .as_expr()\n        .unwrap()\n}\n\ncomptime fn join_expressions(exprs: [Expr], separator: Quoted) -> Quoted {\n    exprs.map(|expr| expr.quoted()).join(separator)\n}\n"
    },
    "284": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v1.0.0-staging.6/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr",
      "source": "use crate::{\n    address::{\n        partial_address::PartialAddress, salted_initialization_hash::SaltedInitializationHash,\n    },\n    constants::{\n        AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS_V1, MAX_FIELD_VALUE,\n        MAX_PROTOCOL_CONTRACTS,\n    },\n    contract_class_id::ContractClassId,\n    hash::poseidon2_hash_with_separator,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, ToPoint, TpkM},\n    traits::{Deserialize, Empty, FromField, Packable, Serialize, ToField},\n    utils::field::{pow, sqrt},\n};\n\n// We do below because `use crate::point::Point;` does not work\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\n\nuse crate::public_keys::AddressPoint;\nuse std::{\n    embedded_curve_ops::{EmbeddedCurveScalar, fixed_base_scalar_mul as derive_public_key},\n    ops::Add,\n};\n\n// Aztec address\npub struct AztecAddress {\n    pub inner: Field,\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\n/// We implement the Packable trait for AztecAddress because it can be stored in contract's storage (and there\n/// the implementation of Packable is required).\nimpl Packable<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn pack(self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        self.serialize()\n    }\n\n    fn unpack(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        Self::deserialize(fields)\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn to_address_point(self) -> AddressPoint {\n        // We compute the address point by taking our address, setting it to x, and then solving for y in the\n        // equation which defines our bn curve:\n        // y^2 = x^3 - 17; x = address\n        let x = self.inner;\n        let y_squared = pow(x, 3) - 17;\n\n        // TODO (#8970): Handle cases where we cannot recover a point from an address\n        let mut y = sqrt(y_squared);\n\n        // If we get a negative y coordinate (any y where y > MAX_FIELD_VALUE / 2), we pin it to the\n        // positive one (any value where y <= MAX_FIELD_VALUE / 2) by subtracting it from the Field modulus\n        // note: The field modulus is MAX_FIELD_VALUE + 1\n        if (!(y.lt(MAX_FIELD_VALUE / 2) | y.eq(MAX_FIELD_VALUE / 2))) {\n            y = (MAX_FIELD_VALUE + 1) - y;\n        }\n\n        AddressPoint { inner: Point { x: self.inner, y, is_infinite: false } }\n    }\n\n    pub fn compute(public_keys: PublicKeys, partial_address: PartialAddress) -> AztecAddress {\n        let public_keys_hash = public_keys.hash();\n\n        let pre_address = poseidon2_hash_with_separator(\n            [public_keys_hash.to_field(), partial_address.to_field()],\n            GENERATOR_INDEX__CONTRACT_ADDRESS_V1,\n        );\n\n        let address_point = derive_public_key(EmbeddedCurveScalar::from_field(pre_address)).add(\n            public_keys.ivpk_m.to_point(),\n        );\n\n        // Note that our address is only the x-coordinate of the full address_point. This is okay because when people want to encrypt something and send it to us\n        // they can recover our full point using the x-coordinate (our address itself). To do this, they recompute the y-coordinate according to the equation y^2 = x^3 - 17.\n        // When they do this, they may get a positive y-coordinate (a value that is less than or equal to MAX_FIELD_VALUE / 2) or\n        // a negative y-coordinate (a value that is more than MAX_FIELD_VALUE), and we cannot dictate which one they get and hence the recovered point may sometimes be different than the one\n        // our secret can decrypt. Regardless though, they should and will always encrypt using point with the positive y-coordinate by convention.\n        // This ensures that everyone encrypts to the same point given an arbitrary x-coordinate (address). This is allowed because even though our original point may not have a positive y-coordinate,\n        // with our original secret, we will be able to derive the secret to the point with the flipped (and now positive) y-coordinate that everyone encrypts to.\n        AztecAddress::from_field(address_point.x)\n    }\n\n    pub fn compute_from_class_id(\n        contract_class_id: ContractClassId,\n        salted_initialization_hash: SaltedInitializationHash,\n        public_keys: PublicKeys,\n    ) -> Self {\n        let partial_address = PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            salted_initialization_hash,\n        );\n\n        AztecAddress::compute(public_keys, partial_address)\n    }\n\n    pub fn is_protocol_contract(self) -> bool {\n        self.inner.lt(MAX_PROTOCOL_CONTRACTS as Field)\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys() {\n    let public_keys = PublicKeys {\n        npk_m: NpkM {\n            inner: Point {\n                x: 0x22f7fcddfa3ce3e8f0cc8e82d7b94cdd740afa3e77f8e4a63ea78a239432dcab,\n                y: 0x0471657de2b6216ade6c506d28fbc22ba8b8ed95c871ad9f3e3984e90d9723a7,\n                is_infinite: false,\n            },\n        },\n        ivpk_m: IvpkM {\n            inner: Point {\n                x: 0x111223493147f6785514b1c195bb37a2589f22a6596d30bb2bb145fdc9ca8f1e,\n                y: 0x273bbffd678edce8fe30e0deafc4f66d58357c06fd4a820285294b9746c3be95,\n                is_infinite: false,\n            },\n        },\n        ovpk_m: OvpkM {\n            inner: Point {\n                x: 0x09115c96e962322ffed6522f57194627136b8d03ac7469109707f5e44190c484,\n                y: 0x0c49773308a13d740a7f0d4f0e6163b02c5a408b6f965856b6a491002d073d5b,\n                is_infinite: false,\n            },\n        },\n        tpk_m: TpkM {\n            inner: Point {\n                x: 0x00d3d81beb009873eb7116327cf47c612d5758ef083d4fda78e9b63980b2a762,\n                y: 0x2f567d22d2b02fe1f4ad42db9d58a36afd1983e7e2909d1cab61cafedad6193a,\n                is_infinite: false,\n            },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(\n        0x0a7c585381b10f4666044266a02405bf6e01fa564c8517d4ad5823493abd31de,\n    );\n\n    let address = AztecAddress::compute(public_keys, partial_address);\n\n    // The following value was generated by `derivation.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let expected_computed_address_from_partial_and_pubkeys =\n        0x24e4646f58b9fbe7d38e317db8d5636c423fbbdfbe119fc190fe9c64747e0c62;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkeys);\n}\n\n#[test]\nfn compute_preaddress_from_partial_and_pub_keys() {\n    let pre_address = poseidon2_hash_with_separator([1, 2], GENERATOR_INDEX__CONTRACT_ADDRESS_V1);\n    let expected_computed_preaddress_from_partial_and_pubkey =\n        0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\n    assert(pre_address == expected_computed_preaddress_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n"
    },
    "301": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v1.0.0-staging.6/noir-projects/noir-protocol-circuits/crates/types/src/debug_log.nr",
      "source": "/// Utility function to console.log data in the acir simulator.\n/// Example:\n///   debug_log(\"blah blah this is a debug string\");\npub fn debug_log<let N: u32>(msg: str<N>) {\n    debug_log_format(msg, []);\n}\n\n/// Utility function to console.log data in the acir simulator. This variant receives a format string in which the\n/// `${k}` tokens will be replaced with the k-eth value in the `args` array.\n/// Examples:\n///   debug_log_format(\"get_2(slot:{0}) =>\\n\\t0:{1}\\n\\t1:{2}\", [storage_slot, note0_hash, note1_hash]);\n///   debug_log_format(\"whole array: {}\", [e1, e2, e3, e4]);\npub fn debug_log_format<let M: u32, let N: u32>(msg: str<M>, args: [Field; N]) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe { debug_log_oracle_wrapper(msg, args) };\n}\n\npub unconstrained fn debug_log_oracle_wrapper<let M: u32, let N: u32>(\n    msg: str<M>,\n    args: [Field; N],\n) {\n    debug_log_oracle(msg, args.as_slice());\n}\n\n// WARNING: sometimes when using debug logs the ACVM errors with: `thrown: \"solver opcode resolution error: cannot solve opcode: expression has too many unknowns x155\"`\n#[oracle(debugLog)]\nunconstrained fn debug_log_oracle<let M: u32>(_msg: str<M>, args: [Field]) {}\n"
    },
    "302": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v1.0.0-staging.6/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr",
      "source": "use crate::{\n    abis::{\n        contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n        function_selector::FunctionSelector,\n        note_hash::ScopedNoteHash,\n        nullifier::ScopedNullifier,\n        private_log::{PrivateLog, PrivateLogData},\n        side_effect::{OrderedValue, scoped::Scoped},\n    },\n    address::{AztecAddress, EthAddress},\n    constants::{\n        CONTRACT_CLASS_LOG_SIZE_IN_FIELDS, FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__NOTE_HASH_NONCE,\n        GENERATOR_INDEX__OUTER_NULLIFIER, GENERATOR_INDEX__SILOED_NOTE_HASH,\n        GENERATOR_INDEX__UNIQUE_NOTE_HASH, TWO_POW_64,\n    },\n    merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::L2ToL1Message,\n    poseidon2::Poseidon2Sponge,\n    traits::{FromField, Hash, ToField},\n    utils::{arrays::array_concat, field::{field_from_bytes, field_from_bytes_32_trunc}},\n};\nuse std::embedded_curve_ops::EmbeddedCurveScalar;\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256::digest(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT],\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(\n        function_leaf,\n        function_leaf_index,\n        function_leaf_sibling_path,\n    )\n}\n\npub fn compute_note_hash_nonce(first_nullifier_in_tx: Field, note_index_in_tx: u32) -> Field {\n    // Hashing the first nullifier with note index in tx is guaranteed to be unique (because all nullifiers are also\n    // unique).\n    poseidon2_hash_with_separator(\n        [first_nullifier_in_tx, note_index_in_tx as Field],\n        GENERATOR_INDEX__NOTE_HASH_NONCE,\n    )\n}\n\npub fn compute_unique_note_hash(note_nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [note_nonce, siloed_note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_nonce_and_unique_note_hash(\n    siloed_note_hash: Field,\n    first_nullifier: Field,\n    note_index_in_tx: u32,\n) -> Field {\n    let note_nonce = compute_note_hash_nonce(first_nullifier, note_index_in_tx);\n    compute_unique_note_hash(note_nonce, siloed_note_hash)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), note_hash],\n        GENERATOR_INDEX__SILOED_NOTE_HASH,\n    )\n}\n\n/// Computes unique note hashes from siloed note hashes\npub fn compute_unique_siloed_note_hash(\n    siloed_note_hash: Field,\n    first_nullifier: Field,\n    note_index_in_tx: u32,\n) -> Field {\n    if siloed_note_hash == 0 {\n        0\n    } else {\n        compute_nonce_and_unique_note_hash(siloed_note_hash, first_nullifier, note_index_in_tx)\n    }\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_note_hash(note_hash.contract_address, note_hash.value())\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), nullifier],\n        GENERATOR_INDEX__OUTER_NULLIFIER,\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn compute_siloed_private_log_field(contract_address: AztecAddress, field: Field) -> Field {\n    poseidon2_hash([contract_address.to_field(), field])\n}\n\npub fn silo_private_log(private_log: Scoped<PrivateLogData>) -> PrivateLog {\n    if private_log.contract_address.is_zero() {\n        private_log.inner.log\n    } else {\n        let mut fields = private_log.inner.log.fields;\n        fields[0] = compute_siloed_private_log_field(private_log.contract_address, fields[0]);\n        PrivateLog::new(fields, private_log.inner.log.length)\n    }\n}\n\npub fn compute_contract_class_log_hash(log: [Field; CONTRACT_CLASS_LOG_SIZE_IN_FIELDS]) -> Field {\n    poseidon2_hash(log)\n}\n\npub fn compute_app_secret_key(\n    master_secret_key: EmbeddedCurveScalar,\n    app_address: AztecAddress,\n    app_secret_generator: Field,\n) -> Field {\n    poseidon2_hash_with_separator(\n        [master_secret_key.hi, master_secret_key.lo, app_address.to_field()],\n        app_secret_generator,\n    )\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    let contract_address_bytes: [u8; 32] = contract_address.to_field().to_be_bytes();\n    let recipient_bytes: [u8; 20] = recipient.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let rollup_version_id_bytes: [u8; 32] = rollup_version_id.to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n\n    let mut bytes: [u8; 148] = std::mem::zeroed();\n    for i in 0..32 {\n        bytes[i] = contract_address_bytes[i];\n        bytes[i + 32] = rollup_version_id_bytes[i];\n        // 64 - 84 are for recipient.\n        bytes[i + 84] = chain_id_bytes[i];\n        bytes[i + 116] = content_bytes[i];\n    }\n\n    for i in 0..20 {\n        bytes[64 + i] = recipient_bytes[i];\n    }\n\n    sha256_to_field(bytes)\n}\n\npub fn silo_l2_to_l1_message(\n    msg: Scoped<L2ToL1Message>,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.inner.recipient,\n            msg.inner.content,\n            rollup_version_id,\n            chain_id,\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a u128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\n#[inline_always]\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    poseidon::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(inputs: [Field; N], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let inputs_with_separator = array_concat([separator.to_field()], inputs);\n    poseidon2_hash(inputs_with_separator)\n}\n\n// Performs a fixed length hash with a subarray of the given input.\n// Useful for SpongeBlob in which we aborb M things and want to check it vs a hash of M elts of an N-len array.\n// Using stdlib poseidon, this will always absorb an extra 1 as a 'variable' hash, and not match spongeblob.squeeze()\n// or any ts implementation. Also checks that any remaining elts not hashed are empty.\n#[no_predicates]\npub fn poseidon2_hash_subarray<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, false);\n    sponge.squeeze()\n}\n\n// NB the below is the same as poseidon::poseidon2::Poseidon2::hash(), but replacing a range check with a bit check,\n// and absorbing in chunks of 3 below.\n#[no_predicates]\npub fn poseidon2_cheaper_variable_hash<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, true);\n    // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n    // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n    // fixed-length and variable-length hashes do not collide)\n    if in_len != N {\n        sponge.absorb(1);\n    }\n    sponge.squeeze()\n}\n\n// The below fn reduces gates of a conditional poseidon2 hash by approx 3x (thank you ~* Giant Brain Dev @IlyasRidhuan *~ for the idea)\n// Why? Because when we call stdlib poseidon, we call absorb for each item. When absorbing is conditional, it seems the compiler does not know\n// what cache_size will be when calling absorb, so it assigns the permutation gates for /each i/ rather than /every 3rd i/, which is actually required.\n// The below code forces the compiler to:\n//  - absorb normally up to 2 times to set cache_size to 1\n//  - absorb in chunks of 3 to ensure perm. only happens every 3rd absorb\n//  - absorb normally up to 2 times to add any remaining values to the hash\n// In fixed len hashes, the compiler is able to tell that it will only need to perform the permutation every 3 absorbs.\n// NB: it also replaces unnecessary range checks (i < thing) with a bit check (&= i != thing), which alone reduces the gates of a var. hash by half.\n\n#[no_predicates]\nfn poseidon2_absorb_chunks<let N: u32>(\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n) -> Poseidon2Sponge {\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    // Even though shift is always 1 here, if we input in_len = 0 we get an underflow\n    // since we cannot isolate computation branches. The below is just to avoid that.\n    let shift = if in_len == 0 { 0 } else { 1 };\n    if in_len != 0 {\n        // cache_size = 0, init absorb\n        sponge.cache[0] = input[0];\n        sponge.cache_size = 1;\n        // shift = num elts already added to make cache_size 1 = 1 for a fresh sponge\n        // M = max_chunks = (N - 1 - (N - 1) % 3) / 3: (must be written as a fn of N to compile)\n        // max_remainder = (N - 1) % 3;\n        // max_chunks = (N - 1 - max_remainder) / 3;\n        sponge = poseidon2_absorb_chunks_loop::<N, (N - 1 - (N - 1) % 3) / 3>(\n            sponge,\n            input,\n            in_len,\n            variable,\n            shift,\n        );\n    }\n    sponge\n}\n\n// NB: If it's not required to check that the non-absorbed elts of 'input' are 0s, set skip_0_check=true\n#[no_predicates]\npub fn poseidon2_absorb_chunks_existing_sponge<let N: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    skip_0_check: bool,\n) -> Poseidon2Sponge {\n    let mut sponge = in_sponge;\n    // 'shift' is to account for already added inputs\n    let mut shift = 0;\n    // 'stop' is to avoid an underflow when inputting in_len = 0\n    let mut stop = false;\n    for i in 0..3 {\n        if shift == in_len {\n            stop = true;\n        }\n        if (sponge.cache_size != 1) & (!stop) {\n            sponge.absorb(input[i]);\n            shift += 1;\n        }\n    }\n    sponge = if stop {\n        sponge\n    } else {\n        // max_chunks = (N - (N % 3)) / 3;\n        poseidon2_absorb_chunks_loop::<N, (N - (N % 3)) / 3>(\n            sponge,\n            input,\n            in_len,\n            skip_0_check,\n            shift,\n        )\n    };\n    sponge\n}\n\n// The below is the loop to absorb elts into a poseidon sponge in chunks of 3\n// shift - the num of elts already absorbed to ensure the sponge's cache_size = 1\n// M - the max number of chunks required to absorb N things (must be comptime to compile)\n// NB: The 0 checks ('Found non-zero field...') are messy, but having a separate loop over N to check\n// for 0s costs 3N gates. Current approach is approx 2N gates.\n#[no_predicates]\nfn poseidon2_absorb_chunks_loop<let N: u32, let M: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n    shift: u32,\n) -> Poseidon2Sponge {\n    assert(in_len <= N, \"Given in_len to absorb is larger than the input array len\");\n    // When we have an existing sponge, we may have a shift of 0, and the final 'k+2' below = N\n    // The below avoids an overflow\n    let skip_last = 3 * M == N;\n    // Writing in_sponge: &mut does not compile\n    let mut sponge = in_sponge;\n    let mut should_add = true;\n    // The num of things left over after absorbing in 3s\n    let remainder = (in_len - shift) % 3;\n    // The num of chunks of 3 to absorb (maximum M)\n    let chunks = (in_len - shift - remainder) / 3;\n    for i in 0..M {\n        // Now we loop through cache size = 1 -> 3\n        should_add &= i != chunks;\n        // This is the index at the start of the chunk (for readability)\n        let k = 3 * i + shift;\n        if should_add {\n            // cache_size = 1, 2 => just assign\n            sponge.cache[1] = input[k];\n            sponge.cache[2] = input[k + 1];\n            // cache_size = 3 => duplex + perm\n            for j in 0..3 {\n                sponge.state[j] += sponge.cache[j];\n            }\n            sponge.state = std::hash::poseidon2_permutation(sponge.state, 4);\n            sponge.cache[0] = input[k + 2];\n            // cache_size is now 1 again, repeat loop\n        } else if (!variable) & (i != chunks) {\n            // if we are hashing a fixed len array which is a subarray, we check the remaining elts are 0\n            // NB: we don't check at i == chunks, because that chunk contains elts to be absorbed or checked below\n            let last_0 = if (i == M - 1) & (skip_last) {\n                0\n            } else {\n                input[k + 2]\n            };\n            let all_0 = (input[k] == 0) & (input[k + 1] == 0) & (last_0 == 0);\n            assert(all_0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    // we have 'remainder' num of items left to absorb\n    should_add = true;\n    // below is to avoid overflows (i.e. if inlen is close to N)\n    let mut should_check = !variable;\n    for i in 0..3 {\n        should_add &= i != remainder;\n        should_check &= in_len - remainder + i != N;\n        if should_add {\n            // we want to absorb the final 'remainder' items\n            sponge.absorb(input[in_len - remainder + i]);\n        } else if should_check {\n            assert(input[in_len - remainder + i] == 0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    sponge\n}\n\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let in_len = inputs.len() + 1;\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n// This function is  unconstrained because it is intended to be used in unconstrained context only as\n// in constrained contexts it would be too inefficient.\npub unconstrained fn poseidon2_hash_with_separator_bounded_vec<let N: u32, T>(\n    inputs: BoundedVec<Field, N>,\n    separator: T,\n) -> Field\nwhere\n    T: ToField,\n{\n    let in_len = inputs.len() + 1;\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs.get(i));\n    }\n\n    sponge.squeeze()\n}\n\n#[no_predicates]\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\n    let mut fields = [0; (N + 30) / 31];\n    let mut field_index = 0;\n    let mut current_field = [0; 31];\n    for i in 0..inputs.len() {\n        let index = i % 31;\n        current_field[index] = inputs[i];\n        if index == 30 {\n            fields[field_index] = field_from_bytes(current_field, false);\n            current_field = [0; 31];\n            field_index += 1;\n        }\n    }\n    if field_index != fields.len() {\n        fields[field_index] = field_from_bytes(current_field, false);\n    }\n    poseidon2_hash(fields)\n}\n\n#[test]\nfn poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let sub_chunk_hash = poseidon2_hash_subarray(input, in_len);\n    let fixed_len_hash = poseidon::poseidon2::Poseidon2::hash(fixed_input, fixed_input.len());\n    assert(sub_chunk_hash == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_matches_variable() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let variable_chunk_hash = poseidon2_cheaper_variable_hash(input, in_len);\n    let variable_len_hash = poseidon::poseidon2::Poseidon2::hash(input, in_len);\n    assert(variable_chunk_hash == variable_len_hash);\n}\n\n#[test]\nfn existing_sponge_poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    // absorb 250 of the 501 things\n    let empty_sponge = Poseidon2Sponge::new((in_len as Field) * TWO_POW_64);\n    let first_sponge = poseidon2_absorb_chunks_existing_sponge(empty_sponge, input, 250, true);\n    // now absorb the final 251 (since they are all 3s, im being lazy and not making a new array)\n    let mut final_sponge = poseidon2_absorb_chunks_existing_sponge(first_sponge, input, 251, true);\n    let fixed_len_hash = Poseidon2Sponge::hash(fixed_input, fixed_input.len());\n    assert(final_sponge.squeeze() == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_empty_inputs() {\n    let in_len = 0;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut constructed_empty_sponge = poseidon2_absorb_chunks(input, in_len, true);\n    let mut first_sponge =\n        poseidon2_absorb_chunks_existing_sponge(constructed_empty_sponge, input, in_len, true);\n    assert(first_sponge.squeeze() == constructed_empty_sponge.squeeze());\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n        25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n        48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,\n        71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93,\n        94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,\n        113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,\n        131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148,\n        149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = sha256::digest(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result =\n        compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0x3b18c58c739716e76429634a61375c45b3b5cd470c22ab6d3e14cee23dd992);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(\n        AztecAddress::from_field(1),\n        EthAddress::from_field(3),\n        5,\n        2,\n        4,\n    );\n    assert(hash_result == 0xaab2a5828156782b12a1dc6f336e2bc627eb1b9514b02d511f66296990c050);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        L2ToL1Message { recipient: EthAddress::from_field(1), content: 2 }.scope(\n            AztecAddress::from_field(3),\n        ),\n        version,\n        chainId,\n    );\n\n    // The following value was generated by `yarn-project/stdlib/src/hash/hash.test.ts`\n    let hash_from_typescript = 0x0081edf209e087ad31b3fd24263698723d57190bd1d6e9fe056fc0c0a68ee661;\n\n    assert_eq(hash, hash_from_typescript);\n}\n\n#[test]\nunconstrained fn poseidon2_hash_with_separator_bounded_vec_matches_non_bounded_vec_version() {\n    let inputs = BoundedVec::<Field, 4>::from_array([1, 2, 3]);\n    let separator = 42;\n\n    // Hash using bounded vec version\n    let bounded_result = poseidon2_hash_with_separator_bounded_vec(inputs, separator);\n\n    // Hash using regular version\n    let regular_result = poseidon2_hash_with_separator([1, 2, 3], separator);\n\n    // Results should match\n    assert_eq(bounded_result, regular_result);\n}\n"
    },
    "316": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v1.0.0-staging.6/noir-projects/noir-protocol-circuits/crates/types/src/meta/mod.nr",
      "source": "use super::traits::{Deserialize, Packable, Serialize};\n\n/// Returns the typed expression of a trait method implementation.\n///\n/// This helper function is preferred over directly inlining with `$typ::target_method()` in a quote,\n/// as direct inlining would result in missing import warnings in the generated code (specifically,\n/// warnings that the trait implementation is not in scope).\n///\n/// # Note\n/// A copy of this function exists in `aztec-nr/aztec/src/macros/utils.nr`. We maintain separate copies\n/// because importing it there from here would cause the `target_trait` to be interpreted in the context\n/// of this crate, making it impossible to compile code for traits from that crate (e.g. NoteType).\ncomptime fn get_trait_impl_method(\n    typ: Type,\n    target_trait: Quoted,\n    target_method: Quoted,\n) -> TypedExpr {\n    let trait_constraint = target_trait.as_trait_constraint();\n    typ\n        .get_trait_impl(trait_constraint)\n        .expect(f\"Could not find impl for {target_trait} for type {typ}\")\n        .methods()\n        .filter(|m| m.name() == target_method)[0]\n        .as_typed_expr()\n}\n\n/// Generates code that deserializes a struct, primitive type, array or string from a field array.\n///\n/// # Parameters\n/// - `name`: The name of the current field being processed, used to identify fields for replacement.\n/// - `typ`: The type of the struct or field being deserialized (e.g., a custom struct, array, or primitive).\n/// - `field_array_name`: The name of the field array containing serialized field data (e.g., `\"values\"`).\n/// - `num_already_consumed`: The number of fields already processed in previous recursion calls.\n/// - `should_unpack`: A boolean indicating whether the type should be unpacked (see description of `Packable`\n/// and `Serialize` trait for more information about the difference between packing and serialization).\n///\n/// # Returns\n/// A tuple containing:\n/// - `Quoted`: A code that deserializes a given struct, primitive type, array, or string from the field array.\n/// - `u32`: The total number of fields consumed during deserialization (used for recursion).\n///\n/// # Nested Struct Example\n/// Given the following setup:\n/// ```\n/// struct UintNote {\n///     value: u128,\n///     owner: AztecAddress,\n///     randomness: Field,\n/// }\n///\n/// struct AztecAddress {\n///     inner: Field,\n/// }\n/// ```\n///\n/// If `UintNote` is the input type, the function will generate the following deserialization code:\n/// ```\n/// UintNote {\n///     value: fields[0] as u128,\n///     owner: AztecAddress {\n///         inner: fields[1],\n///     },\n///     randomness: fields[2],\n/// }\n/// ```\n/// # Nested Struct Example with Unpacking\n/// - given the same setup as above and given that u128, AztecAddress and Field implement the `Packable` trait\n///   the result we get is:\n/// ```\n/// UintNote {\n///     value: aztec::protocol_types::traits::Packable::unpack([fields[0]]),\n///     owner: aztec::protocol_types::traits::Packable::unpack([fields[1]]),\n///     randomness: aztec::protocol_types::traits::Packable::unpack([fields[2]]),\n/// }\n/// ```\n///\n/// # Panics\n/// - If the deserialization logic encounters a type it does not support.\n/// - If an incorrect number of fields are consumed when deserializing a string.\npub comptime fn generate_deserialize_from_fields(\n    name: Quoted,\n    typ: Type,\n    field_array_name: Quoted,\n    num_already_consumed: u32,\n    should_unpack: bool,\n) -> (Quoted, u32) {\n    let mut result = quote {};\n    // Counter for the number of fields consumed\n    let mut consumed_counter: u32 = 0;\n\n    // If the type implements `Packable`, its length will be assigned to the `maybe_packed_len_typ` variable.\n    let maybe_packed_len_typ = std::meta::typ::fresh_type_variable();\n    let packable_constraint = quote { Packable<$maybe_packed_len_typ> }.as_trait_constraint();\n\n    if (should_unpack & typ.implements(packable_constraint)) {\n        // Unpacking is enabled and the given type implements the `Packable` trait so we call the `unpack()`\n        // method, add the resulting field array to `aux_vars` and each field to `fields`.\n        let packed_len = maybe_packed_len_typ.as_constant().unwrap();\n\n        // We copy the packed fields into a new array and pass that to the unpack function in a quote\n        let mut packed_fields_quotes = &[];\n        for i in 0..packed_len {\n            let index_in_field_array = i + num_already_consumed;\n            packed_fields_quotes =\n                packed_fields_quotes.push_back(quote { $field_array_name[$index_in_field_array] });\n        }\n        let packed_fields = packed_fields_quotes.join(quote {,});\n\n        // Now we call unpack on the type\n        let unpack_method = get_trait_impl_method(typ, quote { Packable<_> }, quote { unpack });\n        result = quote { $unpack_method([ $packed_fields ]) };\n\n        consumed_counter = packed_len;\n    } else if typ.is_bool() {\n        // The field is a primitive so we just reference it in the field array\n        result = quote { $field_array_name[$num_already_consumed] != 0 };\n        consumed_counter = 1;\n    } else if typ.is_field() | typ.as_integer().is_some() {\n        // The field is a primitive so we just reference it in the field array\n        result = quote { $field_array_name[$num_already_consumed] as $typ };\n        consumed_counter = 1;\n    } else if typ.as_data_type().is_some() {\n        // The field is a struct so we iterate over each struct field and recursively call\n        // `generate_deserialize_from_fields`\n        let (nested_def, generics) = typ.as_data_type().unwrap();\n        let nested_name = nested_def.name();\n        let mut deserialized_fields_list = &[];\n\n        // Iterate over each field in the struct\n        for field in nested_def.fields(generics) {\n            let (field_name, field_type, _) = field;\n            // Recursively call `generate_deserialize_from_fields` for each field in the struct\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                field_name,\n                field_type,\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n            // We increment the consumed counter by the number of fields consumed in the recursion\n            consumed_counter += num_consumed_in_recursion;\n            // We add the deserialized field to the list of deserialized fields.\n            // E.g. `value: u128 { lo: fields[0], hi: fields[1] }`\n            deserialized_fields_list =\n                deserialized_fields_list.push_back(quote { $field_name: $deserialized_field });\n        }\n\n        // We can construct the struct from the deserialized fields\n        let deserialized_fields = deserialized_fields_list.join(quote {,});\n        result = quote {\n                $nested_name {\n                    $deserialized_fields\n                }\n            };\n    } else if typ.as_array().is_some() {\n        // The field is an array so we iterate over each element and recursively call\n        // `generate_deserialize_from_fields`\n        let (element_type, array_len) = typ.as_array().unwrap();\n        let array_len = array_len.as_constant().unwrap();\n        let mut array_fields_list = &[];\n\n        // Iterate over each element in the array\n        for _ in 0..array_len {\n            // Recursively call `generate_deserialize_from_fields` for each element in the array\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                name,\n                element_type,\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n            // We increment the consumed counter by the number of fields consumed in the recursion\n            consumed_counter += num_consumed_in_recursion;\n            // We add the deserialized field to the list of deserialized fields.\n            array_fields_list = array_fields_list.push_back(deserialized_field);\n        }\n\n        // We can construct the array from the deserialized fields\n        let array_fields = array_fields_list.join(quote {,});\n        result = quote { [ $array_fields ] };\n    } else if typ.as_str().is_some() {\n        // The field is a string and we expect each byte of the string to be represented as 1 field in the field\n        // array. So we iterate over the string length and deserialize each character as u8 in the recursive call\n        // to `generate_deserialize_from_fields`.\n        let length_type = typ.as_str().unwrap();\n        let str_len = length_type.as_constant().unwrap();\n        let mut byte_list = &[];\n\n        // Iterate over each character in the string\n        for _ in 0..str_len {\n            // Recursively call `generate_deserialize_from_fields` for each character in the string\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                name,\n                quote {u8}.as_type(),\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n\n            // We should consume just one field in the recursion so we sanity check that\n            assert_eq(\n                num_consumed_in_recursion,\n                1,\n                \"Incorrect number of fields consumed in string deserialization\",\n            );\n\n            // We increment the consumed counter by 1 as we have consumed one field\n            consumed_counter += 1;\n\n            // We add the deserialized field to the list of deserialized fields.\n            // E.g. `fields[6] as u8`\n            byte_list = byte_list.push_back(deserialized_field);\n        }\n\n        // We construct the string from the deserialized fields\n        let bytes = byte_list.join(quote {,});\n        result = quote { [ $bytes ].as_str_unchecked() };\n    } else {\n        panic(\n            f\"Unsupported type for serialization of argument {name} and type {typ}\",\n        )\n    }\n\n    (result, consumed_counter)\n}\n\n/// Generates code that serializes a type into an array of fields. Also generates auxiliary variables if necessary\n/// for serialization. If `should_pack` is true, we check if the type implements the `Packable` trait and pack it\n/// if it does.\n///\n/// # Parameters\n/// - `name`: The base identifier (e.g., `self`, `some_var`).\n/// - `typ`: The type being serialized (e.g., a custom struct, array, or primitive type).\n/// - `should_pack`: A boolean indicating whether the type should be packed.\n///\n/// # Returns\n/// A tuple containing:\n/// - A flattened array of `Quoted` field references representing the serialized fields.\n/// - An array of `Quoted` auxiliary variables needed for serialization, such as byte arrays for strings.\n///\n/// # Examples\n///\n/// ## Struct\n/// Given the following struct:\n/// ```rust\n/// struct MockStruct {\n///     a: Field,\n///     b: Field,\n/// }\n/// ```\n///\n/// Serializing the struct:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_mock_struct }, MockStruct, false)\n/// // Returns:\n/// // ([`my_mock_struct.a`, `my_mock_struct.b`], [])\n/// ```\n///\n/// ## Nested Struct\n/// For a more complex struct:\n/// ```rust\n/// struct NestedStruct {\n///     m1: MockStruct,\n///     m2: MockStruct,\n/// }\n/// ```\n///\n/// Serialization output:\n/// ```rust\n/// generate_serialize_to_fields(quote { self }, NestedStruct, false)\n/// // Returns:\n/// // ([`self.m1.a`, `self.m1.b`, `self.m2.a`, `self.m2.b`], [])\n/// ```\n///\n/// ## Array\n/// For an array type:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_array }, [Field; 3], false)\n/// // Returns:\n/// // ([`my_array[0]`, `my_array[1]`, `my_array[2]`], [])\n/// ```\n///\n/// ## String\n/// For a string field, where each character is serialized as a `Field`:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_string }, StringType, false)\n/// // Returns:\n/// // ([`my_string_as_bytes[0] as Field`, `my_string_as_bytes[1] as Field`, ...],\n/// // [`let my_string_as_bytes = my_string.as_bytes()`])\n/// ```\n///\n/// ## Nested Struct with packing enabled\n/// - u128 has a `Packable` implementation hence it will be packed.\n///\n/// For a more complex struct:\n/// ```rust\n/// struct MyStruct {\n///     value: u128,\n///     value2: Field,\n/// }\n/// ```\n///\n/// # Panics\n/// - If the type is unsupported for serialization.\n/// - If the provided `typ` contains invalid constants or incompatible structures.\npub comptime fn generate_serialize_to_fields(\n    name: Quoted,\n    typ: Type,\n    should_pack: bool,\n) -> ([Quoted], [Quoted]) {\n    let mut fields = &[];\n    let mut aux_vars = &[];\n\n    // If the type implements `Packable`, its length will be assigned to the `maybe_packed_len_typ` variable.\n    let maybe_packed_len_typ = std::meta::typ::fresh_type_variable();\n    let packable_constraint =\n        quote { crate::traits::Packable<$maybe_packed_len_typ> }.as_trait_constraint();\n\n    if (should_pack & typ.implements(packable_constraint)) {\n        // Packing is enabled and the given type implements the `Packable` trait so we call the `pack()`\n        // method, add the resulting field array to `aux_vars` and each field to `fields`.\n        let packed_len = maybe_packed_len_typ.as_constant().unwrap();\n\n        // We collapse the name to a one that gets tokenized as a single token (e.g. \"self.value\" -> \"self_value\").\n        let name_at_one_token = collapse_to_one_token(name);\n        let packed_struct_name = f\"{name_at_one_token}_aux_var\".quoted_contents();\n\n        // We add the individual fields to the fields array\n        let pack_method = get_trait_impl_method(\n            typ,\n            quote { crate::traits::Packable<$packed_len> },\n            quote { pack },\n        );\n        let packed_struct = quote { let $packed_struct_name = $pack_method($name) };\n        for i in 0..packed_len {\n            fields = fields.push_back(quote { $packed_struct_name[$i] });\n        }\n\n        // We add the new auxiliary variable to the aux_vars array\n        aux_vars = aux_vars.push_back(packed_struct);\n    } else if typ.is_field() {\n        // For field we just add the value to fields\n        fields = fields.push_back(name);\n    } else if typ.as_integer().is_some() | typ.is_bool() {\n        // For integer and bool we just cast to Field and add the value to fields\n        fields = fields.push_back(quote { $name as Field });\n    } else if typ.as_data_type().is_some() {\n        // For struct we pref\n        let nested_struct = typ.as_data_type().unwrap();\n        let params = nested_struct.0.fields(nested_struct.1);\n        let struct_flattened = params.map(|(param_name, param_type, _)| {\n            let maybe_prefixed_name = if name == quote {} {\n                // Triggered when the param name is of a value available in the current scope (e.g. a function\n                // argument) --> then we don't prefix the name with anything.\n                param_name\n            } else {\n                // Triggered when we want to prefix the param name with the `name` from function input. This\n                // can typically be `self` when implementing a method on a struct.\n                quote { $name.$param_name }\n            };\n            generate_serialize_to_fields(quote {$maybe_prefixed_name}, param_type, should_pack)\n        });\n        let struct_flattened_fields = struct_flattened.fold(\n            &[],\n            |acc: [Quoted], (fields, _): (_, [Quoted])| acc.append(fields),\n        );\n        let struct_flattened_aux_vars = struct_flattened.fold(\n            &[],\n            |acc: [Quoted], (_, aux_vars): ([Quoted], _)| acc.append(aux_vars),\n        );\n        fields = fields.append(struct_flattened_fields);\n        aux_vars = aux_vars.append(struct_flattened_aux_vars);\n    } else if typ.as_array().is_some() {\n        // For array we recursively call `generate_serialize_to_fields(...)` for each element\n        let (element_type, array_len) = typ.as_array().unwrap();\n        let array_len = array_len.as_constant().unwrap();\n        for i in 0..array_len {\n            let (element_fields, element_aux_vars) =\n                generate_serialize_to_fields(quote { $name[$i] }, element_type, should_pack);\n            fields = fields.append(element_fields);\n            aux_vars = aux_vars.append(element_aux_vars);\n        }\n    } else if typ.as_str().is_some() {\n        // For string we convert the value to bytes, we store the `as_bytes` in an auxiliary variables and\n        // then we add each byte to fields as a Field\n        let length_type = typ.as_str().unwrap();\n        let str_len = length_type.as_constant().unwrap();\n        let as_member = name.as_expr().unwrap().as_member_access();\n        let var_name = if as_member.is_some() {\n            as_member.unwrap().1\n        } else {\n            name\n        };\n        let as_bytes_name = f\"{var_name}_as_bytes\".quoted_contents();\n        let as_bytes = quote { let $as_bytes_name = $name.as_bytes() };\n        for i in 0..str_len {\n            fields = fields.push_back(quote { $as_bytes_name[$i] as Field });\n        }\n        aux_vars = aux_vars.push_back(as_bytes);\n    } else {\n        panic(\n            f\"Unsupported type for serialization of argument {name} and type {typ}\",\n        )\n    }\n\n    (fields, aux_vars)\n}\n\n/// From a quote that gets tokenized to a multiple tokens we collapse it to a single token by replacing all `.` with `_`.\n/// E.g. \"self.values[0]\" -> \"self_values_0_\"\ncomptime fn collapse_to_one_token(q: Quoted) -> Quoted {\n    let tokens = q.tokens();\n\n    let mut single_token = quote {};\n    for token in tokens {\n        let new_token = if ((token == quote {.}) | (token == quote {[}) | (token == quote {]})) {\n            quote {_}\n        } else {\n            token\n        };\n        single_token = f\"{single_token}{new_token}\".quoted_contents();\n    }\n    single_token\n}\n\npub comptime fn derive_serialize(s: TypeDefinition) -> Quoted {\n    let typ = s.as_type();\n    let (fields, aux_vars) = generate_serialize_to_fields(quote { self }, typ, false);\n    let aux_vars_for_serialization = if aux_vars.len() > 0 {\n        let joint = aux_vars.join(quote {;});\n        quote { $joint; }\n    } else {\n        quote {}\n    };\n\n    let field_serializations = fields.join(quote {,});\n    let serialized_len = fields.len();\n    let serialize_trait: TraitConstraint =\n        quote { Serialize<$serialized_len> }.as_trait_constraint();\n    quote {\n        impl $serialize_trait for $typ {\n            #[inline_always]\n            fn serialize(self) -> [Field; $serialized_len] {\n                $aux_vars_for_serialization\n                [ $field_serializations ]\n            }\n        }\n    }\n}\n\npub(crate) comptime fn derive_deserialize(s: TypeDefinition) -> Quoted {\n    let typ = s.as_type();\n    let (fields, _) = generate_serialize_to_fields(quote { self }, typ, false);\n    let serialized_len = fields.len();\n    let (deserialized, _) =\n        generate_deserialize_from_fields(quote { self }, typ, quote { serialized }, 0, false);\n    quote {\n        impl Deserialize<$serialized_len> for $typ {\n            #[inline_always]\n            fn deserialize(serialized: [Field; $serialized_len]) -> Self {\n                $deserialized\n            }\n        }\n    }\n}\n\n/// Generates `Packable` implementation for a given struct and returns the packed length.\n///\n/// Note: We are having this function separate from `derive_packable` because we use this in the note macros to get\n/// the packed length of a note as well as the `Packable` implementation. We need the length to be able to register\n/// the note in the global `NOTES` map. There the length is used to generate partial note helper functions.\npub comptime fn derive_packable_and_get_packed_len(s: TypeDefinition) -> (Quoted, u32) {\n    let packing_enabled = true;\n\n    let typ = s.as_type();\n    let (fields, aux_vars) = generate_serialize_to_fields(quote { self }, typ, packing_enabled);\n    let aux_vars_for_packing = if aux_vars.len() > 0 {\n        let joint = aux_vars.join(quote {;});\n        quote { $joint; }\n    } else {\n        quote {}\n    };\n\n    let (unpacked, _) =\n        generate_deserialize_from_fields(quote { self }, typ, quote { packed }, 0, packing_enabled);\n\n    let field_packings = fields.join(quote {,});\n    let packed_len = fields.len();\n    let packable_trait: TraitConstraint = quote { Packable<$packed_len> }.as_trait_constraint();\n    (\n        quote {\n        impl $packable_trait for $typ {\n            fn pack(self) -> [Field; $packed_len] {\n                $aux_vars_for_packing\n                [ $field_packings ]\n            }\n\n            fn unpack(packed: [Field; $packed_len]) -> Self {\n                $unpacked\n            }\n        }\n    },\n        packed_len,\n    )\n}\n\npub(crate) comptime fn derive_packable(s: TypeDefinition) -> Quoted {\n    let (packable_impl, _) = derive_packable_and_get_packed_len(s);\n    packable_impl\n}\n\n#[derive(Packable, Serialize, Deserialize, Eq)]\npub struct Smol {\n    a: Field,\n    b: Field,\n}\n\n#[derive(Serialize, Deserialize, Eq)]\npub struct HasArray {\n    a: [Field; 2],\n    b: bool,\n}\n\n#[derive(Serialize, Deserialize, Eq)]\npub struct Fancier {\n    a: Smol,\n    b: [Field; 2],\n    c: [u8; 3],\n    d: str<16>,\n}\n\nfn main() {\n    assert(false);\n}\n\n#[test]\nfn smol_test() {\n    let smol = Smol { a: 1, b: 2 };\n    let serialized = smol.serialize();\n    assert(serialized == [1, 2], serialized);\n    let deserialized = Smol::deserialize(serialized);\n    assert(deserialized == smol);\n\n    // None of the struct members implements the `Packable` trait so the packed and serialized data should be the same\n    let packed = smol.pack();\n    assert_eq(packed, serialized, \"Packed does not match serialized\");\n}\n\n#[test]\nfn has_array_test() {\n    let has_array = HasArray { a: [1, 2], b: true };\n    let serialized = has_array.serialize();\n    assert(serialized == [1, 2, 1], serialized);\n    let deserialized = HasArray::deserialize(serialized);\n    assert(deserialized == has_array);\n}\n\n#[test]\nfn fancier_test() {\n    let fancier =\n        Fancier { a: Smol { a: 1, b: 2 }, b: [0, 1], c: [1, 2, 3], d: \"metaprogramming!\" };\n    let serialized = fancier.serialize();\n    assert(\n        serialized\n            == [\n                1, 2, 0, 1, 1, 2, 3, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61,\n                0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x21,\n            ],\n        serialized,\n    );\n    let deserialized = Fancier::deserialize(serialized);\n    assert(deserialized == fancier);\n}\n"
    },
    "318": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v1.0.0-staging.6/noir-projects/noir-protocol-circuits/crates/types/src/point.nr",
      "source": "pub use dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse crate::{hash::poseidon2_hash, traits::{Deserialize, Empty, Hash, Packable, Serialize}};\n\npub global POINT_LENGTH: u32 = 3;\n\nimpl Serialize<POINT_LENGTH> for Point {\n    fn serialize(self: Self) -> [Field; POINT_LENGTH] {\n        [self.x, self.y, self.is_infinite as Field]\n    }\n}\n\nimpl Hash for Point {\n    fn hash(self) -> Field {\n        poseidon2_hash(self.serialize())\n    }\n}\n\nimpl Empty for Point {\n    /// Note: Does not return a valid point on curve - instead represents an empty/\"unpopulated\" point struct (e.g.\n    /// empty/unpopulated value in an array of points).\n    fn empty() -> Self {\n        Point { x: 0, y: 0, is_infinite: false }\n    }\n}\n\nimpl Deserialize<POINT_LENGTH> for Point {\n    fn deserialize(serialized: [Field; POINT_LENGTH]) -> Point {\n        Point { x: serialized[0], y: serialized[1], is_infinite: serialized[2] != 0 }\n    }\n}\n// TODO(#11356): use compact representation here.\nimpl Packable<POINT_LENGTH> for Point {\n    fn pack(self) -> [Field; POINT_LENGTH] {\n        self.serialize()\n    }\n\n    fn unpack(packed: [Field; POINT_LENGTH]) -> Self {\n        Self::deserialize(packed)\n    }\n}\n"
    },
    "319": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v1.0.0-staging.6/noir-projects/noir-protocol-circuits/crates/types/src/poseidon2.nr",
      "source": "use crate::constants::TWO_POW_64;\n\n// NB: This is a clone of noir/noir-repo/noir_stdlib/src/hash/poseidon2.nr\n// It exists as we sometimes need to perform custom absorption, but the stdlib version\n// has a private absorb() method (it's also designed to just be a hasher)\n// Can be removed when standalone noir poseidon lib exists: See noir#6679\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2Sponge {\n    pub cache: [Field; 3],\n    pub state: [Field; 4],\n    pub cache_size: u32,\n    pub squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2Sponge {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2Sponge::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2Sponge {\n        let mut result =\n            Poseidon2Sponge { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = std::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    pub fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    pub fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let iv: Field = (in_len as Field) * TWO_POW_64;\n        let mut sponge = Poseidon2Sponge::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n"
    },
    "329": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v1.0.0-staging.6/noir-projects/noir-protocol-circuits/crates/types/src/public_keys.nr",
      "source": "use crate::{\n    address::public_keys_hash::PublicKeysHash,\n    constants::{\n        DEFAULT_IVPK_M_X, DEFAULT_IVPK_M_Y, DEFAULT_NPK_M_X, DEFAULT_NPK_M_Y, DEFAULT_OVPK_M_X,\n        DEFAULT_OVPK_M_Y, DEFAULT_TPK_M_X, DEFAULT_TPK_M_Y, GENERATOR_INDEX__PUBLIC_KEYS_HASH,\n    },\n    hash::poseidon2_hash_with_separator,\n    point::POINT_LENGTH,\n    traits::{Deserialize, Hash, Serialize},\n};\n\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse std::default::Default;\n\npub global PUBLIC_KEYS_LENGTH: u32 = 12;\n\npub struct PublicKeys {\n    pub npk_m: NpkM,\n    pub ivpk_m: IvpkM,\n    pub ovpk_m: OvpkM,\n    pub tpk_m: TpkM,\n}\n\npub trait ToPoint {\n    fn to_point(self) -> Point;\n}\n\npub struct NpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for NpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for NpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\n// Note: If we store npk_m_hash directly we can remove this trait implementation. See #8091\nimpl Hash for NpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\npub struct IvpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for IvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for IvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct OvpkM {\n    pub inner: Point,\n}\n\nimpl Hash for OvpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\nimpl ToPoint for OvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for OvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct TpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for TpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for TpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\nimpl Default for PublicKeys {\n    fn default() -> Self {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point { x: DEFAULT_NPK_M_X, y: DEFAULT_NPK_M_Y, is_infinite: false },\n            },\n            ivpk_m: IvpkM {\n                inner: Point { x: DEFAULT_IVPK_M_X, y: DEFAULT_IVPK_M_Y, is_infinite: false },\n            },\n            ovpk_m: OvpkM {\n                inner: Point { x: DEFAULT_OVPK_M_X, y: DEFAULT_OVPK_M_Y, is_infinite: false },\n            },\n            tpk_m: TpkM {\n                inner: Point { x: DEFAULT_TPK_M_X, y: DEFAULT_TPK_M_Y, is_infinite: false },\n            },\n        }\n    }\n}\n\nimpl Eq for PublicKeys {\n    fn eq(self, other: PublicKeys) -> bool {\n        (self.npk_m.inner == other.npk_m.inner)\n            & (self.ivpk_m.inner == other.ivpk_m.inner)\n            & (self.ovpk_m.inner == other.ovpk_m.inner)\n            & (self.tpk_m.inner == other.tpk_m.inner)\n    }\n}\n\nimpl PublicKeys {\n    pub fn hash(self) -> PublicKeysHash {\n        PublicKeysHash::from_field(poseidon2_hash_with_separator(\n            self.serialize(),\n            GENERATOR_INDEX__PUBLIC_KEYS_HASH as Field,\n        ))\n    }\n}\n\nimpl Serialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn serialize(self) -> [Field; PUBLIC_KEYS_LENGTH] {\n        [\n            self.npk_m.inner.x,\n            self.npk_m.inner.y,\n            self.npk_m.inner.is_infinite as Field,\n            self.ivpk_m.inner.x,\n            self.ivpk_m.inner.y,\n            self.ivpk_m.inner.is_infinite as Field,\n            self.ovpk_m.inner.x,\n            self.ovpk_m.inner.y,\n            self.ovpk_m.inner.is_infinite as Field,\n            self.tpk_m.inner.x,\n            self.tpk_m.inner.y,\n            self.tpk_m.inner.is_infinite as Field,\n        ]\n    }\n}\n\nimpl Deserialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn deserialize(serialized: [Field; PUBLIC_KEYS_LENGTH]) -> PublicKeys {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point {\n                    x: serialized[0],\n                    y: serialized[1],\n                    is_infinite: serialized[2] != 0,\n                },\n            },\n            ivpk_m: IvpkM {\n                inner: Point {\n                    x: serialized[3],\n                    y: serialized[4],\n                    is_infinite: serialized[5] != 0,\n                },\n            },\n            ovpk_m: OvpkM {\n                inner: Point {\n                    x: serialized[6],\n                    y: serialized[7],\n                    is_infinite: serialized[8] != 0,\n                },\n            },\n            tpk_m: TpkM {\n                inner: Point {\n                    x: serialized[9],\n                    y: serialized[10],\n                    is_infinite: serialized[11] != 0,\n                },\n            },\n        }\n    }\n}\n\npub struct AddressPoint {\n    pub inner: Point,\n}\n\nimpl ToPoint for AddressPoint {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\n#[test]\nunconstrained fn compute_public_keys_hash() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let actual = keys.hash();\n    let expected_public_keys_hash =\n        0x0fecd9a32db731fec1fded1b9ff957a1625c069245a3613a2538bd527068b0ad;\n\n    assert(actual.to_field() == expected_public_keys_hash);\n}\n\n#[test]\nunconstrained fn compute_default_hash() {\n    let keys = PublicKeys::default();\n\n    let actual = keys.hash();\n    let test_data_default_hash = 0x1d3bf1fb93ae0e9cda83b203dd91c3bfb492a9aecf30ec90e1057eced0f0e62d;\n\n    assert(actual.to_field() == test_data_default_hash);\n}\n\n#[test]\nunconstrained fn test_public_keys_serialization() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let serialized = keys.serialize();\n    let deserialized = PublicKeys::deserialize(serialized);\n\n    assert_eq(keys.npk_m.inner.x, deserialized.npk_m.inner.x);\n    assert_eq(keys.npk_m.inner.y, deserialized.npk_m.inner.y);\n    assert_eq(keys.ivpk_m.inner.x, deserialized.ivpk_m.inner.x);\n    assert_eq(keys.ivpk_m.inner.y, deserialized.ivpk_m.inner.y);\n    assert_eq(keys.ovpk_m.inner.x, deserialized.ovpk_m.inner.x);\n    assert_eq(keys.ovpk_m.inner.y, deserialized.ovpk_m.inner.y);\n    assert_eq(keys.tpk_m.inner.x, deserialized.tpk_m.inner.x);\n    assert_eq(keys.tpk_m.inner.y, deserialized.tpk_m.inner.y);\n}\n"
    },
    "340": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v1.0.0-staging.6/noir-projects/noir-protocol-circuits/crates/types/src/storage/map.nr",
      "source": "use crate::{hash::poseidon2_hash, traits::ToField};\n\npub fn derive_storage_slot_in_map<K>(storage_slot: Field, key: K) -> Field\nwhere\n    K: ToField,\n{\n    poseidon2_hash([storage_slot, key.to_field()])\n}\n\nmod test {\n    use crate::{address::AztecAddress, storage::map::derive_storage_slot_in_map, traits::FromField};\n\n    #[test]\n    fn test_derive_storage_slot_in_map_matches_typescript() {\n        let map_slot = 0x132258fb6962c4387ba659d9556521102d227549a386d39f0b22d1890d59c2b5;\n        let key = AztecAddress::from_field(\n            0x302dbc2f9b50a73283d5fb2f35bc01eae8935615817a0b4219a057b2ba8a5a3f,\n        );\n\n        let slot = derive_storage_slot_in_map(map_slot, key);\n\n        // The following value was generated by `map_slot.test.ts`\n        let slot_from_typescript =\n            0x15b9fe39449affd8b377461263e9d2b610b9ad40580553500b4e41d9cbd887ac;\n\n        assert_eq(slot, slot_from_typescript);\n    }\n}\n"
    },
    "354": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v1.0.0-staging.6/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr",
      "source": "use crate::meta::{derive_deserialize, derive_packable, derive_serialize};\nuse crate::utils::field::field_from_bytes;\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic\n// if a value can actually be zero. In a future refactor, we can\n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\npub trait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field {\n    #[inline_always]\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl Empty for u1 {\n    #[inline_always]\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u8 {\n    #[inline_always]\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u32 {\n    #[inline_always]\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u64 {\n    #[inline_always]\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u128 {\n    #[inline_always]\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl<T, let N: u32> Empty for [T; N]\nwhere\n    T: Empty,\n{\n    #[inline_always]\n    fn empty() -> Self {\n        [T::empty(); N]\n    }\n}\n\nimpl<T> Empty for Option<T> {\n    #[inline_always]\n    fn empty() -> Self {\n        Option::none()\n    }\n}\n\npub fn is_empty<T>(item: T) -> bool\nwhere\n    T: Empty + Eq,\n{\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, let N: u32>(array: [T; N]) -> bool\nwhere\n    T: Empty + Eq,\n{\n    array.all(|elem| is_empty(elem))\n}\n\npub trait Hash {\n    fn hash(self) -> Field;\n}\n\npub trait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    #[inline_always]\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for bool {\n    #[inline_always]\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u1 {\n    #[inline_always]\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u8 {\n    #[inline_always]\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u32 {\n    #[inline_always]\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u64 {\n    #[inline_always]\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u128 {\n    #[inline_always]\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl<let N: u32> ToField for str<N> {\n    #[inline_always]\n    fn to_field(self) -> Field {\n        assert(N < 32, \"String doesn't fit in a field, consider using Serialize instead\");\n        field_from_bytes(self.as_bytes(), true)\n    }\n}\n\npub trait FromField {\n    fn from_field(value: Field) -> Self;\n}\n\nimpl FromField for Field {\n    #[inline_always]\n    fn from_field(value: Field) -> Self {\n        value\n    }\n}\n\nimpl FromField for bool {\n    #[inline_always]\n    fn from_field(value: Field) -> Self {\n        value != 0\n    }\n}\nimpl FromField for u1 {\n    #[inline_always]\n    fn from_field(value: Field) -> Self {\n        value as u1\n    }\n}\nimpl FromField for u8 {\n    #[inline_always]\n    fn from_field(value: Field) -> Self {\n        value as u8\n    }\n}\nimpl FromField for u32 {\n    #[inline_always]\n    fn from_field(value: Field) -> Self {\n        value as u32\n    }\n}\nimpl FromField for u64 {\n    #[inline_always]\n    fn from_field(value: Field) -> Self {\n        value as u64\n    }\n}\nimpl FromField for u128 {\n    #[inline_always]\n    fn from_field(value: Field) -> Self {\n        value as u128\n    }\n}\n\n// docs:start:serialize\n/// Trait for serializing Noir types into arrays of Fields.\n///\n/// An implementation of the Serialize trait has to follow Noir's intrinsic serialization (each member of a struct\n/// converted directly into one or more Fields without any packing or compression). This trait (and Deserialize) are\n/// typically used to communicate between Noir and TypeScript (via oracles and function arguments).\n///\n/// # On Following Noir's Intrinsic Serialization\n/// When calling a Noir function from TypeScript (TS), first the function arguments are serialized into an array\n/// of fields. This array is then included in the initial witness. Noir's intrinsic serialization is then used\n/// to deserialize the arguments from the witness. When the same Noir function is called from Noir this Serialize trait\n/// is used instead of the serialization in TS. For this reason we need to have a match between TS serialization,\n/// Noir's intrinsic serialization and the implementation of this trait. If there is a mismatch, the function calls\n/// fail with an arguments hash mismatch error message.\n///\n/// # Type Parameters\n/// * `N` - The length of the output Field array, known at compile time\n///\n/// # Example\n/// ```\n/// impl<let N: u32> Serialize<N> for str<N> {\n///     fn serialize(self) -> [Field; N] {\n///         let bytes = self.as_bytes();\n///         let mut fields = [0; N];\n///         for i in 0..bytes.len() {\n///             fields[i] = bytes[i] as Field;  // Each byte gets its own Field\n///         }\n///         fields\n///     }\n/// }\n/// ```\n#[derive_via(derive_serialize)]\npub trait Serialize<let N: u32> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\nimpl<let N: u32> Serialize<N> for str<N> {\n    #[inline_always]\n    fn serialize(self) -> [Field; N] {\n        let bytes = self.as_bytes();\n        let mut fields = [0; N];\n        for i in 0..bytes.len() {\n            fields[i] = bytes[i] as Field;\n        }\n        fields\n    }\n}\n\n// T = type of item in BoundedVec\n// M = max length of BoundedVec\n// O = field length of T\n// O * M + 1 = total serialized length of BoundedVec<T, M> (the +1 is for length of the BoundedVec)\nimpl<T, let M: u32, let O: u32> Deserialize<O * M + 1> for BoundedVec<T, M>\nwhere\n    T: Deserialize<O>,\n{\n    #[inline_always]\n    fn deserialize(fields: [Field; O * M + 1]) -> Self {\n        let mut new_bounded_vec: BoundedVec<T, M> = BoundedVec::new();\n\n        // Length is stored in the last field as we need to match intrinsic Noir serialization and the `len` struct\n        // field is after `storage` struct field (see `bounded_vec.nr` in noir-stdlib)\n        let len = fields[O * M] as u32;\n\n        for i in 0..len {\n            let mut nested_fields = [0; O];\n            for j in 0..O {\n                nested_fields[j] = fields[i * O + j];\n            }\n\n            let item = T::deserialize(nested_fields);\n            new_bounded_vec.push(item);\n        }\n\n        new_bounded_vec\n    }\n}\n\n// This may cause issues if used as program input, because noir disallows empty arrays for program input.\n// I think this is okay because I don't foresee a unit type being used as input. But leaving this comment as a hint\n// if someone does run into this in the future.\nimpl<let N: u32> Deserialize<0> for () {\n    fn deserialize(_fields: [Field; 0]) -> Self {\n        ()\n    }\n}\n\nimpl<T, let M: u32, let O: u32> Serialize<O * M + 1> for BoundedVec<T, M>\nwhere\n    T: Serialize<O>,\n{\n    #[inline_always]\n    fn serialize(self) -> [Field; O * M + 1] {\n        let mut fields = [0; O * M + 1];\n\n        let storage = self.storage();\n\n        for i in 0..M {\n            let serialized_item = storage[i].serialize();\n\n            for j in 0..O {\n                fields[i * O + j] = serialized_item[j];\n            }\n        }\n\n        // Length is stored in the last field as we need to match intrinsic Noir serialization and the `len` struct\n        // field is after `storage` struct field (see `bounded_vec.nr` in noir-stdlib)\n        fields[O * M] = self.len() as Field;\n\n        fields\n    }\n}\n\n// docs:start:deserialize\n/// Trait for deserializing Noir types from arrays of Fields.\n///\n/// An implementation of the Deserialize trait has to follow Noir's intrinsic serialization (each member of a struct\n/// converted directly into one or more Fields without any packing or compression). This trait is typically used when\n/// deserializing return values from function calls in Noir. Since the same function could be called from TypeScript\n/// (TS), in which case the TS deserialization would get used, we need to have a match between the 2.\n///\n/// # Type Parameters\n/// * `N` - The length of the input Field array, known at compile time\n///\n/// # Example\n/// ```\n/// impl<let N: u32> Deserialize<N> for str<N> {\n///     fn deserialize(fields: [Field; N]) -> Self {\n///         str<N>::from(fields.map(|value| value as u8))\n///     }\n/// }\n/// ```\n#[derive_via(derive_deserialize)]\npub trait Deserialize<let N: u32> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n\nimpl<let N: u32> Deserialize<N> for str<N> {\n    #[inline_always]\n    fn deserialize(fields: [Field; N]) -> Self {\n        str::<N>::from(fields.map(|value| value as u8))\n    }\n}\n\n/// Trait for efficiently packing and unpacking Noir types into and from arrays of Fields.\n///\n/// The `Packable` trait allows types to be serialized and deserialized with a focus on minimizing the size of\n/// the resulting Field array. This trait is used when storage efficiency is critical (e.g. when storing data\n/// in the contract's public storage).\n///\n/// # Type Parameters\n/// * `N` - The length of the Field array, known at compile time.\n#[derive_via(derive_packable)]\npub trait Packable<let N: u32> {\n    /// Packs the current value into a compact array of `Field` elements.\n    fn pack(self) -> [Field; N];\n\n    /// Unpacks a compact array of `Field` elements into the original value.\n    fn unpack(fields: [Field; N]) -> Self;\n}\n\n#[test]\nunconstrained fn bounded_vec_serialization() {\n    // Test empty BoundedVec\n    let empty_vec: BoundedVec<Field, 3> = BoundedVec::from_array([]);\n    let serialized = empty_vec.serialize();\n    let deserialized = BoundedVec::<Field, 3>::deserialize(serialized);\n    assert_eq(empty_vec, deserialized);\n    assert_eq(deserialized.len(), 0);\n\n    // Test partially filled BoundedVec\n    let partial_vec: BoundedVec<[u32; 2], 3> = BoundedVec::from_array([[1, 2]]);\n    let serialized = partial_vec.serialize();\n    let deserialized = BoundedVec::<[u32; 2], 3>::deserialize(serialized);\n    assert_eq(partial_vec, deserialized);\n    assert_eq(deserialized.len(), 1);\n    assert_eq(deserialized.get(0), [1, 2]);\n\n    // Test full BoundedVec\n    let full_vec: BoundedVec<[u32; 2], 3> = BoundedVec::from_array([[1, 2], [3, 4], [5, 6]]);\n    let serialized = full_vec.serialize();\n    let deserialized = BoundedVec::<[u32; 2], 3>::deserialize(serialized);\n    assert_eq(full_vec, deserialized);\n    assert_eq(deserialized.len(), 3);\n    assert_eq(deserialized.get(0), [1, 2]);\n    assert_eq(deserialized.get(1), [3, 4]);\n    assert_eq(deserialized.get(2), [5, 6]);\n}\n"
    },
    "359": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v1.0.0-staging.6/noir-projects/noir-protocol-circuits/crates/types/src/type_packing.nr",
      "source": "use crate::traits::Packable;\n\nglobal BOOL_PACKED_LEN: u32 = 1;\nglobal U8_PACKED_LEN: u32 = 1;\nglobal U16_PACKED_LEN: u32 = 1;\nglobal U32_PACKED_LEN: u32 = 1;\nglobal U64_PACKED_LEN: u32 = 1;\nglobal U128_PACKED_LEN: u32 = 1;\nglobal FIELD_PACKED_LEN: u32 = 1;\nglobal I8_PACKED_LEN: u32 = 1;\nglobal I16_PACKED_LEN: u32 = 1;\nglobal I32_PACKED_LEN: u32 = 1;\nglobal I64_PACKED_LEN: u32 = 1;\n\nimpl Packable<BOOL_PACKED_LEN> for bool {\n    fn pack(self) -> [Field; BOOL_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; BOOL_PACKED_LEN]) -> bool {\n        (fields[0] as u1) != 0\n    }\n}\n\nimpl Packable<U8_PACKED_LEN> for u8 {\n    fn pack(self) -> [Field; U8_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U8_PACKED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Packable<U16_PACKED_LEN> for u16 {\n    fn pack(self) -> [Field; U16_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U16_PACKED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Packable<U32_PACKED_LEN> for u32 {\n    fn pack(self) -> [Field; U32_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U32_PACKED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Packable<U64_PACKED_LEN> for u64 {\n    fn pack(self) -> [Field; U64_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U64_PACKED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Packable<U128_PACKED_LEN> for u128 {\n    fn pack(self) -> [Field; U128_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U128_PACKED_LEN]) -> Self {\n        fields[0] as u128\n    }\n}\n\nimpl Packable<FIELD_PACKED_LEN> for Field {\n    fn pack(self) -> [Field; FIELD_PACKED_LEN] {\n        [self]\n    }\n\n    fn unpack(fields: [Field; FIELD_PACKED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Packable<I8_PACKED_LEN> for i8 {\n    fn pack(self) -> [Field; I8_PACKED_LEN] {\n        [self as u8 as Field]\n    }\n\n    fn unpack(fields: [Field; I8_PACKED_LEN]) -> Self {\n        fields[0] as u8 as i8\n    }\n}\n\nimpl Packable<I16_PACKED_LEN> for i16 {\n    fn pack(self) -> [Field; I16_PACKED_LEN] {\n        [self as u16 as Field]\n    }\n\n    fn unpack(fields: [Field; I16_PACKED_LEN]) -> Self {\n        fields[0] as u16 as i16\n    }\n}\n\nimpl Packable<I32_PACKED_LEN> for i32 {\n    fn pack(self) -> [Field; I32_PACKED_LEN] {\n        [self as u32 as Field]\n    }\n\n    fn unpack(fields: [Field; I32_PACKED_LEN]) -> Self {\n        fields[0] as u32 as i32\n    }\n}\n\nimpl Packable<I64_PACKED_LEN> for i64 {\n    fn pack(self) -> [Field; I64_PACKED_LEN] {\n        [self as u64 as Field]\n    }\n\n    fn unpack(fields: [Field; I64_PACKED_LEN]) -> Self {\n        fields[0] as u64 as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Packable<N * M> for [T; N]\nwhere\n    T: Packable<M>,\n{\n    fn pack(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].pack();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n\n    fn unpack(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Packable::unpack, result)\n    }\n}\n\n#[test]\nfn test_u16_packing() {\n    let a: u16 = 10;\n    assert_eq(a, u16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i8_packing() {\n    let a: i8 = -10;\n    assert_eq(a, i8::unpack(a.pack()));\n}\n\n#[test]\nfn test_i16_packing() {\n    let a: i16 = -10;\n    assert_eq(a, i16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i32_packing() {\n    let a: i32 = -10;\n    assert_eq(a, i32::unpack(a.pack()));\n}\n\n#[test]\nfn test_i64_packing() {\n    let a: i64 = -10;\n    assert_eq(a, i64::unpack(a.pack()));\n}\n"
    },
    "360": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v1.0.0-staging.6/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr",
      "source": "use crate::traits::{Deserialize, Serialize};\n\nglobal BOOL_SERIALIZED_LEN: u32 = 1;\nglobal U8_SERIALIZED_LEN: u32 = 1;\nglobal U16_SERIALIZED_LEN: u32 = 1;\nglobal U32_SERIALIZED_LEN: u32 = 1;\nglobal U64_SERIALIZED_LEN: u32 = 1;\nglobal U128_SERIALIZED_LEN: u32 = 1;\nglobal FIELD_SERIALIZED_LEN: u32 = 1;\nglobal I8_SERIALIZED_LEN: u32 = 1;\nglobal I16_SERIALIZED_LEN: u32 = 1;\nglobal I32_SERIALIZED_LEN: u32 = 1;\nglobal I64_SERIALIZED_LEN: u32 = 1;\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] != 0\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<U16_SERIALIZED_LEN> for u16 {\n    fn serialize(self) -> [Field; U16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U16_SERIALIZED_LEN> for u16 {\n    fn deserialize(fields: [Field; U16_SERIALIZED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize<U128_SERIALIZED_LEN> for u128 {\n    fn serialize(self) -> [Field; U128_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U128_SERIALIZED_LEN> for u128 {\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\n        fields[0] as u128\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; FIELD_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Serialize<I8_SERIALIZED_LEN> for i8 {\n    fn serialize(self) -> [Field; I8_SERIALIZED_LEN] {\n        [self as u8 as Field]\n    }\n}\n\nimpl Deserialize<I8_SERIALIZED_LEN> for i8 {\n    fn deserialize(fields: [Field; I8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8 as i8\n    }\n}\n\nimpl Serialize<I16_SERIALIZED_LEN> for i16 {\n    fn serialize(self) -> [Field; I16_SERIALIZED_LEN] {\n        [self as u16 as Field]\n    }\n}\n\nimpl Deserialize<I16_SERIALIZED_LEN> for i16 {\n    fn deserialize(fields: [Field; I16_SERIALIZED_LEN]) -> Self {\n        fields[0] as u16 as i16\n    }\n}\n\nimpl Serialize<I32_SERIALIZED_LEN> for i32 {\n    fn serialize(self) -> [Field; I32_SERIALIZED_LEN] {\n        [self as u32 as Field]\n    }\n}\n\nimpl Deserialize<I32_SERIALIZED_LEN> for i32 {\n    fn deserialize(fields: [Field; I32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32 as i32\n    }\n}\n\nimpl Serialize<I64_SERIALIZED_LEN> for i64 {\n    fn serialize(self) -> [Field; I64_SERIALIZED_LEN] {\n        [self as u64 as Field]\n    }\n}\n\nimpl Deserialize<I64_SERIALIZED_LEN> for i64 {\n    fn deserialize(fields: [Field; I64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64 as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Serialize<N * M> for [T; N]\nwhere\n    T: Serialize<M>,\n{\n    fn serialize(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].serialize();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Deserialize<N * M> for [T; N]\nwhere\n    T: Deserialize<M>,\n{\n    fn deserialize(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Deserialize::deserialize, result)\n    }\n}\n\nimpl<T, let N: u32> Serialize<N + 1> for Option<T>\nwhere\n    T: Serialize<N>,\n{\n    fn serialize(self) -> [Field; N + 1] {\n        let mut result: [Field; N + 1] = std::mem::zeroed();\n\n        result[0] = if self.is_some() { 1 } else { 0 };\n\n        let value_serialized = self.unwrap_unchecked().serialize();\n        for i in 0..N {\n            result[1 + i] = value_serialized[i];\n        }\n\n        result\n    }\n}\n\nimpl<T, let N: u32> Deserialize<N + 1> for Option<T>\nwhere\n    T: Deserialize<N>,\n{\n    fn deserialize(fields: [Field; N + 1]) -> Self {\n        if fields[0] == 1 {\n            let mut value_serialized: [Field; N] = std::mem::zeroed();\n            for i in 0..N {\n                value_serialized[i] = fields[1 + i];\n            }\n\n            Option::some(T::deserialize(value_serialized))\n        } else {\n            Option::none()\n        }\n    }\n}\n\nmod test {\n    use crate::traits::{Deserialize, Serialize};\n\n    #[test]\n    fn u16_serialization() {\n        let a: u16 = 10;\n        assert_eq(a, u16::deserialize(a.serialize()));\n    }\n\n    #[test]\n    fn i8_serialization() {\n        let a: i8 = -10;\n        assert_eq(a, i8::deserialize(a.serialize()));\n    }\n\n    #[test]\n    fn i16_serialization() {\n        let a: i16 = -10;\n        assert_eq(a, i16::deserialize(a.serialize()));\n    }\n\n    #[test]\n    fn i32_serialization() {\n        let a: i32 = -10;\n        assert_eq(a, i32::deserialize(a.serialize()));\n    }\n\n    #[test]\n    fn i64_serialization() {\n        let a: i64 = -10;\n        assert_eq(a, i64::deserialize(a.serialize()));\n    }\n\n    #[test]\n    fn option_field_serialization() {\n        let opt_some = Option::some(5);\n        assert_eq(Option::<_>::deserialize(opt_some.serialize()), opt_some);\n\n        let opt_none = Option::none();\n        assert_eq(Option::<Field>::deserialize(opt_none.serialize()), opt_none);\n    }\n\n    #[test]\n    fn option_array_serialization() {\n        let opt_some = Option::some([2, 5]);\n        assert_eq(Option::<_>::deserialize(opt_some.serialize()), opt_some);\n\n        let opt_none = Option::none();\n        assert_eq(Option::<Field>::deserialize(opt_none.serialize()), opt_none);\n    }\n}\n"
    },
    "378": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v1.0.0-staging.6/noir-projects/noir-protocol-circuits/crates/types/src/utils/arrays.nr",
      "source": "pub mod assert_array_appended;\npub mod assert_array_prepended;\npub mod assert_combined_array;\npub mod assert_combined_transformed_array;\npub mod assert_exposed_sorted_transformed_value_array;\npub mod assert_sorted_array;\npub mod assert_sorted_transformed_padded_array;\npub mod assert_sorted_transformed_value_array;\npub mod assert_split_sorted_transformed_value_arrays;\npub mod assert_split_transformed_padded_arrays;\npub mod assert_split_transformed_value_arrays;\npub mod get_sorted_result;\npub mod get_sorted_tuple;\npub mod sort_by;\npub mod sort_by_counter;\n\n// Re-exports.\npub use assert_array_appended::{\n    assert_array_appended, assert_array_appended_and_scoped, assert_array_appended_reversed,\n    assert_array_appended_scoped,\n};\npub use assert_array_prepended::assert_array_prepended;\npub use assert_combined_array::{assert_combined_array, combine_arrays};\npub use assert_combined_transformed_array::{\n    assert_combined_transformed_array, combine_and_transform_arrays,\n};\npub use assert_exposed_sorted_transformed_value_array::{\n    assert_exposed_sorted_transformed_value_array,\n    get_order_hints::{get_order_hints_asc, OrderHint},\n};\npub use assert_sorted_array::assert_sorted_array;\npub use assert_sorted_transformed_padded_array::{\n    assert_sorted_transformed_i_padded_array_capped_size,\n    assert_sorted_transformed_padded_array_capped_size, validate_padded_items,\n};\npub use assert_split_sorted_transformed_value_arrays::{\n    assert_split_sorted_transformed_value_arrays_asc,\n    get_split_order_hints::{get_split_order_hints_asc, SplitOrderHints},\n};\npub use assert_split_transformed_padded_arrays::assert_split_transformed_padded_arrays;\npub use get_sorted_result::{get_sorted_result, SortedResult};\npub use sort_by_counter::sort_by_counter_asc;\n\nuse crate::traits::{Empty, is_empty};\n\npub fn subarray<let SRC_LEN: u32, let DST_LEN: u32>(\n    src: [Field; SRC_LEN],\n    offset: u32,\n) -> [Field; DST_LEN] {\n    assert(offset + DST_LEN <= SRC_LEN, \"offset too large\");\n\n    let mut dst: [Field; DST_LEN] = std::mem::zeroed();\n    for i in 0..DST_LEN {\n        dst[i] = src[i + offset];\n    }\n\n    dst\n}\n\n// Helper function to convert a validated array to BoundedVec.\n// Important: Only use it for validated arrays: validate_array(array) should be true.\npub unconstrained fn array_to_bounded_vec<T, let N: u32>(array: [T; N]) -> BoundedVec<T, N>\nwhere\n    T: Empty + Eq,\n{\n    let len = array_length(array);\n    BoundedVec::from_parts_unchecked(array, len)\n}\n\n// Helper function to find the index of the first element in an array that satisfies a given predicate. If the element\n// is not found, the function returns N as the index.\npub unconstrained fn find_index_hint<T, let N: u32, Env>(\n    array: [T; N],\n    find: fn[Env](T) -> bool,\n) -> u32 {\n    let mut index = N;\n    for i in 0..N {\n        // We check `index == N` to ensure that we only update the index if we haven't found a match yet.\n        if (index == N) & find(array[i]) {\n            index = i;\n        }\n    }\n    index\n}\n\n// Routine which validates that all zero values of an array form a contiguous region at the end, i.e.,\n// of the form: [*,*,*...,0,0,0,0] where any * is non-zero. Note that a full array of non-zero values is\n// valid.\npub fn validate_array<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let mut seen_empty = false;\n    let mut length = 0;\n    for i in 0..N {\n        if is_empty(array[i]) {\n            seen_empty = true;\n        } else {\n            assert(seen_empty == false, \"invalid array\");\n            length += 1;\n        }\n    }\n    length\n}\n\n// Helper function to count the number of non-empty elements in a validated array.\n// Important: Only use it for validated arrays where validate_array(array) returns true,\n// which ensures that:\n// 1. All elements before the first empty element are non-empty\n// 2. All elements after and including the first empty element are empty\n// 3. The array forms a contiguous sequence of non-empty elements followed by empty elements\npub fn array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    // We get the length by checking the index of the first empty element.\n\n    // Safety: This is safe because we have validated the array (see function doc above) and the emptiness\n    // of the element and non-emptiness of the previous element is checked below.\n    let length = unsafe { find_index_hint(array, |elem: T| is_empty(elem)) };\n    if length != 0 {\n        assert(!is_empty(array[length - 1]));\n    }\n    if length != N {\n        assert(is_empty(array[length]));\n    }\n    length\n}\n\n// Returns the number of consecutive elements at the start of the array for which the predicate returns false.\n// This function ensures that any element after the first matching element (predicate returns true) also matches the predicate.\npub fn array_length_until<T, let N: u32, Env>(array: [T; N], predicate: fn[Env](T) -> bool) -> u32 {\n    let mut length = 0;\n    let mut stop = false;\n    for i in 0..N {\n        if predicate(array[i]) {\n            stop = true;\n        } else {\n            assert(\n                stop == false,\n                \"matching element found after already encountering a non-matching element\",\n            );\n            length += 1;\n        }\n    }\n    length\n}\n\npub fn array_concat<T, let N: u32, let M: u32>(array1: [T; N], array2: [T; M]) -> [T; N + M] {\n    let mut result = [array1[0]; N + M];\n    for i in 1..N {\n        result[i] = array1[i];\n    }\n    for i in 0..M {\n        result[i + N] = array2[i];\n    }\n    result\n}\n\n/// This function assumes that `array1` and `array2` contain no more than N non-empty elements between them,\n/// if this is not the case then elements from the end of `array2` will be dropped.\npub fn array_merge<T, let N: u32>(array1: [T; N], array2: [T; N]) -> [T; N]\nwhere\n    T: Empty + Eq,\n{\n    // Safety: we constrain this array below\n    let result = unsafe { array_merge_helper(array1, array2) };\n    // We assume arrays have been validated. The only use cases so far are with previously validated arrays.\n    let array1_len = array_length(array1);\n    let mut add_from_left = true;\n    for i in 0..N {\n        add_from_left &= i != array1_len;\n        if add_from_left {\n            assert_eq(result[i], array1[i]);\n        } else {\n            assert_eq(result[i], array2[i - array1_len]);\n        }\n    }\n    result\n}\n\nunconstrained fn array_merge_helper<T, let N: u32>(array1: [T; N], array2: [T; N]) -> [T; N]\nwhere\n    T: Empty + Eq,\n{\n    let mut result: [T; N] = [T::empty(); N];\n    let mut i = 0;\n    for elem in array1 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    for elem in array2 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    result\n}\n\n// Helper fn to create a subarray from a given array\npub fn array_splice<T, let N: u32, let M: u32>(array: [T; N], offset: u32) -> [T; M]\nwhere\n    T: Empty,\n{\n    assert(M + offset <= N, \"Subarray length larger than array length\");\n    let mut result: [T; M] = [T::empty(); M];\n    for i in 0..M {\n        result[i] = array[offset + i];\n    }\n    result\n}\n\npub fn check_permutation<T, let N: u32>(\n    original_array: [T; N],\n    permuted_array: [T; N],\n    original_indexes: [u32; N],\n)\nwhere\n    T: Eq + Empty,\n{\n    let mut seen_value = [false; N];\n    for i in 0..N {\n        let index = original_indexes[i];\n        let original_value = original_array[index];\n        assert(permuted_array[i].eq(original_value), \"Invalid index\");\n        assert(!seen_value[index], \"Duplicated index\");\n        seen_value[index] = true;\n    }\n}\n\n// Helper function to find the index of the last element in an array, allowing empty elements.\n// e.g. useful for removing trailing 0s from [1, 0, 2, 0, 0, 0] -> [1, 0, 2]\n// Nothing to do with validated arrays. Correctness constrained by padded_array_length.\npub unconstrained fn find_last_value_index<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let mut index = N;\n    for i in 0..N {\n        let j = N - i - 1;\n        // We check `index == N` to ensure that we only update the index if we haven't found a match yet.\n        if (index == N) & !is_empty(array[j]) {\n            index = j;\n        }\n    }\n    index\n}\n\n// Routine which returns the length of an array right padded by empty elements\n// of the form: [*,*,*...,0,0,0,0] where * is any value (zeroes allowed).\n// See smoke_validate_array_trailing for examples.\n// Nothing to do with validated arrays. Correctness constrained by padded_array_length.\npub unconstrained fn unsafe_padded_array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let index = find_last_value_index(array);\n    if index == N {\n        0\n    } else {\n        index + 1\n    }\n}\n\n// Routine which validates that zero values of an array form a contiguous region at the end, i.e.,\n// of the form: [*,*,*...,0,0,0,0] where * is any value (zeroes allowed).\npub fn padded_array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    // Safety: this value is constrained in the below loop.\n    let length = unsafe { unsafe_padded_array_length(array) };\n    // Check the elt just before length is non-zero:\n    if length != 0 {\n        assert(!is_empty(array[length - 1]), \"invalid right padded array\");\n    }\n    // Check all beyond length are zero:\n    let mut check_zero = false;\n    for i in 0..N {\n        check_zero |= i == length;\n        if check_zero {\n            assert(is_empty(array[i]), \"invalid right padded array\");\n        }\n    }\n    length\n}\n\n// Helper function to check if an array is padded with a given value from a given index.\n// Different to padded_array_length in that it allows the elements before the given index to be the same as the padded value.\npub fn array_padded_with<T, let N: u32>(array: [T; N], from_index: u32, padded_with: T) -> bool\nwhere\n    T: Eq,\n{\n    let mut is_valid = true;\n    let mut should_check = false;\n    for i in 0..N {\n        should_check |= i == from_index;\n        is_valid &= !should_check | (array[i] == padded_with);\n    }\n    is_valid\n}\n\n#[test]\nfn smoke_validate_array() {\n    let valid_array: [Field; 0] = [];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [0];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [3];\n    assert(validate_array(valid_array) == 1);\n\n    let valid_array = [1, 2, 3];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0, 0];\n    assert(validate_array(valid_array) == 3);\n}\n\n#[test]\nfn smoke_validate_array_trailing() {\n    let valid_array: [Field; 0] = [];\n    assert(padded_array_length(valid_array) == 0);\n\n    let valid_array = [0];\n    assert(padded_array_length(valid_array) == 0);\n\n    let valid_array = [3];\n    assert(padded_array_length(valid_array) == 1);\n\n    let valid_array = [1, 0, 3];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [1, 0, 3, 0];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0, 0];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [0, 0, 3, 0, 0];\n    assert(padded_array_length(valid_array) == 3);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case0() {\n    let invalid_array = [0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case1() {\n    let invalid_array = [1, 0, 0, 1, 0];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case2() {\n    let invalid_array = [0, 0, 0, 0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test]\nfn test_empty_array_length() {\n    assert_eq(array_length([0]), 0);\n    assert_eq(array_length([0, 0, 0]), 0);\n}\n\n#[test]\nfn test_array_length() {\n    assert_eq(array_length([123]), 1);\n    assert_eq(array_length([123, 0, 0]), 1);\n    assert_eq(array_length([123, 456]), 2);\n    assert_eq(array_length([123, 456, 0]), 2);\n}\n\n#[test]\nfn test_array_length_invalid_arrays() {\n    // Result can be misleading (but correct) for invalid arrays.\n    assert_eq(array_length([0, 0, 123]), 0);\n    assert_eq(array_length([0, 123, 0]), 0);\n    assert_eq(array_length([0, 123, 456]), 0);\n    assert_eq(array_length([123, 0, 456]), 1);\n}\n\n#[test]\nfn test_array_length_until() {\n    let array = [11, 22, 33, 44, 55];\n    assert_eq(array_length_until(array, |x| x == 55), 4);\n    assert_eq(array_length_until(array, |x| x == 56), 5);\n    assert_eq(array_length_until(array, |x| x > 40), 3);\n    assert_eq(array_length_until(array, |x| x > 10), 0);\n}\n\n#[test(should_fail_with = \"matching element found after already encountering a non-matching element\")]\nfn test_array_length_until_non_consecutive_fails() {\n    let array = [1, 1, 0, 1, 0];\n    let _ = array_length_until(array, |x| x == 0);\n}\n\n#[test(should_fail_with = \"matching element found after already encountering a non-matching element\")]\nfn test_array_length_until_first_non_matching_fails() {\n    let array = [1, 0, 0, 0, 0];\n    let _ = array_length_until(array, |x| x == 1);\n}\n\n#[test]\nunconstrained fn find_index_greater_than_min() {\n    let values = [10, 20, 30, 40];\n    let min = 22;\n    let index = find_index_hint(values, |v: Field| min.lt(v));\n    assert_eq(index, 2);\n}\n\n#[test]\nunconstrained fn find_index_not_found() {\n    let values = [10, 20, 30, 40];\n    let min = 100;\n    let index = find_index_hint(values, |v: Field| min.lt(v));\n    assert_eq(index, 4);\n}\n\n#[test]\nfn test_array_concat() {\n    let array0 = [1, 2, 3];\n    let array1 = [4, 5];\n    let concatenated = array_concat(array0, array1);\n    assert_eq(concatenated, [1, 2, 3, 4, 5]);\n}\n\n#[test]\nfn check_permutation_basic_test() {\n    let original_array = [1, 2, 3];\n    let permuted_array = [3, 1, 2];\n    let indexes = [2, 0, 1];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Duplicated index\")]\nfn check_permutation_duplicated_index() {\n    let original_array = [0, 1, 0];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 0];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Invalid index\")]\nfn check_permutation_invalid_index() {\n    let original_array = [0, 1, 2];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 2];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test]\nfn test_array_padded_with() {\n    let array = [11, 22, 33, 44, 44];\n    assert_eq(array_padded_with(array, 0, 44), false);\n    assert_eq(array_padded_with(array, 1, 44), false);\n    assert_eq(array_padded_with(array, 2, 44), false);\n    assert_eq(array_padded_with(array, 3, 44), true);\n    assert_eq(array_padded_with(array, 4, 44), true);\n    assert_eq(array_padded_with(array, 4, 33), false);\n    assert_eq(array_padded_with(array, 5, 44), true); // Index out of bounds.\n    assert_eq(array_padded_with(array, 0, 11), false);\n}\n"
    },
    "381": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v1.0.0-staging.6/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr",
      "source": "pub struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() != 0\n    }\n\n    pub fn read_array<let K: u32>(&mut self) -> [Field; K] {\n        let mut result = [0; K];\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array());\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(\n        &mut self,\n        deserialise: fn([Field; K]) -> T,\n        mut result: [T; C],\n    ) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n"
    },
    "391": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/noir-lang/sha256/v0.1.2/src/sha256.nr",
      "source": "use std::hash::sha256_compression;\nuse std::runtime::is_unconstrained;\n\nuse constants::{\n    BLOCK_BYTE_PTR, BLOCK_SIZE, HASH, INITIAL_STATE, INT_BLOCK, INT_BLOCK_SIZE, INT_SIZE,\n    INT_SIZE_PTR, MSG_BLOCK, MSG_SIZE_PTR, STATE, TWO_POW_16, TWO_POW_24, TWO_POW_32, TWO_POW_8,\n};\n\nmod constants;\nmod tests;\n\n// Implementation of SHA-256 mapping a byte array of variable length to\n// 32 bytes.\n\n// Deprecated in favour of `sha256_var`\n// docs:start:sha256\npub fn sha256<let N: u32>(input: [u8; N]) -> HASH\n// docs:end:sha256\n{\n    digest(input)\n}\n\n// SHA-256 hash function\n#[no_predicates]\npub fn digest<let N: u32>(msg: [u8; N]) -> HASH {\n    sha256_var(msg, N as u64)\n}\n\n// Variable size SHA-256 hash\npub fn sha256_var<let N: u32>(msg: [u8; N], message_size: u64) -> HASH {\n    let message_size = message_size as u32;\n    assert(message_size <= N);\n\n    if std::runtime::is_unconstrained() {\n        // Safety: SHA256 is running as an unconstrained function.\n        unsafe {\n            __sha256_var(msg, message_size)\n        }\n    } else {\n        let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n        // Intermediate hash, starting with the canonical initial value\n        let mut h: STATE = INITIAL_STATE;\n        // Pointer into msg_block on a 64 byte scale\n        let mut msg_byte_ptr = 0;\n        let num_blocks = N / BLOCK_SIZE;\n        for i in 0..num_blocks {\n            let msg_start = BLOCK_SIZE * i;\n            let (new_msg_block, new_msg_byte_ptr) =\n                unsafe { build_msg_block(msg, message_size, msg_start) };\n\n            if msg_start < message_size {\n                msg_block = new_msg_block;\n            }\n\n            // Verify the block we are compressing was appropriately constructed\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n\n            // If the block is filled, compress it.\n            // An un-filled block is handled after this loop.\n            if (msg_start < message_size) & (msg_byte_ptr == BLOCK_SIZE) {\n                h = sha256_compression(msg_block, h);\n            }\n        }\n\n        let modulo = N % BLOCK_SIZE;\n        // Handle setup of the final msg block.\n        // This case is only hit if the msg is less than the block size,\n        // or our message cannot be evenly split into blocks.\n        if modulo != 0 {\n            let msg_start = BLOCK_SIZE * num_blocks;\n            let (new_msg_block, new_msg_byte_ptr) =\n                unsafe { build_msg_block(msg, message_size, msg_start) };\n\n            if msg_start < message_size {\n                msg_block = new_msg_block;\n            }\n\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n                verify_msg_block_padding(msg_block, msg_byte_ptr);\n            }\n        }\n\n        // If we had modulo == 0 then it means the last block was full,\n        // and we can reset the pointer to zero to overwrite it.\n        if msg_byte_ptr == BLOCK_SIZE {\n            msg_byte_ptr = 0;\n        }\n\n        // Pad the rest such that we have a [u32; 2] block at the end representing the length\n        // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n        // Here we rely on the fact that everything beyond the available input is set to 0.\n        let index = msg_byte_ptr / INT_SIZE;\n        msg_block[index] = set_item_byte_then_zeros(msg_block[index], msg_byte_ptr, 1 << 7);\n\n        msg_byte_ptr = msg_byte_ptr + 1;\n        let last_block = msg_block;\n\n        // If we don't have room to write the size, compress the block and reset it.\n        if msg_byte_ptr > MSG_SIZE_PTR {\n            h = sha256_compression(msg_block, h);\n            // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n            msg_byte_ptr = 0;\n        }\n\n        msg_block = unsafe { attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size) };\n\n        verify_msg_len(msg_block, last_block, msg_byte_ptr, message_size);\n\n        hash_final_block(msg_block, h)\n    }\n}\n\n// Variable size SHA-256 hash\nunconstrained fn __sha256_var<let N: u32>(msg: [u8; N], message_size: u32) -> HASH {\n    let num_full_blocks = message_size / BLOCK_SIZE;\n    // Intermediate hash, starting with the canonical initial value\n    let mut h: STATE = INITIAL_STATE;\n    // Pointer into msg_block on a 64 byte scale\n    for i in 0..num_full_blocks {\n        let (msg_block, _) = build_msg_block(msg, message_size, BLOCK_SIZE * i);\n        h = sha256_compression(msg_block, h);\n    }\n\n    // Handle setup of the final msg block.\n    // This case is only hit if the msg is less than the block size,\n    // or our message cannot be evenly split into blocks.\n    let modulo = message_size % BLOCK_SIZE;\n    let (mut msg_block, mut msg_byte_ptr): (INT_BLOCK, u32) = if modulo != 0 {\n        let msg_start = BLOCK_SIZE * num_full_blocks;\n        let (new_msg_block, new_msg_byte_ptr) = build_msg_block(msg, message_size, msg_start);\n\n        (new_msg_block, new_msg_byte_ptr)\n    } else {\n        // If we had modulo == 0 then it means the last block was full,\n        // and we can reset the pointer to zero to overwrite it.\n        ([0; INT_BLOCK_SIZE], 0)\n    };\n\n    // Pad the rest such that we have a [u32; 2] block at the end representing the length\n    // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n    // Here we rely on the fact that everything beyond the available input is set to 0.\n    let index = msg_byte_ptr / INT_SIZE;\n    msg_block[index] = set_item_byte_then_zeros(msg_block[index], msg_byte_ptr, 1 << 7);\n\n    // If we don't have room to write the size, compress the block and reset it.\n    let (h, mut msg_byte_ptr): (STATE, u32) = if msg_byte_ptr >= MSG_SIZE_PTR {\n        // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n        (sha256_compression(msg_block, h), 0)\n    } else {\n        (h, msg_byte_ptr + 1)\n    };\n    msg_block = attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size);\n\n    hash_final_block(msg_block, h)\n}\n\n// Take `BLOCK_SIZE` number of bytes from `msg` starting at `msg_start`.\n// Returns the block and the length that has been copied rather than padded with zeros.\nunconstrained fn build_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_start: u32,\n) -> (MSG_BLOCK, BLOCK_BYTE_PTR) {\n    let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n\n    // We insert `BLOCK_SIZE` bytes (or up to the end of the message)\n    let block_input = if message_size < msg_start {\n        // This function is sometimes called with `msg_start` past the end of the message.\n        // In this case we return an empty block and zero pointer to signal that the result should be ignored.\n        0\n    } else if message_size < msg_start + BLOCK_SIZE {\n        message_size - msg_start\n    } else {\n        BLOCK_SIZE\n    };\n\n    // Figure out the number of items in the int array that we have to pack.\n    // e.g. if the input is [0,1,2,3,4,5] then we need to pack it as 2 items: [0123, 4500]\n    let mut int_input = block_input / INT_SIZE;\n    if block_input % INT_SIZE != 0 {\n        int_input = int_input + 1;\n    };\n\n    for i in 0..int_input {\n        let mut msg_item: u32 = 0;\n        // Always construct the integer as 4 bytes, even if it means going beyond the input.\n        for j in 0..INT_SIZE {\n            let k = i * INT_SIZE + j;\n            let msg_byte = if k < block_input {\n                msg[msg_start + k]\n            } else {\n                0\n            };\n            msg_item = lshift8(msg_item, 1) + msg_byte as u32;\n        }\n        msg_block[i] = msg_item;\n    }\n\n    // Returning the index as if it was a 64 byte array.\n    // We have to project it down to 16 items and bit shifting to get a byte back if we need it.\n    (msg_block, block_input)\n}\n\n// Verify the block we are compressing was appropriately constructed by `build_msg_block`\n// and matches the input data. Returns the index of the first unset item.\n// If `message_size` is less than `msg_start` then this is called with the old non-empty block;\n// in that case we can skip verification, ie. no need to check that everything is zero.\nfn verify_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_block: MSG_BLOCK,\n    msg_start: u32,\n) -> BLOCK_BYTE_PTR {\n    let mut msg_byte_ptr = 0;\n    let mut msg_end = msg_start + BLOCK_SIZE;\n    if msg_end > N {\n        msg_end = N;\n    }\n    // We might have to go beyond the input to pad the fields.\n    if msg_end % INT_SIZE != 0 {\n        msg_end = msg_end + INT_SIZE - msg_end % INT_SIZE;\n    }\n\n    // Reconstructed packed item.\n    let mut msg_item: u32 = 0;\n\n    // Inclusive at the end so that we can compare the last item.\n    let mut i: u32 = 0;\n    for k in msg_start..=msg_end {\n        if k % INT_SIZE == 0 {\n            // If we consumed some input we can compare against the block.\n            if (msg_start < message_size) & (k > msg_start) {\n                assert_eq(msg_block[i], msg_item as u32);\n                i = i + 1;\n                msg_item = 0;\n            }\n        }\n        // Shift the accumulator\n        msg_item = lshift8(msg_item, 1);\n        // If we have input to consume, add it at the rightmost position.\n        if k < message_size & k < msg_end {\n            msg_item = msg_item + msg[k] as u32;\n            msg_byte_ptr = msg_byte_ptr + 1;\n        }\n    }\n\n    msg_byte_ptr\n}\n\n// Verify the block we are compressing was appropriately padded with zeros by `build_msg_block`.\n// This is only relevant for the last, potentially partially filled block.\nfn verify_msg_block_padding(msg_block: MSG_BLOCK, msg_byte_ptr: BLOCK_BYTE_PTR) {\n    // Check all the way to the end of the block.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_BLOCK_SIZE);\n}\n\n// Verify that a region of ints in the message block are (partially) zeroed,\n// up to an (exclusive) maximum which can either be the end of the block\n// or just where the size is to be written.\nfn verify_msg_block_zeros(\n    msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    max_int_byte_ptr: u32,\n) {\n    // This variable is used to get around the compiler under-constrained check giving a warning.\n    // We want to check against a constant zero, but if it does not come from the circuit inputs\n    // or return values the compiler check will issue a warning.\n    let zero = msg_block[0] - msg_block[0];\n\n    // First integer which is supposed to be (partially) zero.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        let zeros = INT_SIZE - modulo;\n        let mask = if zeros == 3 {\n            TWO_POW_24\n        } else if zeros == 2 {\n            TWO_POW_16\n        } else {\n            TWO_POW_8\n        };\n        assert_eq(msg_block[int_byte_ptr] % mask, zero);\n        int_byte_ptr = int_byte_ptr + 1;\n    }\n\n    // Check the rest of the items.\n    for i in 0..max_int_byte_ptr {\n        if i >= int_byte_ptr {\n            assert_eq(msg_block[i], zero);\n        }\n    }\n}\n\n// Verify that up to the byte pointer the two blocks are equal.\n// At the byte pointer the new block can be partially zeroed.\nfn verify_msg_block_equals_last(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n) {\n    // msg_byte_ptr is the position at which they are no longer have to be the same.\n    // First integer which is supposed to be (partially) zero contains that pointer.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Reconstruct the partially zero item from the last block.\n        let last_field = last_block[int_byte_ptr];\n        let mut msg_item: u32 = 0;\n        // Reset to where they are still equal.\n        msg_byte_ptr = msg_byte_ptr - modulo;\n        for i in 0..INT_SIZE {\n            msg_item = lshift8(msg_item, 1);\n            if i < modulo {\n                msg_item = msg_item + get_item_byte(last_field, msg_byte_ptr) as u32;\n                msg_byte_ptr = msg_byte_ptr + 1;\n            }\n        }\n        assert_eq(msg_block[int_byte_ptr], msg_item);\n    }\n\n    for i in 0..INT_SIZE_PTR {\n        if i < int_byte_ptr {\n            assert_eq(msg_block[i], last_block[i]);\n        }\n    }\n}\n\n// Set the rightmost `zeros` number of bytes to 0.\n#[inline_always]\nfn set_item_zeros(item: u32, zeros: u8) -> u32 {\n    lshift8(rshift8(item, zeros), zeros)\n}\n\n// Replace one byte in the item with a value, and set everything after it to zero.\nfn set_item_byte_then_zeros(msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR, msg_byte: u8) -> u32 {\n    let zeros = INT_SIZE - msg_byte_ptr % INT_SIZE;\n    let zeroed_item = set_item_zeros(msg_item, zeros as u8);\n    let new_item = byte_into_item(msg_byte, msg_byte_ptr);\n    zeroed_item + new_item\n}\n\n// Get a byte of a message item according to its overall position in the `BLOCK_SIZE` space.\nfn get_item_byte(mut msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR) -> u8 {\n    // How many times do we have to shift to the right to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    msg_item = rshift8(msg_item, shifts as u8);\n    // At this point the byte we want is in the rightmost position.\n    msg_item as u8\n}\n\n// Project a byte into a position in a field based on the overall block pointer.\n// For example putting 1 into pointer 5 would be 100, because overall we would\n// have [____, 0100] with indexes [0123,4567].\n#[inline_always]\nfn byte_into_item(msg_byte: u8, msg_byte_ptr: BLOCK_BYTE_PTR) -> u32 {\n    let mut msg_item = msg_byte as u32;\n    // How many times do we have to shift to the left to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    lshift8(msg_item, shifts as u8)\n}\n\n// Construct a field out of 4 bytes.\n#[inline_always]\nfn make_item(b0: u8, b1: u8, b2: u8, b3: u8) -> u32 {\n    let mut item = b0 as u32;\n    item = lshift8(item, 1) + b1 as u32;\n    item = lshift8(item, 1) + b2 as u32;\n    item = lshift8(item, 1) + b3 as u32;\n    item\n}\n\n// Shift by 8 bits to the left between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise multiplies by 256.\n#[inline_always]\nfn lshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        // Brillig wouldn't shift 0<<4 without overflow.\n        if shifts >= 4 {\n            0\n        } else {\n            item << (8 * shifts)\n        }\n    } else {\n        // We can do a for loop up to INT_SIZE or an if-else.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item * TWO_POW_8\n        } else if shifts == 2 {\n            item * TWO_POW_16\n        } else if shifts == 3 {\n            item * TWO_POW_24\n        } else {\n            // Doesn't make sense, but it's most likely called on 0 anyway.\n            0\n        }\n    }\n}\n\n// Shift by 8 bits to the right between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise divides by 256.\nfn rshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        item >> (8 * shifts)\n    } else {\n        // Division wouldn't work on `Field`.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item / TWO_POW_8\n        } else if shifts == 2 {\n            item / TWO_POW_16\n        } else if shifts == 3 {\n            item / TWO_POW_24\n        } else {\n            0\n        }\n    }\n}\n\n// Zero out all bytes between the end of the message and where the length is appended,\n// then write the length into the last 8 bytes of the block.\nunconstrained fn attach_len_to_msg_block(\n    mut msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) -> MSG_BLOCK {\n    // We assume that `msg_byte_ptr` is less than 57 because if not then it is reset to zero before calling this function.\n    // In any case, fill blocks up with zeros until the last 64 bits (i.e. until msg_byte_ptr = 56).\n    // There can be one item which has to be partially zeroed.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Index of the block in which we find the item we need to partially zero.\n        let i = msg_byte_ptr / INT_SIZE;\n        let zeros = INT_SIZE - modulo;\n        msg_block[i] = set_item_zeros(msg_block[i], zeros as u8);\n        msg_byte_ptr = msg_byte_ptr + zeros;\n    }\n\n    // The rest can be zeroed without bit shifting anything.\n    for i in (msg_byte_ptr / INT_SIZE)..INT_SIZE_PTR {\n        msg_block[i] = 0;\n    }\n\n    // Set the last two 4 byte ints as the first/second half of the 8 bytes of the length.\n    let len = 8 * message_size;\n    let len_bytes: [u8; 8] = (len as Field).to_be_bytes();\n    for i in 0..=1 {\n        let shift = i * 4;\n        msg_block[INT_SIZE_PTR + i] = make_item(\n            len_bytes[shift],\n            len_bytes[shift + 1],\n            len_bytes[shift + 2],\n            len_bytes[shift + 3],\n        );\n    }\n    msg_block\n}\n\n// Verify that the message length was correctly written by `attach_len_to_msg_block`,\n// and that everything between the byte pointer and the size pointer was zeroed,\n// and that everything before the byte pointer was untouched.\nfn verify_msg_len(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) {\n    // Check zeros up to the size pointer.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_SIZE_PTR);\n\n    // Check that up to the pointer we match the last block.\n    verify_msg_block_equals_last(msg_block, last_block, msg_byte_ptr);\n\n    // We verify the message length was inserted correctly by reversing the byte decomposition.\n    let mut reconstructed_len: u64 = 0;\n    for i in INT_SIZE_PTR..INT_BLOCK_SIZE {\n        reconstructed_len = reconstructed_len * TWO_POW_32;\n        reconstructed_len = reconstructed_len + msg_block[i] as u64;\n    }\n    let len = 8 * message_size as u64;\n    assert_eq(reconstructed_len, len);\n}\n\n// Perform the final compression, then transform the `STATE` into `HASH`.\nfn hash_final_block(msg_block: MSG_BLOCK, mut state: STATE) -> HASH {\n    let mut out_h: HASH = [0; 32]; // Digest as sequence of bytes\n    // Hash final padded block\n    state = sha256_compression(msg_block, state);\n\n    // Return final hash as byte array\n    for j in 0..8 {\n        let h_bytes: [u8; 4] = (state[j] as Field).to_be_bytes();\n        for k in 0..4 {\n            out_h[4 * j + k] = h_bytes[k];\n        }\n    }\n\n    out_h\n}\n\nmod equivalence_test {\n\n    #[test]\n    fn test_implementations_agree(msg: [u8; 100], message_size: u64) {\n        let message_size = message_size % 100;\n        let unconstrained_sha = unsafe { super::__sha256_var(msg, message_size as u32) };\n        let sha = super::sha256_var(msg, message_size);\n        assert_eq(sha, unconstrained_sha);\n    }\n}\n"
    },
    "393": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/noir-lang/keccak256/v0.1.0/src/keccak256.nr",
      "source": "mod tests;\n\nuse std::runtime::is_unconstrained;\nuse std::hash::keccak::keccakf1600;\n\nglobal BLOCK_SIZE_IN_BYTES: u32 = 136; //(1600 - BITS * 2) / WORD_SIZE;\nglobal WORD_SIZE: u32 = 8; // Limbs are made up of u64s so 8 bytes each.\nglobal LIMBS_PER_BLOCK: u32 = BLOCK_SIZE_IN_BYTES / WORD_SIZE;\nglobal NUM_KECCAK_LANES: u32 = 25;\n\n#[no_predicates]\npub fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32] {\n    assert(N >= message_size);\n\n    // Copy input to block bytes. For that we'll need at least input bytes (N)\n    // but we want it to be padded to a multiple of BLOCK_SIZE_IN_BYTES.\n    let mut block_bytes = [0; ((N / BLOCK_SIZE_IN_BYTES) + 1) * BLOCK_SIZE_IN_BYTES];\n    if is_unconstrained() {\n        for i in 0..message_size {\n            block_bytes[i] = input[i];\n        }\n    } else {\n        for i in 0..N {\n            if i < message_size {\n                block_bytes[i] = input[i];\n            }\n        }\n    }\n\n    //1. format_input_lanes\n    let max_blocks = (N + BLOCK_SIZE_IN_BYTES) / BLOCK_SIZE_IN_BYTES;\n    //maximum number of bytes to hash\n    let real_max_blocks = (message_size + BLOCK_SIZE_IN_BYTES) / BLOCK_SIZE_IN_BYTES;\n    let real_blocks_bytes = real_max_blocks * BLOCK_SIZE_IN_BYTES;\n\n    block_bytes[message_size] = 1;\n    block_bytes[real_blocks_bytes - 1] = 0x80;\n\n    // populate a vector of 64-bit limbs from our byte array\n    let mut sliced_buffer =\n        [0; (((N / BLOCK_SIZE_IN_BYTES) + 1) * BLOCK_SIZE_IN_BYTES) / WORD_SIZE];\n    for i in 0..sliced_buffer.len() {\n        let limb_start = WORD_SIZE * i;\n\n        let mut sliced = 0;\n        let mut v = 1;\n        for k in 0..WORD_SIZE {\n            sliced += v * (block_bytes[limb_start + k] as Field);\n            v *= 256;\n        }\n\n        sliced_buffer[i] = sliced as u64;\n    }\n\n    //2. sponge_absorb\n    let mut state: [u64; NUM_KECCAK_LANES] = [0; NUM_KECCAK_LANES];\n    // When in an unconstrained runtime we can take advantage of runtime loop bounds,\n    // thus allowing us to simplify the loop body.\n    if is_unconstrained() {\n        for i in 0..real_max_blocks {\n            if (i == 0) {\n                for j in 0..LIMBS_PER_BLOCK {\n                    state[j] = sliced_buffer[j];\n                }\n            } else {\n                for j in 0..LIMBS_PER_BLOCK {\n                    state[j] = state[j] ^ sliced_buffer[i * LIMBS_PER_BLOCK + j];\n                }\n            }\n            state = keccakf1600(state);\n        }\n    } else {\n        // `real_max_blocks` is guaranteed to at least be `1`\n        // We peel out the first block as to avoid a conditional inside of the loop.\n        // Otherwise, a dynamic predicate can cause a blowup in a constrained runtime.\n        for j in 0..LIMBS_PER_BLOCK {\n            state[j] = sliced_buffer[j];\n        }\n        state = keccakf1600(state);\n        for i in 1..max_blocks {\n            if i < real_max_blocks {\n                for j in 0..LIMBS_PER_BLOCK {\n                    state[j] = state[j] ^ sliced_buffer[i * LIMBS_PER_BLOCK + j];\n                }\n                state = keccakf1600(state);\n            }\n        }\n    }\n\n    //3. sponge_squeeze\n    let mut result = [0; 32];\n    for i in 0..4 {\n        let lane = state[i] as Field;\n        let lane_le: [u8; 8] = lane.to_le_bytes();\n        for j in 0..8 {\n            result[8 * i + j] = lane_le[j];\n        }\n    }\n    result\n}\n"
    },
    "415": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v1.0.0-staging.6/noir-projects/aztec-nr/uint-note/src/uint_note.nr",
      "source": "use dep::aztec::{\n    context::{PrivateContext, PublicContext},\n    history::nullifier_inclusion::ProveNullifierInclusion,\n    keys::getters::{get_nsk_app, get_public_keys},\n    macros::notes::custom_note,\n    messages::logs::note,\n    note::note_interface::{NoteHash, NoteType},\n    oracle::random::random,\n    protocol_types::{\n        address::AztecAddress,\n        constants::{\n            GENERATOR_INDEX__NOTE_HASH, GENERATOR_INDEX__NOTE_NULLIFIER,\n            GENERATOR_INDEX__PARTIAL_NOTE_VALIDITY_COMMITMENT, PRIVATE_LOG_SIZE_IN_FIELDS,\n        },\n        hash::{compute_siloed_nullifier, poseidon2_hash_with_separator},\n        traits::{Deserialize, FromField, Hash, Packable, Serialize, ToField},\n        utils::arrays::array_concat,\n    },\n};\n\n// UintNote supports partial notes, i.e. the ability to create an incomplete note in private, hiding certain values (the\n// owner, storage slot and randomness), and then completing the note in public with the ones missing (the amount).\n// Partial notes are being actively developed and are not currently fully supported via macros, and so we rely on the\n// #[custom_note] macro to implement it manually, resulting in some boilerplate. This is expected to be unnecessary once\n// macro support is expanded.\n\n/// A private note representing a numeric value associated to an account (e.g. a token balance).\n#[custom_note]\n#[derive(Eq, Serialize)]\npub struct UintNote {\n    // The ordering of these fields is important given that it must:\n    //   a) match that of UintPartialNotePrivateContent, and\n    //   b) have the public field at the end\n    // Correct ordering is checked by the tests in this module.\n\n    /// The owner of the note, i.e. the account whose nullifier secret key is required to compute the nullifier.\n    owner: AztecAddress,\n    /// Random value, protects against note hash preimage attacks.\n    randomness: Field,\n    /// The number stored in the note.\n    value: u128,\n}\n\nimpl NoteHash for UintNote {\n    fn compute_note_hash(self, storage_slot: Field) -> Field {\n        // Partial notes can be implemented by having the note hash be either the result of multiscalar multiplication\n        // (MSM), or two rounds of poseidon. MSM results in more constraints and is only required when multiple variants\n        // of partial notes are supported. Because UintNote has just one variant (where the value is public), we use\n        // poseidon instead.\n\n        // We must compute the same note hash as would be produced by a partial note created and completed with the same\n        // values, so that notes all behave the same way regardless of how they were created. To achieve this, we\n        // perform both steps of the partial note computation.\n\n        // First we create the partial note from a commitment to the private content (including storage slot).\n        let private_content =\n            UintPartialNotePrivateContent { owner: self.owner, randomness: self.randomness };\n        let partial_note = PartialUintNote {\n            commitment: private_content.compute_partial_commitment(storage_slot),\n        };\n\n        // Then compute the completion note hash. In a real partial note this step would be performed in public.\n        partial_note.compute_complete_note_hash(self.value)\n    }\n\n    // The nullifiers are nothing special - this is just the canonical implementation that would be injected by the\n    // #[note] macro.\n\n    fn compute_nullifier(\n        self,\n        context: &mut PrivateContext,\n        note_hash_for_nullify: Field,\n    ) -> Field {\n        let owner_npk_m = get_public_keys(self.owner).npk_m;\n        let owner_npk_m_hash = owner_npk_m.hash();\n        let secret = context.request_nsk_app(owner_npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER,\n        )\n    }\n\n    unconstrained fn compute_nullifier_unconstrained(self, note_hash_for_nullify: Field) -> Field {\n        let owner_npk_m = get_public_keys(self.owner).npk_m;\n        let owner_npk_m_hash = owner_npk_m.hash();\n        let secret = get_nsk_app(owner_npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER,\n        )\n    }\n}\n\nimpl UintNote {\n    pub fn new(value: u128, owner: AztecAddress) -> Self {\n        // Safety: We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing,\n        // so a malicious sender could use non-random values to make the note less private. But they already know\n        // the full note pre-image anyway, and so the recipient already trusts them to not disclose this\n        // information. We can therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe { random() };\n        Self { value, owner, randomness }\n    }\n\n    pub fn get_value(self) -> u128 {\n        self.value\n    }\n\n    /// Creates a partial note that will hide the owner and storage slot but not the value, since the note will be later\n    /// completed in public. This is a powerful technique for scenarios in which the value cannot be known in private\n    /// (e.g. because it depends on some public state, such as a DEX).\n    ///\n    /// This function inserts a partial note validity commitment into the nullifier tree to be later on able to verify\n    /// that the partial note and completer are legitimate. See function docs of `compute_validity_commitment` for more\n    /// details.\n    ///\n    /// Each partial note should only be used once, since otherwise multiple notes would be linked together and known to\n    /// belong to the same owner.\n    ///\n    /// As part of the partial note creation process, a log will be sent to `recipient` from `sender` so that they can\n    /// discover the note. `recipient` will typically be the same as `owner`.\n    pub fn partial(\n        owner: AztecAddress,\n        storage_slot: Field,\n        context: &mut PrivateContext,\n        recipient: AztecAddress,\n        sender: AztecAddress,\n        completer: AztecAddress,\n    ) -> PartialUintNote {\n        // Safety: We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing,\n        // so a malicious sender could use non-random values to make the note less private. But they already know\n        // the full note pre-image anyway, and so the recipient already trusts them to not disclose this\n        // information. We can therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe { random() };\n\n        // We create a commitment to the private data, which we then use to construct the log we send to the recipient.\n        let commitment = UintPartialNotePrivateContent { owner, randomness }\n            .compute_partial_commitment(storage_slot);\n\n        // Our partial note log encoding scheme includes a field with the tag of the public completion log, and we use\n        // the commitment as the tag. This is good for multiple reasons:\n        //  - the commitment is uniquely tied to this partial note\n        //  - the commitment is already public information, so we're not revealing anything else\n        //  - we don't need to create any additional information, private or public, for the tag\n        //  - other contracts cannot impersonate us and emit logs with the same tag due to public log siloing\n        let private_log_content = PrivateUintPartialNotePrivateLogContent {\n            owner,\n            randomness,\n            public_log_tag: commitment,\n        };\n\n        let encrypted_log =\n            note::compute_partial_note_log(private_log_content, storage_slot, recipient, sender);\n        // Regardless of the original content size, the log is padded with random bytes up to\n        // `PRIVATE_LOG_SIZE_IN_FIELDS` to prevent leaking information about the actual size.\n        let length = encrypted_log.len();\n        context.emit_private_log(encrypted_log, length);\n\n        let partial_note = PartialUintNote { commitment };\n\n        // Now we compute the validity commitment and push it to the nullifier tree. It can be safely pushed to\n        // the nullifier tree since it uses its own separator, making collisions with actual note nullifiers\n        // practically impossible.\n        let validity_commitment = partial_note.compute_validity_commitment(completer);\n        context.push_nullifier(validity_commitment);\n\n        partial_note\n    }\n}\n\n/// The private content of a partial UintNote, i.e. the fields that will remain private. All other note fields will be\n/// made public.\n#[derive(Packable)]\nstruct UintPartialNotePrivateContent {\n    // The ordering of these fields is important given that it must match that of UintNote.\n    // Correct ordering is checked by the tests in this module.\n    owner: AztecAddress,\n    randomness: Field,\n}\n\nimpl UintPartialNotePrivateContent {\n    fn compute_partial_commitment(self, storage_slot: Field) -> Field {\n        // Here we commit to all private values, including the storage slot.\n        poseidon2_hash_with_separator(\n            array_concat(self.pack(), [storage_slot]),\n            GENERATOR_INDEX__NOTE_HASH,\n        )\n    }\n}\n\n#[derive(Packable)]\nstruct PrivateUintPartialNotePrivateLogContent {\n    // The ordering of these fields is important given that it must:\n    //   a) match that of UintNote, and\n    //   b) have the public log tag at the beginning\n    // Correct ordering is checked by the tests in this module.\n    public_log_tag: Field,\n    owner: AztecAddress,\n    randomness: Field,\n}\n\nimpl NoteType for PrivateUintPartialNotePrivateLogContent {\n    fn get_id() -> Field {\n        UintNote::get_id()\n    }\n}\n\n/// A partial instance of a UintNote. This value represents a private commitment to the owner, randomness and storage\n/// slot, but the value field has not yet been set. A partial note can be completed in public with the `complete`\n/// function (revealing the value to the public), resulting in a UintNote that can be used like any other one (except\n/// of course that its value is known).\n#[derive(Packable, Serialize, Deserialize, Eq)]\npub struct PartialUintNote {\n    commitment: Field,\n}\n\nglobal NOTE_COMPLETION_LOG_LENGTH: u32 = 2;\n\nimpl PartialUintNote {\n    /// Completes the partial note, creating a new note that can be used like any other UintNote.\n    pub fn complete(self, context: &mut PublicContext, completer: AztecAddress, value: u128) {\n        // A note with a value of zero is valid, but we cannot currently complete a partial note with such a value\n        // because this will result in the completion log having its last field set to 0. Public logs currently do not\n        // track their length, and so trailing zeros are simply trimmed. This results in the completion log missing its\n        // last field (the value), and note discovery failing.\n        // TODO(#11636): remove this\n        assert(value != 0, \"Cannot complete a PartialUintNote with a value of 0\");\n\n        // We verify that the partial note we're completing is valid (i.e. completer is correct, it uses the correct\n        // state variable's storage slot, and it is internally consistent).\n        let validity_commitment = self.compute_validity_commitment(completer);\n        assert(\n            context.nullifier_exists(validity_commitment, context.this_address()),\n            \"Invalid partial note or completer\",\n        );\n\n        // We need to do two things:\n        //  - emit a public log containing the public fields (the value). The contract will later find it by searching\n        //  for the expected tag (which is simply the partial note commitment).\n        //  - insert the completion note hash (i.e. the hash of the note) into the note hash tree. This is typically\n        //  only done in private to hide the preimage of the hash that is inserted, but completed partial notes are\n        //  inserted in public as the public values are provided and the note hash computed.\n        context.emit_public_log(self.compute_note_completion_log(value));\n        context.push_note_hash(self.compute_complete_note_hash(value));\n    }\n\n    /// Completes the partial note, creating a new note that can be used like any other UintNote. Same as `complete`\n    /// function but works from private context.\n    pub fn complete_from_private(\n        self,\n        context: &mut PrivateContext,\n        completer: AztecAddress,\n        value: u128,\n    ) {\n        // We verify that the partial note we're completing is valid (i.e. completer is correct, it uses the correct\n        // state variable's storage slot, and it is internally consistent).\n        let validity_commitment = self.compute_validity_commitment(completer);\n        // `prove_nullifier_inclusion` function expects the nullifier to be siloed (hashed with the address of\n        // the contract that emitted the nullifier) as it checks the value directly against the nullifier tree and all\n        // the nullifiers in the tree are siloed by the protocol.\n        let siloed_validity_commitment =\n            compute_siloed_nullifier(context.this_address(), validity_commitment);\n        context.get_block_header().prove_nullifier_inclusion(siloed_validity_commitment);\n\n        // We need to do two things:\n        //  - emit an unencrypted log containing the public fields (the value) via the private log channel. The\n        //  contract will later find it by searching for the expected tag (which is simply the partial note\n        //  commitment).\n        //  - insert the completion note hash (i.e. the hash of the note) into the note hash tree. This is typically\n        //  only done in private to hide the preimage of the hash that is inserted, but completed partial notes are\n        //  inserted in public as the public values are provided and the note hash computed.\n        context.emit_private_log(\n            self.compute_note_completion_log_padded_for_private_log(value),\n            NOTE_COMPLETION_LOG_LENGTH,\n        );\n        context.push_note_hash(self.compute_complete_note_hash(value));\n    }\n\n    /// Computes a validity commitment for this partial note. The commitment cryptographically binds the note's private\n    /// data with the designated completer address. When the note is later completed in public execution, we can load\n    /// this commitment from the nullifier tree and verify that both the partial note (e.g. that the storage slot\n    /// corresponds to the correct owner, and that we're using the correct state variable) and completer are\n    /// legitimate.\n    pub fn compute_validity_commitment(self, completer: AztecAddress) -> Field {\n        poseidon2_hash_with_separator(\n            [self.commitment, completer.to_field()],\n            GENERATOR_INDEX__PARTIAL_NOTE_VALIDITY_COMMITMENT,\n        )\n    }\n\n    fn compute_note_completion_log(self, value: u128) -> [Field; NOTE_COMPLETION_LOG_LENGTH] {\n        // The first field of this log must be the tag that the recipient of the partial note private field logs\n        // expects, which is equal to the partial note commitment.\n        [self.commitment, value.to_field()]\n    }\n\n    fn compute_note_completion_log_padded_for_private_log(\n        self,\n        value: u128,\n    ) -> [Field; PRIVATE_LOG_SIZE_IN_FIELDS] {\n        let note_completion_log = self.compute_note_completion_log(value);\n        let padding = [0; PRIVATE_LOG_SIZE_IN_FIELDS - NOTE_COMPLETION_LOG_LENGTH];\n        array_concat(note_completion_log, padding)\n    }\n\n    fn compute_complete_note_hash(self, value: u128) -> Field {\n        // Here we finalize the note hash by including the (public) value into the partial note commitment. Note that we\n        // use the same generator index as we used for the first round of poseidon - this is not an issue.\n        poseidon2_hash_with_separator(\n            [self.commitment, value.to_field()],\n            GENERATOR_INDEX__NOTE_HASH,\n        )\n    }\n}\n\nimpl ToField for PartialUintNote {\n    fn to_field(self) -> Field {\n        self.commitment\n    }\n}\n\nimpl FromField for PartialUintNote {\n    fn from_field(field: Field) -> Self {\n        Self { commitment: field }\n    }\n}\n\nmod test {\n    use super::{\n        PartialUintNote, PrivateUintPartialNotePrivateLogContent, UintNote,\n        UintPartialNotePrivateContent,\n    };\n    use dep::aztec::{\n        note::note_interface::NoteHash,\n        protocol_types::{\n            address::AztecAddress,\n            traits::{FromField, Packable},\n            utils::arrays::array_concat,\n        },\n        utils::array::subarray,\n    };\n\n    global value: u128 = 17;\n    global randomness: Field = 42;\n    global owner: AztecAddress = AztecAddress::from_field(50);\n    global storage_slot: Field = 13;\n\n    #[test]\n    fn note_hash_matches_completed_partial_note_hash() {\n        // Tests that a UintNote has the same note hash as a PartialUintNote created and then completed with the same\n        // private values. This requires for the same hash function to be used in both flows, with the fields in the\n        // same order.\n\n        let note = UintNote { value, randomness, owner };\n        let note_hash = note.compute_note_hash(storage_slot);\n\n        let partial_note_private_content = UintPartialNotePrivateContent { owner, randomness };\n\n        let partial_note = PartialUintNote {\n            commitment: partial_note_private_content.compute_partial_commitment(storage_slot),\n        };\n        let completed_partial_note_hash = partial_note.compute_complete_note_hash(value);\n\n        assert_eq(note_hash, completed_partial_note_hash);\n    }\n\n    #[test]\n    fn unpack_from_partial_note_encoding() {\n        // Tests that the packed representation of a regular UintNote can be reconstructed given the partial note\n        // private fields log and the public completion log, ensuring the recipient will be able to compute the\n        // completed note as if it were a regular UintNote.\n\n        let note = UintNote { value, randomness, owner };\n\n        let partial_note_private_content = UintPartialNotePrivateContent { owner, randomness };\n        let commitment = partial_note_private_content.compute_partial_commitment(storage_slot);\n\n        let private_log_content = PrivateUintPartialNotePrivateLogContent {\n            owner,\n            randomness,\n            public_log_tag: commitment,\n        };\n        let partial_note = PartialUintNote { commitment };\n\n        // The first field of the partial note private content is the public completion log tag, so it should match the\n        // first field of the public log.\n        assert_eq(\n            private_log_content.pack()[0],\n            partial_note.compute_note_completion_log(value)[0],\n        );\n\n        // Then we extract all fields except the first of both logs (i.e. the public log tag), and combine them to\n        // produce the note's packed representation. This requires that the members of the intermediate structs are in\n        // the same order as in UintNote.\n        let private_log_without_public_tag: [_; 2] = subarray(private_log_content.pack(), 1);\n        let public_log_without_tag: [_; 1] =\n            subarray(partial_note.compute_note_completion_log(value), 1);\n\n        assert_eq(\n            array_concat(private_log_without_public_tag, public_log_without_tag),\n            note.pack(),\n        );\n    }\n}\n"
    },
    "42": {
      "path": "std/option.nr",
      "source": "use crate::cmp::{Eq, Ord, Ordering};\nuse crate::default::Default;\nuse crate::hash::{Hash, Hasher};\n\npub struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    pub fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T>\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T>\nwhere\n    T: Ord,\n{\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n"
    },
    "43": {
      "path": "std/panic.nr",
      "source": "pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\n    assert(false, message);\n    crate::mem::zeroed()\n}\n"
    },
    "50": {
      "path": "/Users/stavrosvlachakis/AztecProjects/nethermindEth/wormhole/aztec/contracts/src/main.nr",
      "source": "use dep::aztec::macros::aztec;\nmod structs;\n\n/**\nTo deploy on testnet, use the following commands (following the tutorial):\n1. Set the environment variable for the node URL:\nexport NODE_URL=https://aztec-alpha-testnet-fullnode.zkv.xyz\nexport SPONSORED_FPC_ADDRESS=0x1260a43ecf03e985727affbbe3e483e60b836ea821b6305bea1c53398b986047\n2. Create a new wallets:\n2a. Create a new wallet for the owner:\naztec-wallet create-account \\\n    --register-only \\\n    --node-url $NODE_URL \\\n    --alias owner-wallet\n2b. Create a new wallet for the receiver:\naztec-wallet create-account \\\n    --register-only \\\n    --node-url $NODE_URL \\\n    --alias receiver-wallet\n3. Register owner account with FPC:\n3a. Register the owner wallet with the FPC:\naztec-wallet register-contract \\\n    --node-url $NODE_URL \\\n    --from owner-wallet \\\n    --alias sponsoredfpc \\\n    $SPONSORED_FPC_ADDRESS SponsoredFPC \\\n    --salt 0\n3b. Register the receiver wallet with the FPC:\naztec-wallet register-contract \\\n    --node-url $NODE_URL \\\n    --from receiver-wallet \\\n    --alias sponsoredfpc \\\n    $SPONSORED_FPC_ADDRESS SponsoredFPC \\\n    --salt 0\n4. Deploy accounts (may get error `Timeout awaiting isMined` but that is fine continue with the next step):\n4a. Deploy the owner wallet:\naztec-wallet deploy-account \\\n    --node-url $NODE_URL \\\n    --from owner-wallet \\\n    --payment method=fpc-sponsored,fpc=contracts:sponsoredfpc \\\n    --register-class\n4b. Deploy the receiver wallet:\naztec-wallet deploy-account \\\n    --node-url $NODE_URL \\\n    --from receiver-wallet \\\n    --payment method=fpc-sponsored,fpc=contracts:sponsoredfpc \\\n    --register-class\n5. Deploy the Token contract (wait for it to be mined on testnet check txhash at http://aztecscan.xyz/):\naztec-wallet deploy \\\n    --node-url $NODE_URL \\\n    --from accounts:owner-wallet \\\n    --payment method=fpc-sponsored,fpc=contracts:sponsoredfpc \\\n    --alias token \\\n    TokenContract \\\n    --args accounts:owner-wallet WormToken WORM 18 --no-wait\n6. Mint tokens to public & private now to call the upcoming functions:\naztec-wallet send mint_to_private \\\n    --node-url $NODE_URL \\\n    --from accounts:owner-wallet \\\n    --payment method=fpc-sponsored,fpc=contracts:sponsoredfpc \\\n    --contract-address 0x01fb3308b703d9f0caf5dcfe78317e72c96bfa2d819a2061bc820a5f5da9a174 \\\n    --args accounts:owner-wallet accounts:owner-wallet 10000\n6a. Mint public tokens:\naztec-wallet send mint_to_public \\\n    --node-url $NODE_URL \\\n    --from accounts:owner-wallet \\\n    --payment method=fpc-sponsored,fpc=contracts:sponsoredfpc \\\n    --contract-address 0x01fb3308b703d9f0caf5dcfe78317e72c96bfa2d819a2061bc820a5f5da9a174 \\\n    --args accounts:owner-wallet 10000\n7. Deploy the Wormhole contract (wait for it to be mined on testnet check txhash at http://aztecscan.xyz/):\naztec-wallet deploy \\\n    --node-url $NODE_URL \\\n    --from accounts:owner-wallet \\\n    --payment method=fpc-sponsored,fpc=contracts:sponsoredfpc \\\n    --alias wormhole \\\n    wormhole_contracts-Wormhole.json \\\n    --args 13 13 0x1f41267c06dae96c9c3906c5f77cbc28602cc70d6d7e9d2c3072cb0a5b13edd2 0x01fb3308b703d9f0caf5dcfe78317e72c96bfa2d819a2061bc820a5f5da9a174 --no-wait --init init*/\n\n#[aztec]\npub contract Wormhole {\n    use crate::structs::{Provider, Guardian, WormholeStorage, Signature};\n    use dep::keccak256::keccak256;\n\n    use dep::aztec::{\n        macros::{\n            functions::{initializer, public, private, internal, utility},\n            storage::storage,\n        },\n        prelude::{Map, PublicMutable, AztecAddress},\n        protocol_types::traits::ToField\n    };\n\n    use dep::token::Token; \n\n    #[utility]\n    unconstrained fn parse_vaa_unconstrained(bytes: [u8; 2000], actual_length: u32) -> (u32, u8, [[u8; 66]; 13], [u8; 1860], u32) {\n        let guardian_set_index: u32 = (bytes[1] as u32) << 24 | \n                                    (bytes[2] as u32) << 16 | \n                                    (bytes[3] as u32) << 8 | \n                                    (bytes[4] as u32);\n        \n        let signatures_len = bytes[5];\n        \n        // Parse signatures\n        let mut signatures = [[0; 66]; 13];\n        for i in 0..13 {\n            if i < signatures_len {\n                let sig_start: u32 = 6 + (i as u32 * 66);\n                for j in 0..66 {\n                    let byte_index: u32 = sig_start + j as u32;\n                    if byte_index < actual_length {\n                        signatures[i as u32][j] = bytes[byte_index];\n                    }\n                }\n            }\n        }\n\n        // Calculate where the body starts\n        let body_start: u32 = 6 + (signatures_len as u32 * 66);\n        \n        // Calculate actual body length\n        let body_length: u32 = actual_length - body_start;\n        \n        let mut body_bytes = [0; 1860];\n        for i in 0..1860 {\n            if i < body_length {\n                body_bytes[i] = bytes[body_start + i];\n            }\n        }\n\n        (guardian_set_index, signatures_len, signatures, body_bytes, body_length)\n    }\n\n    #[utility]\n    unconstrained fn compute_vaa_hash_unconstrained(body_bytes: [u8; 1860], body_length: u32) -> [u8; 32] {\n        // Extract only the actual body content\n        let mut actual_body = [0; 1860];\n        for i in 0..body_length {\n            actual_body[i] = body_bytes[i];\n        }\n        \n        // Double hash as per Wormhole spec\n        let hash: [u8; 32] = keccak256(actual_body, body_length);\n        let double_hash: [u8; 32] = keccak256(hash, 32);\n        \n        double_hash\n    }\n\n\n    #[storage]\n    struct Storage<Context> {\n        state: PublicMutable<WormholeStorage, Context>,\n        sequences: Map<AztecAddress, PublicMutable<u64, Context>, Context>,\n        wormhole_address: PublicMutable<AztecAddress, Context>,\n        token_address: PublicMutable<AztecAddress, Context>,\n        guardian_1: Map<u32, PublicMutable<Guardian, Context>, Context>,\n        guardian_2: Map<u32, PublicMutable<Guardian, Context>, Context>,\n        guardian_3: Map<u32, PublicMutable<Guardian, Context>, Context>,\n        guardian_4: Map<u32, PublicMutable<Guardian, Context>, Context>,\n        guardian_5: Map<u32, PublicMutable<Guardian, Context>, Context>,\n        guardian_6: Map<u32, PublicMutable<Guardian, Context>, Context>,\n        guardian_7: Map<u32, PublicMutable<Guardian, Context>, Context>,\n        guardian_8: Map<u32, PublicMutable<Guardian, Context>, Context>,\n        guardian_9: Map<u32, PublicMutable<Guardian, Context>, Context>,\n        guardian_10: Map<u32, PublicMutable<Guardian, Context>, Context>,\n        guardian_11: Map<u32, PublicMutable<Guardian, Context>, Context>,\n        guardian_12: Map<u32, PublicMutable<Guardian, Context>, Context>,\n        guardian_13: Map<u32, PublicMutable<Guardian, Context>, Context>,\n        guardian_14: Map<u32, PublicMutable<Guardian, Context>, Context>,\n        guardian_15: Map<u32, PublicMutable<Guardian, Context>, Context>,\n        guardian_16: Map<u32, PublicMutable<Guardian, Context>, Context>,\n        guardian_17: Map<u32, PublicMutable<Guardian, Context>, Context>,\n        guardian_18: Map<u32, PublicMutable<Guardian, Context>, Context>,\n        guardian_19: Map<u32, PublicMutable<Guardian, Context>, Context>,\n        current_guardian_set_index: Map<u32, PublicMutable<u64, Context>, Context>,\n    }\n\n    #[public]\n    #[initializer]\n    fn init(\n        chain_id: u16,\n        evm_chain_id: u16,\n        wormhole_address: AztecAddress, \n        token_address: AztecAddress, \n    ) {\n        let provider: Provider = Provider {\n            chain_id,\n            evm_chain_id,\n        };\n        storage.state.write(WormholeStorage::init(provider));\n        storage.wormhole_address.write(wormhole_address);\n        storage.token_address.write(token_address);\n        storage.current_guardian_set_index.at(0).write(18_446_744_073_709_551_615);\n    }\n\n    #[public]\n    fn publish_message_in_public(\n        nonce: u64,\n        payloads: [[u8; 31]; 8], \n        message_fee: u128,\n        consistency: u8,\n        from: AztecAddress,\n        token_nonce: Field,\n    ) -> u64 {\n        assert(storage.state.read().message_fee <= message_fee, \"insufficient fee\");\n\n        let receiver_address = storage.wormhole_address.read();\n        let token_address = storage.token_address.read();\n\n        let _ = Token::at(token_address).transfer_in_public(\n            from,\n            receiver_address, \n            message_fee,\n            token_nonce,  \n        ).call(&mut context);\n\n        let sequence = storage.sequences.at(context.msg_sender()).read();\n        storage.sequences.at(context.msg_sender()).write(sequence + 1);\n\n        let msg: [Field; 13] = [\n            context.msg_sender().to_field(), \n            sequence as Field,  \n            nonce as Field,\n            consistency as Field, \n            context.timestamp() as Field,\n            Field::from_le_bytes(payloads[0]),\n            Field::from_le_bytes(payloads[1]),\n            Field::from_le_bytes(payloads[2]),\n            Field::from_le_bytes(payloads[3]),\n            Field::from_le_bytes(payloads[4]),\n            Field::from_le_bytes(payloads[5]),\n            Field::from_le_bytes(payloads[6]),\n            Field::from_le_bytes(payloads[7]),\n        ];\n\n        context.emit_public_log(msg);\n        sequence\n    }\n\n    #[private]\n    fn publish_message_in_private(\n        nonce: u64,\n        payloads: [[u8; 31]; 8], \n        message_fee: u128,\n        consistency: u8,\n        from: AztecAddress, \n        token_nonce: Field,\n    ) {\n        assert(1 <= message_fee, \"insufficient fee\");\n\n        let receiver_address = AztecAddress {\n            inner: 0x1f41267c06dae96c9c3906c5f77cbc28602cc70d6d7e9d2c3072cb0a5b13edd2\n        };\n        let token_address = AztecAddress {\n            inner: 0x01fb3308b703d9f0caf5dcfe78317e72c96bfa2d819a2061bc820a5f5da9a174\n        };\n\n        let _ = Token::at(token_address).transfer_in_private(\n            from,\n            receiver_address, \n            message_fee,\n            token_nonce,  \n        ).call(&mut context);\n\n        Wormhole::at(context.this_address())._publish_message(\n            nonce, \n            payloads, \n            consistency\n        ).enqueue(&mut context);\n    }\n\n    #[public]\n    #[internal]\n    fn _publish_message(\n        nonce: u64,\n        payloads: [[u8; 31]; 8], \n        consistency: u8,\n    ) -> u64 {\n        let sequence = storage.sequences.at(context.msg_sender()).read();\n        storage.sequences.at(context.msg_sender()).write(sequence + 1);\n\n        let msg: [Field; 13] = [\n            context.msg_sender().to_field(), \n            sequence as Field,  \n            nonce as Field,\n            consistency as Field, \n            context.timestamp() as Field,\n            Field::from_le_bytes(payloads[0]),\n            Field::from_le_bytes(payloads[1]),\n            Field::from_le_bytes(payloads[2]),\n            Field::from_le_bytes(payloads[3]),\n            Field::from_le_bytes(payloads[4]),\n            Field::from_le_bytes(payloads[5]),\n            Field::from_le_bytes(payloads[6]),\n            Field::from_le_bytes(payloads[7]),\n        ];\n\n        context.emit_public_log(msg);\n        sequence\n    }\n\n    // Keep all your guardian setters exactly as they are\n    #[public]\n    fn set_guardian1(guardian: Guardian, index: u32) { \n        storage.guardian_1.at(index).write(guardian);\n    }\n\n    #[public]\n    fn set_guardian2(guardian: Guardian, index: u32) { \n        storage.guardian_2.at(index).write(guardian);\n    }\n\n    #[public]\n    fn set_guardian3(guardian: Guardian, index: u32) { \n        storage.guardian_3.at(index).write(guardian);\n    }\n\n    #[public]\n    fn set_guardian4(guardian: Guardian, index: u32) { \n        storage.guardian_4.at(index).write(guardian);\n    }\n\n    #[public]\n    fn set_guardian5(guardian: Guardian, index: u32) { \n        storage.guardian_5.at(index).write(guardian);\n    }\n\n    #[public]\n    fn set_guardian6(guardian: Guardian, index: u32) { \n        storage.guardian_6.at(index).write(guardian);\n    }\n\n    #[public]\n    fn set_guardian7(guardian: Guardian, index: u32) { \n        storage.guardian_7.at(index).write(guardian);\n    }\n\n    #[public]\n    fn set_guardian8(guardian: Guardian, index: u32) { \n        storage.guardian_8.at(index).write(guardian);\n    }\n\n    #[public]\n    fn set_guardian9(guardian: Guardian, index: u32) { \n        storage.guardian_9.at(index).write(guardian);\n    }\n\n    #[public]\n    fn set_guardian10(guardian: Guardian, index: u32) { \n        storage.guardian_10.at(index).write(guardian);\n    }\n\n    #[public]\n    fn set_guardian11(guardian: Guardian, index: u32) { \n        storage.guardian_11.at(index).write(guardian);\n    }\n\n    #[public]\n    fn set_guardian12(guardian: Guardian, index: u32) { \n        storage.guardian_12.at(index).write(guardian);\n    }\n\n    #[public]\n    fn set_guardian13(guardian: Guardian, index: u32) { \n        storage.guardian_13.at(index).write(guardian);\n    }\n\n    #[public]\n    fn set_guardian14(guardian: Guardian, index: u32) { \n        storage.guardian_14.at(index).write(guardian);\n    }\n\n    #[public]\n    fn set_guardian15(guardian: Guardian, index: u32) { \n        storage.guardian_15.at(index).write(guardian);\n    }\n\n    #[public]\n    fn set_guardian16(guardian: Guardian, index: u32) { \n        storage.guardian_16.at(index).write(guardian);\n    }\n\n    #[public]\n    fn set_guardian17(guardian: Guardian, index: u32) { \n        storage.guardian_17.at(index).write(guardian);\n    }\n\n    #[public]\n    fn set_guardian18(guardian: Guardian, index: u32) { \n        storage.guardian_18.at(index).write(guardian);\n    }\n\n    #[public]\n    fn set_guardian19(guardian: Guardian, index: u32) { \n        storage.guardian_19.at(index).write(guardian);\n    }\n\n    #[public]\n    fn expire_guardian_set(index: u32) {\n        storage.current_guardian_set_index.at(index).write(context.timestamp() + 86400);\n    }\n\n    #[public]\n    fn guardian_set_expired(index: u32) -> bool {\n        let timestamp = storage.current_guardian_set_index.at(index).read();\n        context.timestamp() > timestamp\n    }\n\n    #[public]\n    fn set_provider(provider: Provider) {\n        let updated_storage = WormholeStorage::set_provider(storage.state.read(), provider);\n        storage.state.write(updated_storage);\n    }\n\n    #[public]\n    fn get_provider() -> Provider {\n        WormholeStorage::get_provider(storage.state.read())\n    }\n\n    #[utility]\n    unconstrained fn verify_vaa_unconstrained(bytes: [u8; 2000], actual_length: u32) -> ([[u8; 32]; 13], [[u8; 32]; 13], [[u8; 64]; 13], [u8; 32], u8) {\n        let version = bytes[0];\n        assert(version == 1, \"VM version incompatible\");\n        \n        let (_, signatures_len, signatures, body_bytes, body_length) = parse_vaa_unconstrained(bytes, actual_length);\n\n        assert(signatures_len >= 1, \"Need at least 1 signature\");\n        assert(signatures_len <= 13, \"Too many signatures\");\n\n        // Compute the VAA hash\n        let hash = compute_vaa_hash_unconstrained(body_bytes, body_length);\n        \n        let guardian = crate::structs::Guardian::new(\n                [0x13, 0x94, 0x7b, 0xd4, 0x8b, 0x18, 0xe5, 0x3f, 0xda, 0xee, 0xe7, 0x7f, 0x34, 0x73, 0x39, 0x1a, 0xc7, 0x27, 0xc6, 0x38],\n                [0xfa, 0x9d, 0x6b, 0x47, 0x04, 0x3b, 0x15, 0xb4, 0xb3, 0x3c, 0xf0, 0x5b, 0xb1, 0xde, 0x0f, 0x13, 0xda, 0x70, 0x31, 0x36, 0xb2, 0xcd, 0x15, 0x73, 0x24, 0xeb, 0x61, 0x5e, 0xc9, 0xee, 0x95, 0x12],\n                [0x38, 0xc6, 0x7b, 0x54, 0xd0, 0x3e, 0x3c, 0x18, 0x2e, 0x0e, 0x77, 0xb8, 0x5f, 0x88, 0x3c, 0xcd, 0x74, 0xdd, 0xdf, 0xc5, 0x90, 0x10, 0xfb, 0xf4, 0x75, 0xa0, 0xbe, 0xe6, 0x59, 0x3c, 0xe2, 0xbd]\n            );\n\n        // Prepare arrays for constrained verification\n        let mut pub_keys_x = [[0; 32]; 13];\n        let mut pub_keys_y = [[0; 32]; 13];\n        let mut signature_bytes_array = [[0; 64]; 13];\n\n        for i in 0..13 {\n            if i < signatures_len {\n                let sig = Signature::from_bytes(signatures[i as u32]);\n                let guardian_idx = sig.guardian_index;\n\n                assert(guardian_idx < 19, \"guardian index out of bounds\");\n\n                // Get public key components as byte arrays\n                let pub_key_x = guardian.get_pub_key_x();\n                let pub_key_y = guardian.get_pub_key_y();\n\n                pub_keys_x[i as u32] = pub_key_x;\n                pub_keys_y[i as u32] = pub_key_y;\n\n                // Prepare signature bytes\n                let mut signature_bytes = [0; 64];\n                for j in 0..32 {\n                    signature_bytes[j] = sig.r[j];\n                    signature_bytes[32 + j] = sig.s[j];\n                }\n                signature_bytes_array[i as u32] = signature_bytes;\n            }\n        }\n\n        (pub_keys_x, pub_keys_y, signature_bytes_array, hash, signatures_len)\n    }\n\n    #[private]\n    fn verify_vaa(bytes: [u8; 2000], actual_length: u32) {\n\n        // Safety: verify_vaa_unconstrained performs parsing and validation that doesn't need constraints\n        let (pub_keys_x, pub_keys_y, signature_bytes_array, hash, signatures_len) = unsafe {\n            verify_vaa_unconstrained(bytes, actual_length)\n        };\n\n        let required_signatures = 1;\n        let mut verified_count = 0;\n\n        for i in 0..13 {\n            if i < signatures_len {\n                let is_valid = std::ecdsa_secp256k1::verify_signature(\n                    pub_keys_x[i as u32],\n                    pub_keys_y[i as u32],\n                    signature_bytes_array[i as u32],\n                    hash\n                );\n\n                if is_valid {\n                    verified_count += 1;\n                }\n            }\n        }\n\n        assert(verified_count >= required_signatures, \"Insufficient valid signatures\");\n    }\n\n}"
    },
    "51": {
      "path": "/Users/stavrosvlachakis/AztecProjects/nethermindEth/wormhole/aztec/contracts/src/structs.nr",
      "source": "use dep::aztec::{protocol_types::traits::{Deserialize, Packable, Serialize}, prelude::AztecAddress};\nuse std::meta::derive;\n\n#[derive(Deserialize, Packable, Serialize)]\npub struct Provider {\n    pub chain_id: u16,\n    pub evm_chain_id: u16,\n}\n\n// Keep your Guardian_PK EXACTLY as is - don't touch it\n#[derive(Deserialize, Packable, Serialize)]\npub struct Guardian_PK {\n    // Address (20 bytes)\n    pub value0: u8, pub value1: u8, pub value2: u8, pub value3: u8, pub value4: u8,\n    pub value5: u8, pub value6: u8, pub value7: u8, pub value8: u8, pub value9: u8,\n    pub value10: u8, pub value11: u8, pub value12: u8, pub value13: u8, pub value14: u8,\n    pub value15: u8, pub value16: u8, pub value17: u8, pub value18: u8, pub value19: u8,\n    \n    // Public Key X (32 bytes)\n    pub pub_key_x0: u8, pub pub_key_x1: u8, pub pub_key_x2: u8, pub pub_key_x3: u8,\n    pub pub_key_x4: u8, pub pub_key_x5: u8, pub pub_key_x6: u8, pub pub_key_x7: u8,\n    pub pub_key_x8: u8, pub pub_key_x9: u8, pub pub_key_x10: u8, pub pub_key_x11: u8,\n    pub pub_key_x12: u8, pub pub_key_x13: u8, pub pub_key_x14: u8, pub pub_key_x15: u8,\n    pub pub_key_x16: u8, pub pub_key_x17: u8, pub pub_key_x18: u8, pub pub_key_x19: u8,\n    pub pub_key_x20: u8, pub pub_key_x21: u8, pub pub_key_x22: u8, pub pub_key_x23: u8,\n    pub pub_key_x24: u8, pub pub_key_x25: u8, pub pub_key_x26: u8, pub pub_key_x27: u8,\n    pub pub_key_x28: u8, pub pub_key_x29: u8, pub pub_key_x30: u8, pub pub_key_x31: u8,\n    \n    // Public Key Y (32 bytes)\n    pub pub_key_y0: u8, pub pub_key_y1: u8, pub pub_key_y2: u8, pub pub_key_y3: u8,\n    pub pub_key_y4: u8, pub pub_key_y5: u8, pub pub_key_y6: u8, pub pub_key_y7: u8,\n    pub pub_key_y8: u8, pub pub_key_y9: u8, pub pub_key_y10: u8, pub pub_key_y11: u8,\n    pub pub_key_y12: u8, pub pub_key_y13: u8, pub pub_key_y14: u8, pub pub_key_y15: u8,\n    pub pub_key_y16: u8, pub pub_key_y17: u8, pub pub_key_y18: u8, pub pub_key_y19: u8,\n    pub pub_key_y20: u8, pub pub_key_y21: u8, pub pub_key_y22: u8, pub pub_key_y23: u8,\n    pub pub_key_y24: u8, pub pub_key_y25: u8, pub pub_key_y26: u8, pub pub_key_y27: u8,\n    pub pub_key_y28: u8, pub pub_key_y29: u8, pub pub_key_y30: u8, pub pub_key_y31: u8,\n}\n\nimpl Guardian_PK {\n    pub fn new(address: [u8; 20], pub_key_x: [u8; 32], pub_key_y: [u8; 32]) -> Self {\n        Guardian_PK { \n            // Address\n            value0: address[0], value1: address[1], value2: address[2], value3: address[3], value4: address[4],\n            value5: address[5], value6: address[6], value7: address[7], value8: address[8], value9: address[9],\n            value10: address[10], value11: address[11], value12: address[12], value13: address[13], value14: address[14],\n            value15: address[15], value16: address[16], value17: address[17], value18: address[18], value19: address[19],\n            \n            // Public Key X\n            pub_key_x0: pub_key_x[0], pub_key_x1: pub_key_x[1], pub_key_x2: pub_key_x[2], pub_key_x3: pub_key_x[3],\n            pub_key_x4: pub_key_x[4], pub_key_x5: pub_key_x[5], pub_key_x6: pub_key_x[6], pub_key_x7: pub_key_x[7],\n            pub_key_x8: pub_key_x[8], pub_key_x9: pub_key_x[9], pub_key_x10: pub_key_x[10], pub_key_x11: pub_key_x[11],\n            pub_key_x12: pub_key_x[12], pub_key_x13: pub_key_x[13], pub_key_x14: pub_key_x[14], pub_key_x15: pub_key_x[15],\n            pub_key_x16: pub_key_x[16], pub_key_x17: pub_key_x[17], pub_key_x18: pub_key_x[18], pub_key_x19: pub_key_x[19],\n            pub_key_x20: pub_key_x[20], pub_key_x21: pub_key_x[21], pub_key_x22: pub_key_x[22], pub_key_x23: pub_key_x[23],\n            pub_key_x24: pub_key_x[24], pub_key_x25: pub_key_x[25], pub_key_x26: pub_key_x[26], pub_key_x27: pub_key_x[27],\n            pub_key_x28: pub_key_x[28], pub_key_x29: pub_key_x[29], pub_key_x30: pub_key_x[30], pub_key_x31: pub_key_x[31],\n            \n            // Public Key Y\n            pub_key_y0: pub_key_y[0], pub_key_y1: pub_key_y[1], pub_key_y2: pub_key_y[2], pub_key_y3: pub_key_y[3],\n            pub_key_y4: pub_key_y[4], pub_key_y5: pub_key_y[5], pub_key_y6: pub_key_y[6], pub_key_y7: pub_key_y[7],\n            pub_key_y8: pub_key_y[8], pub_key_y9: pub_key_y[9], pub_key_y10: pub_key_y[10], pub_key_y11: pub_key_y[11],\n            pub_key_y12: pub_key_y[12], pub_key_y13: pub_key_y[13], pub_key_y14: pub_key_y[14], pub_key_y15: pub_key_y[15],\n            pub_key_y16: pub_key_y[16], pub_key_y17: pub_key_y[17], pub_key_y18: pub_key_y[18], pub_key_y19: pub_key_y[19],\n            pub_key_y20: pub_key_y[20], pub_key_y21: pub_key_y[21], pub_key_y22: pub_key_y[22], pub_key_y23: pub_key_y[23],\n            pub_key_y24: pub_key_y[24], pub_key_y25: pub_key_y[25], pub_key_y26: pub_key_y[26], pub_key_y27: pub_key_y[27],\n            pub_key_y28: pub_key_y[28], pub_key_y29: pub_key_y[29], pub_key_y30: pub_key_y[30], pub_key_y31: pub_key_y[31],\n        }\n    }\n\n    pub fn default() -> Self {\n        Guardian_PK::new([0; 20], [0; 32], [0; 32])\n    }\n\n    pub fn as_array(Guardian_PK: Guardian_PK) -> [u8; 20] {\n        [Guardian_PK.value0, Guardian_PK.value1, Guardian_PK.value2, Guardian_PK.value3, Guardian_PK.value4, \n         Guardian_PK.value5, Guardian_PK.value6, Guardian_PK.value7, Guardian_PK.value8, Guardian_PK.value9,\n         Guardian_PK.value10, Guardian_PK.value11, Guardian_PK.value12, Guardian_PK.value13, Guardian_PK.value14,\n         Guardian_PK.value15, Guardian_PK.value16, Guardian_PK.value17, Guardian_PK.value18, Guardian_PK.value19]\n    }\n\n    pub fn get_pub_key_x(self) -> [u8; 32] {\n        [self.pub_key_x0, self.pub_key_x1, self.pub_key_x2, self.pub_key_x3,\n         self.pub_key_x4, self.pub_key_x5, self.pub_key_x6, self.pub_key_x7,\n         self.pub_key_x8, self.pub_key_x9, self.pub_key_x10, self.pub_key_x11,\n         self.pub_key_x12, self.pub_key_x13, self.pub_key_x14, self.pub_key_x15,\n         self.pub_key_x16, self.pub_key_x17, self.pub_key_x18, self.pub_key_x19,\n         self.pub_key_x20, self.pub_key_x21, self.pub_key_x22, self.pub_key_x23,\n         self.pub_key_x24, self.pub_key_x25, self.pub_key_x26, self.pub_key_x27,\n         self.pub_key_x28, self.pub_key_x29, self.pub_key_x30, self.pub_key_x31]\n    }\n\n    pub fn get_pub_key_y(self) -> [u8; 32] {\n        [self.pub_key_y0, self.pub_key_y1, self.pub_key_y2, self.pub_key_y3,\n         self.pub_key_y4, self.pub_key_y5, self.pub_key_y6, self.pub_key_y7,\n         self.pub_key_y8, self.pub_key_y9, self.pub_key_y10, self.pub_key_y11,\n         self.pub_key_y12, self.pub_key_y13, self.pub_key_y14, self.pub_key_y15,\n         self.pub_key_y16, self.pub_key_y17, self.pub_key_y18, self.pub_key_y19,\n         self.pub_key_y20, self.pub_key_y21, self.pub_key_y22, self.pub_key_y23,\n         self.pub_key_y24, self.pub_key_y25, self.pub_key_y26, self.pub_key_y27,\n         self.pub_key_y28, self.pub_key_y29, self.pub_key_y30, self.pub_key_y31]\n    }\n\n    // Add ONE optimization - return Fields for ECDSA verification without breaking existing code\n    pub fn get_pub_key_x_field(self) -> Field {\n        let bytes = self.get_pub_key_x();\n        Field::from_le_bytes(bytes)\n    }\n\n    pub fn get_pub_key_y_field(self) -> Field {\n        let bytes = self.get_pub_key_y();\n        Field::from_le_bytes(bytes)\n    }\n}\n\n#[derive(Deserialize, Packable, Serialize)]\npub struct Guardian {\n    pub address: Guardian_PK,\n}\n\nimpl Guardian {\n    pub fn new(address: [u8; 20], pub_key_x: [u8; 32], pub_key_y: [u8; 32]) -> Self {\n        Guardian { address: Guardian_PK::new(address, pub_key_x, pub_key_y) }\n    }\n    \n    pub fn default() -> Self {\n        Guardian { address: Guardian_PK::default() }\n    }\n\n    pub fn get_address(g: Self) -> [u8; 20] {\n        Guardian_PK::as_array(g.address)\n    }\n\n    pub fn get_pub_key_x(self) -> [u8; 32] {\n        self.address.get_pub_key_x()\n    }\n\n    pub fn get_pub_key_y(self) -> [u8; 32] {\n        self.address.get_pub_key_y()\n    }\n\n    // Add the same optimization here\n    pub fn get_pub_key_x_field(self) -> Field {\n        self.address.get_pub_key_x_field()\n    }\n\n    pub fn get_pub_key_y_field(self) -> Field {\n        self.address.get_pub_key_y_field()\n    }\n}\n\n#[derive(Deserialize, Serialize)]\npub struct Signature {\n    pub r: [u8; 32],\n    pub s: [u8; 32],\n    pub v: u8,\n    pub guardian_index: u8\n}\n\nimpl Signature {\n    pub fn new(r: [u8; 32], s: [u8; 32], v: u8, guardian_index: u8) -> Self {\n        Signature { r, s, v, guardian_index }\n    }\n\n    pub fn default() -> Self {\n        Signature { r: [0; 32], s: [0; 32], v: 0, guardian_index: 0 }\n    }\n\n    pub fn from_bytes(bytes: [u8; 66]) -> Self {\n        // Wormhole VAA signature format:\n        // byte 0: guardian index\n        // bytes 1-32: r (32 bytes) - BIG ENDIAN\n        // bytes 33-64: s (32 bytes) - BIG ENDIAN  \n        // byte 65: recovery id (v)\n        \n        let guardian_index = bytes[0];\n        \n        // Extract r (bytes 1-32) - keep as big endian\n        let r = [bytes[1], bytes[2], bytes[3], bytes[4], bytes[5], bytes[6], bytes[7], bytes[8],\n                 bytes[9], bytes[10], bytes[11], bytes[12], bytes[13], bytes[14], bytes[15], bytes[16],\n                 bytes[17], bytes[18], bytes[19], bytes[20], bytes[21], bytes[22], bytes[23], bytes[24],\n                 bytes[25], bytes[26], bytes[27], bytes[28], bytes[29], bytes[30], bytes[31], bytes[32]];\n        \n        // Extract s (bytes 33-64) - keep as big endian\n        let s = [bytes[33], bytes[34], bytes[35], bytes[36], bytes[37], bytes[38], bytes[39], bytes[40],\n                 bytes[41], bytes[42], bytes[43], bytes[44], bytes[45], bytes[46], bytes[47], bytes[48],\n                 bytes[49], bytes[50], bytes[51], bytes[52], bytes[53], bytes[54], bytes[55], bytes[56],\n                 bytes[57], bytes[58], bytes[59], bytes[60], bytes[61], bytes[62], bytes[63], bytes[64]];\n        \n        let v = bytes[65];\n        \n        Signature { r, s, v, guardian_index }\n    }\n}\n\n#[derive(Deserialize, Serialize)]\npub struct Body {\n    pub timestamp: u32,\n    pub nonce: u32,\n    pub emitter_chain_id: u16,\n    pub emitter_address: AztecAddress,\n    pub sequence: u64,\n    pub consistency_level: u8,\n    pub payload: [u8; 1024],\n}\n\nimpl Body {\n    pub fn new(\n        timestamp: u32,\n        nonce: u32,\n        emitter_chain_id: u16,\n        emitter_address: AztecAddress,\n        sequence: u64,\n        consistency_level: u8,\n        payload: [u8; 1024],\n    ) -> Self {\n        Body {\n            timestamp,\n            nonce,\n            emitter_chain_id,\n            emitter_address,\n            sequence,\n            consistency_level,\n            payload\n        }\n    }\n    \n    pub fn default() -> Self {\n        Body {\n            timestamp: 0,\n            nonce: 0,\n            emitter_chain_id: 0,\n            emitter_address: AztecAddress::zero(),\n            sequence: 0,\n            consistency_level: 0,\n            payload: [0; 1024],\n        }\n    }\n\n    pub fn from_bytes(bytes: [u8; 1060]) -> Body {\n        let timestamp: u32 = u32_from_u8s_le([bytes[0], bytes[1], bytes[2], bytes[3]]);\n        let nonce: u32 = u32_from_u8s_le([bytes[4], bytes[5], bytes[6], bytes[7]]);\n        let emitter_chain_id: u16 = u16_from_u8s_le([bytes[8], bytes[9]]);\n\n        // Parse emitter bytes into aztec address\n        let emitter_address_bytes: [u8; 32] = [\n            bytes[10], bytes[11], bytes[12], bytes[13], bytes[14], bytes[15], bytes[16], bytes[17],\n            bytes[18], bytes[19], bytes[20], bytes[21], bytes[22], bytes[23], bytes[24], bytes[25],\n            bytes[26], bytes[27], bytes[28], bytes[29], bytes[30], bytes[31], bytes[32], bytes[33],\n            bytes[34], bytes[35], bytes[36], bytes[37], bytes[38], bytes[39], bytes[40], bytes[41],\n        ];\n\n        let emitter_address_field: Field = Field::from_le_bytes(emitter_address_bytes);\n        let emitter_address: AztecAddress = AztecAddress {\n            inner: emitter_address_field,\n        };\n        \n        let sequence: u64 = u64_from_u8s_le([bytes[42], bytes[43], bytes[44], bytes[45], bytes[46], bytes[47], bytes[48], bytes[49]]);\n        let consistency_level: u8 = bytes[50];\n        \n        // Extract payload (1024 bytes starting from index 51)\n        let mut payload = [0; 1024];\n        for i in 0..1024 {\n            payload[i] = bytes[51 + i];\n        }\n        \n        Body {\n            timestamp,\n            nonce,\n            emitter_chain_id,\n            emitter_address,\n            sequence,\n            consistency_level,\n            payload\n        }\n    }\n}\n\n#[derive(Deserialize, Serialize)]\npub struct VAA {\n    pub version: u8,\n    pub timestamp: u32,\n    pub nonce: u32,\n    pub emitter_chain_id: u16,\n    pub emitter_address: AztecAddress,\n    pub sequence: u64,\n    pub consistency_level: u8,\n    pub payload: [u8; 1024],\n    pub guardian_set_index: u32,\n    pub signatures: [Signature; 13],\n    pub hash: [u8; 32], \n}\n\nimpl VAA {\n    pub fn default() -> Self {\n        VAA {\n            version: 0,\n            timestamp: 0,\n            nonce: 0,\n            emitter_chain_id: 0,\n            emitter_address: AztecAddress::zero(),\n            sequence: 0,\n            consistency_level: 0,\n            payload: [0; 1024],\n            guardian_set_index: 0,\n            signatures: [Signature::new([0;32], [0;32], 0, 0); 13],\n            hash: [0; 32]\n        }\n    }\n\n    pub fn new(\n        version: u8,\n        timestamp: u32,\n        nonce: u32,\n        emitter_chain_id: u16,\n        emitter_address: AztecAddress,\n        sequence: u64,\n        consistency_level: u8,\n        payload: [u8; 1024],\n        guardian_set_index: u32,\n        signatures: [Signature; 13],\n        hash: [u8; 32]\n    ) -> Self {\n        VAA {\n            version,\n            timestamp,\n            nonce,\n            emitter_chain_id,\n            emitter_address,\n            sequence,\n            consistency_level,\n            payload,\n            guardian_set_index,\n            signatures,\n            hash\n        }\n    }\n\n    pub fn get_guardian_set_index(vaa: Self) -> u32{\n        vaa.guardian_set_index\n    }\n\n    pub fn get_timestamp(vaa: Self) -> u32 {\n        vaa.timestamp\n    }\n\n    pub fn get_payload(vaa: Self) -> [u8; 1024] {\n        vaa.payload\n    }\n\n    pub fn get_hash(vaa: Self) -> [u8; 32] {\n        vaa.hash\n    }\n\n    pub fn get_emitter_chain_id(vaa: Self) -> u16 {\n        vaa.emitter_chain_id\n    }\n\n    pub fn get_sequence(vaa: Self) -> u64 {\n        vaa.sequence\n    }\n\n    pub fn get_consistency_level(vaa: Self) -> u8 {\n        vaa.consistency_level\n    }\n}\n\n// Helper functions\npub fn u32_from_u8s_le(bytes: [u8; 4]) -> u32 {\n    let mut result = 0;\n    for i in 0..4 {\n        result |= (bytes[i as u32] as u32) << (i * 8);\n    }\n    result\n}\n\npub fn u16_from_u8s_le(bytes: [u8; 2]) -> u16 {\n    let mut result = 0;\n    for i in 0..2 {\n        result |= (bytes[i as u32] as u16) << (i * 8);\n    }\n    result\n}\n\npub fn u64_from_u8s_le(bytes: [u8; 8]) -> u64 {\n    let mut result = 0;\n    for i in 0..8 {\n        result |= (bytes[i as u32] as u64) << (i * 8);\n    }\n    result\n}\n\n// Governance structures\npub struct ContractUpgrade {\n    pub module: [u8; 32],\n    pub action: u8,\n    pub chain: u16,\n    pub new_contract: Field\n}\n\npub struct GuardianSetUpgrade {\n    pub module: [u8; 32],\n    pub action: u8,\n    pub chain: u16,\n    pub new_guardian_set_index: u32\n}\n\npub struct SetMessageFee {\n    pub module: [u8; 32],\n    pub action: u8,\n    pub chain: u16,\n    pub message_fee: Field\n}\n\npub struct TransferFees {\n    pub module: [u8; 32],\n    pub action: u8,\n    pub chain: u16,\n    pub amount: Field,\n    pub recipient: [u8; 32]\n}\n\npub struct RecoverChainId {\n    pub module: [u8; 32],\n    pub action: u8,\n    pub evm_chain_id: Field,\n    pub new_chain_id: u16\n}\n\n#[derive(Deserialize, Packable, Serialize)]\npub struct EmitterRegistry {\n    pub next_id: u64,\n}\n\npub struct EmitterCapability {\n    pub emitter: u64,\n    pub sequence: u64,\n}\n\nimpl EmitterRegistry {\n    pub fn new() -> Self {\n        EmitterRegistry { next_id: 0 }\n    }\n\n    pub fn get_next_id(&mut self) -> u64 {\n        let id = self.next_id;\n        self.next_id += 1;\n        id\n    }\n}\n\nimpl EmitterCapability {\n    pub fn new(registry: &mut EmitterRegistry) -> Self {\n        let emitter = registry.get_next_id();\n        registry.next_id += 1;\n        EmitterCapability { emitter, sequence: 0 }\n    }\n\n    pub fn use_sequence(&mut self) -> u64 {\n        let sequence = self.sequence;\n        self.sequence += 1;\n        sequence\n    }\n}\n\n#[derive(Deserialize, Packable, Serialize)]\npub struct WormholeStorage {\n    pub provider: Provider,\n    pub guardian_set_index: u64,\n    pub guardian_set_expiry: u64,\n    pub message_fee: u128,\n    pub emitter_registry: EmitterRegistry,\n}\n\nimpl WormholeStorage {\n    pub fn init(provider: Provider) -> Self {\n        WormholeStorage {\n            provider: provider,\n            guardian_set_index: 0,\n            guardian_set_expiry: 86400,\n            message_fee: 1,\n            emitter_registry: EmitterRegistry::new(),\n        }\n    }\n\n    // Getters\n    pub fn get_provider(state: Self) -> Provider {\n        state.provider\n    }\n\n    pub fn get_message_fee(state: Self) -> u128 {\n        state.message_fee\n    }\n\n    pub fn get_chain_id(state: Self) -> u16 {\n        state.provider.chain_id\n    }\n\n    pub fn get_guardian_set_index(state: Self) -> u64 {\n        state.guardian_set_index\n    }\n\n    pub fn get_guardian_set_expiry(state: Self) -> u64 {\n        state.guardian_set_expiry\n    }\n\n    // Setters\n    pub fn set_guardian_set_expiry(mut state: Self, guardian_set_expiry: u64) -> Self {\n        state.guardian_set_expiry = guardian_set_expiry;\n        state\n    }\n\n    pub fn set_guardian_set_index(mut state: Self, guardian_set_index: u64) -> Self {\n        state.guardian_set_index = guardian_set_index;\n        state\n    }\n\n    pub fn set_chain_id(mut state: Self, chain_id: u16) -> Self {\n        state.provider.chain_id = chain_id;\n        state\n    }\n\n    pub fn set_provider(mut state: Self, provider: Provider) -> Self {\n        state.provider = provider;\n        state\n    }\n\n    pub fn set_message_fee(mut state: Self, message_fee: u128) -> Self {\n        state.message_fee = message_fee;\n        state\n    }\n}"
    },
    "6": {
      "path": "std/collections/bounded_vec.nr",
      "source": "use crate::{cmp::Eq, convert::From, runtime::is_unconstrained, static_assert};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n///\n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n///\n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n///\n/// Example:\n///\n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\npub struct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiler can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a\n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    ///\n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    ///\n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    ///\n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure.\n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    ///\n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    ///\n    /// Panics if the new length of the vector will be greater than the max length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    ///\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    ///\n    /// v.push(100);\n    /// assert(v.len() == 1);\n    ///\n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    ///\n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    ///\n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    ///\n    /// Note that uninitialized elements may be zeroed out!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    ///\n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    ///\n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    ///\n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        if is_unconstrained() {\n            for i in 0..append_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        } else {\n            let mut exceeded_len = false;\n            for i in 0..Len {\n                exceeded_len |= i == append_len;\n                if !exceeded_len {\n                    self.storage[self.len + i] = vec.get_unchecked(i);\n                }\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input.\n    /// The maximum length of the vector is determined based on the type signature.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        static_assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    ///\n    /// Panics if the vector is empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// let two = v.pop();\n    /// let one = v.pop();\n    ///\n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    ///\n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        if is_unconstrained() {\n            for i in 0..self.len {\n                ret |= predicate(self.storage[i]);\n            }\n        } else {\n            let mut ret = false;\n            let mut exceeded_len = false;\n            for i in 0..MaxLen {\n                exceeded_len |= i == self.len;\n                if !exceeded_len {\n                    ret |= predicate(self.storage[i]);\n                }\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element\n    /// in this vector, along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.mapi(|i, value| i + value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 5, 8, 11]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(i, self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(i, self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Calls a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let mut result = BoundedVec::<u32, 4>::new();\n    /// vec.for_each(|value| result.push(value * 2));\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    f(self.get_unchecked(i));\n                }\n            }\n        }\n    }\n\n    /// Calls a closure on each element in this vector, along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let mut result = BoundedVec::<u32, 4>::new();\n    /// vec.for_eachi(|i, value| result.push(i + value * 2));\n    ///\n    /// let expected = BoundedVec::from_array([2, 5, 8, 11]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                f(i, self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    f(i, self.get_unchecked(i));\n                }\n            }\n        }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function will zero out any elements at or past index `len` of `array`.\n    /// This incurs an extra runtime cost of O(MaxLen). If you are sure your array is\n    /// zeroed after that index, you can use `from_parts_unchecked` to remove the extra loop.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    /// ```\n    pub fn from_parts(mut array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        let zeroed = crate::mem::zeroed();\n\n        if is_unconstrained() {\n            for i in len..MaxLen {\n                array[i] = zeroed;\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i >= len {\n                    array[i] = zeroed;\n                }\n            }\n        }\n\n        BoundedVec { storage: array, len }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function is unsafe because it expects all elements past the `len` index\n    /// of `array` to be zeroed, but does not check for this internally. Use `from_parts`\n    /// for a safe version of this function which does zero out any indices past the\n    /// given length. Invalidating this assumption can notably cause `BoundedVec::eq`\n    /// to give incorrect results since it will check even elements past `len`.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    ///\n    /// // invalid use!\n    /// let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n    /// let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n    ///\n    /// // both vecs have length 3 so we'd expect them to be equal, but this\n    /// // fails because elements past the length are still checked in eq\n    /// assert_eq(vec1, vec2); // fails\n    /// ```\n    pub fn from_parts_unchecked(array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        BoundedVec { storage: array, len }\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n        if self.len == other.len {\n            self.storage == other.storage\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod mapi {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-mapi-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.mapi(|i, value| i + value * 2);\n            // docs:end:bounded-vec-mapi-example\n            let expected = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.mapi(|i, value| (i + value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.mapi(|_, value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod for_each {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        // map in terms of for_each\n        fn for_each_map<T, U, Env, let MaxLen: u32>(\n            input: BoundedVec<T, MaxLen>,\n            f: fn[Env](T) -> U,\n        ) -> BoundedVec<U, MaxLen> {\n            let mut output = BoundedVec::<U, MaxLen>::new();\n            let output_ref = &mut output;\n            input.for_each(|x| output_ref.push(f(x)));\n            output\n        }\n\n        #[test]\n        fn smoke_test() {\n            let mut acc = 0;\n            let acc_ref = &mut acc;\n            // docs:start:bounded-vec-for-each-example\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n            vec.for_each(|value| { *acc_ref += value; });\n            // docs:end:bounded-vec-for-each-example\n            assert_eq(acc, 6);\n        }\n\n        #[test]\n        fn applies_function_correctly() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_each_map(vec, |value| value * 2);\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_each_map(vec, |value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = for_each_map(vec, |value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod for_eachi {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        // mapi in terms of for_eachi\n        fn for_eachi_mapi<T, U, Env, let MaxLen: u32>(\n            input: BoundedVec<T, MaxLen>,\n            f: fn[Env](u32, T) -> U,\n        ) -> BoundedVec<U, MaxLen> {\n            let mut output = BoundedVec::<U, MaxLen>::new();\n            let output_ref = &mut output;\n            input.for_eachi(|i, x| output_ref.push(f(i, x)));\n            output\n        }\n\n        #[test]\n        fn smoke_test() {\n            let mut acc = 0;\n            let acc_ref = &mut acc;\n            // docs:start:bounded-vec-for-eachi-example\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n            vec.for_eachi(|i, value| { *acc_ref += i * value; });\n            // docs:end:bounded-vec-for-eachi-example\n\n            // 0 * 1 + 1 * 2 + 2 * 3\n            assert_eq(acc, 8);\n        }\n\n        #[test]\n        fn applies_function_correctly() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_eachi_mapi(vec, |i, value| i + value * 2);\n            let expected = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_eachi_mapi(vec, |i, value| (i + value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = for_eachi_mapi(vec, |_, value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n            assert_eq(bounded_vec.get(2), 3);\n        }\n\n        #[test(should_fail_with = \"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n        use crate::convert::From;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n\n    mod from_parts {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn from_parts() {\n            // docs:start:from-parts\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // Any elements past the given length are zeroed out, so these\n            // two BoundedVecs will be completely equal\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 2], 3);\n            assert_eq(vec1, vec2);\n            // docs:end:from-parts\n        }\n\n        #[test]\n        fn from_parts_unchecked() {\n            // docs:start:from-parts-unchecked\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // invalid use!\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n\n            // both vecs have length 3 so we'd expect them to be equal, but this\n            // fails because elements past the length are still checked in eq\n            assert(vec1 != vec2);\n            // docs:end:from-parts-unchecked\n        }\n    }\n}\n"
    },
    "61": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v1.0.0-staging.6/noir-projects/aztec-nr/aztec/src/capsules/mod.nr",
      "source": "use crate::oracle::capsules;\nuse protocol_types::{address::AztecAddress, traits::{Deserialize, Serialize}};\n\n/// A dynamically sized array backed by PXE's non-volatile database (called capsules). Values are persisted until\n/// deleted, so they can be e.g. stored during simulation of a transaction and later retrieved during witness\n/// generation. All values are scoped per contract address, so external contracts cannot access them.\npub struct CapsuleArray<T> {\n    contract_address: AztecAddress,\n    /// The base slot is where the array length is stored in capsules. Array elements are stored in consecutive slots\n    /// after the base slot. For example, with base slot 5: the length is at slot 5, the first element (index 0) is at\n    /// slot 6, the second element (index 1) is at slot 7, and so on.\n    base_slot: Field,\n}\n\nimpl<T> CapsuleArray<T> {\n    /// Returns a CapsuleArray connected to a contract's capsules at a base slot. Array elements are stored in\n    /// contiguous slots following the base slot, so there should be sufficient space between array base slots to\n    /// accommodate elements. A reasonable strategy is to make the base slot a hash of a unique value.\n    pub unconstrained fn at(contract_address: AztecAddress, base_slot: Field) -> Self {\n        Self { contract_address, base_slot }\n    }\n\n    /// Returns the number of elements stored in the array.\n    pub unconstrained fn len(self) -> u32 {\n        // An uninitialized array defaults to a length of 0.\n        capsules::load(self.contract_address, self.base_slot).unwrap_or(0) as u32\n    }\n\n    /// Stores a value at the end of the array.\n    pub unconstrained fn push<let N: u32>(self, value: T)\n    where\n        T: Serialize<N>,\n    {\n        let current_length = self.len();\n\n        // The slot corresponding to the index `current_length` is the first slot immediately after the end of the\n        // array, which is where we want to place the new value.\n        capsules::store(self.contract_address, self.slot_at(current_length), value);\n\n        // Then we simply update the length.\n        let new_length = current_length + 1;\n        capsules::store(self.contract_address, self.base_slot, new_length);\n    }\n\n    /// Retrieves the value stored in the array at `index`. Throws if the index is out of bounds.\n    pub unconstrained fn get<let N: u32>(self, index: u32) -> T\n    where\n        T: Deserialize<N>,\n    {\n        assert(index < self.len(), \"Attempted to read past the length of a CapsuleArray\");\n\n        capsules::load(self.contract_address, self.slot_at(index)).unwrap()\n    }\n\n    /// Deletes the value stored in the array at `index`. Throws if the index is out of bounds.\n    pub unconstrained fn remove(self, index: u32) {\n        let current_length = self.len();\n        assert(index < current_length, \"Attempted to delete past the length of a CapsuleArray\");\n\n        // In order to be able to remove elements at arbitrary indices, we need to shift the entire contents of the\n        // array past the removed element one slot backward so that we don't end up with a gap and preserve the\n        // contiguous slots. We can skip this when deleting the last element however.\n        if index != current_length - 1 {\n            // The source and destination regions overlap, but `copy` supports this.\n            capsules::copy(\n                self.contract_address,\n                self.slot_at(index + 1),\n                self.slot_at(index),\n                current_length - index - 1,\n            );\n        }\n\n        // We can now delete the last element (which has either been copied to the slot immediately before it, or was\n        // the element we meant to delete in the first place) and update the length.\n        capsules::delete(self.contract_address, self.slot_at(current_length - 1));\n        capsules::store(self.contract_address, self.base_slot, current_length - 1);\n    }\n\n    /// Iterates over the entire array, calling the callback with all values and their array index. The order in which\n    /// values are processed is arbitrary.\n    ///\n    /// It is safe to delete the current element (and only the current element) from inside the callback via `remove`:\n    /// ```noir\n    /// array.for_each(|index, value| {\n    ///   if some_condition(value) {\n    ///     array.remove(index); // safe only for this index\n    ///   }\n    /// }\n    /// ```\n    ///\n    /// If all elements in the array need to iterated over and then removed, then using `for_each` results in optimal\n    /// efficiency.\n    ///\n    /// It is **not** safe to push new elements into the array from inside the callback.\n    pub unconstrained fn for_each<Env, let N: u32>(self, f: unconstrained fn[Env](u32, T) -> ())\n    where\n        T: Deserialize<N>,\n    {\n        // Iterating over all elements is simple, but we want to do it in such a way that a) deleting the current\n        // element is safe to do, and b) deleting *all* elements is optimally efficient. This is because CapsuleArrays\n        // are typically used to hold pending tasks, so iterating them while clearing completed tasks (sometimes\n        // unconditionally, resulting in a full clear) is a very common access pattern.\n        //\n        // The way we achieve this is by iterating backwards: each element can always be deleted since it won't change\n        // any preceding (lower) indices, and if every element is deleted then every element will (in turn) be the last\n        // element. This results in an optimal full clear since `remove` will be able to skip the `capsules::copy` call\n        // to shift any elements past the deleted one (because there will be none).\n        let mut i = self.len();\n        while i > 0 {\n            i -= 1;\n            f(i, self.get(i));\n        }\n    }\n\n    unconstrained fn slot_at(self, index: u32) -> Field {\n        // Elements are stored immediately after the base slot, so we add 1 to it to compute the slot for the first\n        // element.\n        self.base_slot + 1 + index as Field\n    }\n}\n\nmod test {\n    use crate::test::helpers::test_environment::TestEnvironment;\n    use super::CapsuleArray;\n    use protocol_types::address::AztecAddress;\n\n    global SLOT: Field = 1230;\n\n    unconstrained fn setup() -> AztecAddress {\n        TestEnvironment::new().utility().this_address()\n    }\n\n    #[test]\n    unconstrained fn empty_array() {\n        let contract_address = setup();\n\n        let array: CapsuleArray<Field> = CapsuleArray::at(contract_address, SLOT);\n        assert_eq(array.len(), 0);\n    }\n\n    #[test(should_fail_with = \"Attempted to read past the length of a CapsuleArray\")]\n    unconstrained fn empty_array_read() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        let _: Field = array.get(0);\n    }\n\n    #[test]\n    unconstrained fn array_push() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        array.push(5);\n\n        assert_eq(array.len(), 1);\n        assert_eq(array.get(0), 5);\n    }\n\n    #[test(should_fail_with = \"Attempted to read past the length of a CapsuleArray\")]\n    unconstrained fn read_past_len() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        array.push(5);\n\n        let _ = array.get(1);\n    }\n\n    #[test]\n    unconstrained fn array_remove_last() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(5);\n        array.remove(0);\n\n        assert_eq(array.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn array_remove_some() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(7);\n        array.push(8);\n        array.push(9);\n\n        assert_eq(array.len(), 3);\n        assert_eq(array.get(0), 7);\n        assert_eq(array.get(1), 8);\n        assert_eq(array.get(2), 9);\n\n        array.remove(1);\n\n        assert_eq(array.len(), 2);\n        assert_eq(array.get(0), 7);\n        assert_eq(array.get(1), 9);\n    }\n\n    #[test]\n    unconstrained fn array_remove_all() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(7);\n        array.push(8);\n        array.push(9);\n\n        array.remove(1);\n        array.remove(1);\n        array.remove(0);\n\n        assert_eq(array.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn for_each_called_with_all_elements() {\n        let contract_address = setup();\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(4);\n        array.push(5);\n        array.push(6);\n\n        // We store all values that we were called with and check that all (value, index) tuples are present. Note that\n        // we do not care about the order in which each tuple was passed to the closure.\n        let called_with = &mut BoundedVec::<(u32, Field), 3>::new();\n        array.for_each(|index, value| { called_with.push((index, value)); });\n\n        assert_eq(called_with.len(), 3);\n        assert(called_with.any(|(index, value)| (index == 0) & (value == 4)));\n        assert(called_with.any(|(index, value)| (index == 1) & (value == 5)));\n        assert(called_with.any(|(index, value)| (index == 2) & (value == 6)));\n    }\n\n    #[test]\n    unconstrained fn for_each_remove_some() {\n        let contract_address = setup();\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(4);\n        array.push(5);\n        array.push(6);\n\n        array.for_each(|index, _| {\n            if index == 1 {\n                array.remove(index);\n            }\n        });\n\n        assert_eq(array.len(), 2);\n        assert_eq(array.get(0), 4);\n        assert_eq(array.get(1), 6);\n    }\n\n    #[test]\n    unconstrained fn for_each_remove_all() {\n        let contract_address = setup();\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(4);\n        array.push(5);\n        array.push(6);\n\n        array.for_each(|index, _| { array.remove(index); });\n\n        assert_eq(array.len(), 0);\n    }\n\n    // TODO: uncomment this test once OracleMock::count is implemented in the stdlib.\n    // #[test]\n    // unconstrained fn for_each_remove_all_no_copy() {\n    //     let contract_address = setup();\n    //     let array = CapsuleArray::at(contract_address, SLOT);\n\n    //     array.push(4);\n    //     array.push(5);\n    //     array.push(6);\n\n    //     // We test that the copyCapsule was never called, which is the expensive operation we want to avoid.\n    //     let mock = OracleMock::mock(\"copyCapsule\");\n\n    //     array.for_each(|index, _| {\n    //         array.remove(index);\n    //     });\n\n    //     assert_eq(mock.count(), 0);\n    // }\n}\n"
    },
    "62": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v1.0.0-staging.6/noir-projects/aztec-nr/aztec/src/context/call_interfaces.nr",
      "source": "use dep::protocol_types::{\n    abis::function_selector::FunctionSelector,\n    address::AztecAddress,\n    traits::{Deserialize, ToField},\n};\n\nuse crate::context::{\n    gas::GasOpts, private_context::PrivateContext, public_context::PublicContext,\n    returns_hash::ReturnsHash,\n};\nuse crate::hash::{hash_args, hash_calldata};\nuse crate::oracle::execution_cache;\nuse crate::test::helpers::cheatcodes;\n\npub trait CallInterface<let N: u32> {\n    fn get_args(self) -> [Field];\n    fn get_selector(self) -> FunctionSelector;\n    fn get_name(self) -> str<N>;\n    fn get_contract_address(self) -> AztecAddress;\n    fn get_is_static(self) -> bool;\n}\n\n// PrivateCallInterface\n\npub struct PrivateCallInterface<let M: u32, T, let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<M>,\n    args_hash: Field,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let M: u32, T, let N: u32> PrivateCallInterface<M, T, N>\nwhere\n    T: Deserialize<N>,\n{\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<M>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self {\n            target_contract,\n            selector,\n            name,\n            args_hash,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static,\n        }\n    }\n\n    pub fn call(self, context: &mut PrivateContext) -> T {\n        execution_cache::store(self.args, self.args_hash);\n        let returns_hash = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            false,\n        );\n        let returns: T = returns_hash.get_preimage();\n        returns\n    }\n\n    pub fn view(self, context: &mut PrivateContext) -> T {\n        execution_cache::store(self.args, self.args_hash);\n        let returns_hash = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            true,\n        );\n        returns_hash.get_preimage()\n    }\n}\n\nimpl<let M: u32, T, let N: u32> CallInterface<M> for PrivateCallInterface<M, T, N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<M> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PrivateVoidCallInterface\n\npub struct PrivateVoidCallInterface<let M: u32, T, let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<M>,\n    args_hash: Field,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n}\n\nimpl<let M: u32, T, let N: u32> PrivateVoidCallInterface<M, T, N>\nwhere\n    T: Deserialize<N>,\n{\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<M>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self {\n            target_contract,\n            selector,\n            name,\n            args_hash,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static,\n        }\n    }\n\n    pub fn call(self, context: &mut PrivateContext) {\n        execution_cache::store(self.args, self.args_hash);\n        context\n            .call_private_function_with_args_hash(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                false,\n            )\n            .assert_empty();\n    }\n\n    pub fn view(self, context: &mut PrivateContext) {\n        execution_cache::store(self.args, self.args_hash);\n        context\n            .call_private_function_with_args_hash(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                true,\n            )\n            .assert_empty();\n    }\n}\n\nimpl<let M: u32, T, let N: u32> CallInterface<M> for PrivateVoidCallInterface<M, T, N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<M> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PrivateStaticCallInterface\n\npub struct PrivateStaticCallInterface<let M: u32, T, let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<M>,\n    args_hash: Field,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let M: u32, T, let N: u32> PrivateStaticCallInterface<M, T, N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<M>,\n        args: [Field],\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self {\n            target_contract,\n            selector,\n            name,\n            args_hash,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static: true,\n        }\n    }\n\n    pub fn view(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<N>,\n    {\n        execution_cache::store(self.args, self.args_hash);\n        let returns = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            true,\n        );\n        returns.get_preimage()\n    }\n}\n\nimpl<let M: u32, T, let N: u32> CallInterface<M> for PrivateStaticCallInterface<M, T, N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<M> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PrivateStaticVoidCallInterface\n\npub struct PrivateStaticVoidCallInterface<let M: u32, T, let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<M>,\n    args_hash: Field,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n}\n\nimpl<let M: u32, T, let N: u32> PrivateStaticVoidCallInterface<M, T, N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<M>,\n        args: [Field],\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self {\n            target_contract,\n            selector,\n            name,\n            args_hash,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static: true,\n        }\n    }\n\n    pub fn view(self, context: &mut PrivateContext) {\n        execution_cache::store(self.args, self.args_hash);\n        context\n            .call_private_function_with_args_hash(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                true,\n            )\n            .assert_empty();\n    }\n}\n\nimpl<let M: u32, T, let N: u32> CallInterface<M> for PrivateStaticVoidCallInterface<M, T, N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<M> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicCallInterface\n\npub struct PublicCallInterface<let M: u32, T, let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<M>,\n    args: [Field],\n    gas_opts: GasOpts,\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let M: u32, T, let N: u32> PublicCallInterface<M, T, N>\nwhere\n    T: Deserialize<N>,\n{\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<M>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            gas_opts: GasOpts::default(),\n            return_type: std::mem::zeroed(),\n            is_static,\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn call(self, context: &mut PublicContext) -> T {\n        let returns = context.call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<N>())\n    }\n\n    pub unconstrained fn view(self, context: &mut PublicContext) -> T {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<N>())\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            false,\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let M: u32, T, let N: u32> CallInterface<M> for PublicCallInterface<M, T, N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<M> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicVoidCallInterface\n\npub struct PublicVoidCallInterface<let M: u32, T, let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<M>,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let M: u32, T, let N: u32> PublicVoidCallInterface<M, T, N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<M>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static,\n            gas_opts: GasOpts::default(),\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn call(self, context: &mut PublicContext) {\n        let returns = context.call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub unconstrained fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            false,\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            true,\n        )\n    }\n\n    pub fn set_as_teardown(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.set_public_teardown_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            false,\n        )\n    }\n}\n\nimpl<let M: u32, T, let N: u32> CallInterface<M> for PublicVoidCallInterface<M, T, N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<M> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicStaticCallInterface\n\npub struct PublicStaticCallInterface<let M: u32, T, let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<M>,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let M: u32, T, let N: u32> PublicStaticCallInterface<M, T, N>\nwhere\n    T: Deserialize<N>,\n{\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<M>,\n        args: [Field],\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static: true,\n            gas_opts: GasOpts::default(),\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn view(self, context: &mut PublicContext) -> T {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<N>())\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let M: u32, T, let N: u32> CallInterface<M> for PublicStaticCallInterface<M, T, N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<M> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicStaticVoidCallInterface\n\npub struct PublicStaticVoidCallInterface<let M: u32, T, let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<M>,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let M: u32, T, let N: u32> PublicStaticVoidCallInterface<M, T, N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<M>,\n        args: [Field],\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static: true,\n            gas_opts: GasOpts::default(),\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let M: u32, T, let N: u32> CallInterface<M> for PublicStaticVoidCallInterface<M, T, N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<M> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// UtilityCallInterface\n\npub struct UtilityCallInterface<let M: u32, T, let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<M>,\n    args_hash: Field,\n    args: [Field],\n    return_type: T,\n}\n\nimpl<let M: u32, T, let N: u32> CallInterface<M> for UtilityCallInterface<M, T, N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<M> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        false\n    }\n}\n\nimpl<let M: u32, T, let N: u32> UtilityCallInterface<M, T, N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<M>,\n        args: [Field],\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self { target_contract, selector, name, args_hash, args, return_type: std::mem::zeroed() }\n    }\n\n    pub fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    pub fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    pub fn get_name(self) -> str<M> {\n        self.name\n    }\n\n    pub fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n}\n\n// UtilityVoidCallInterface\n\npub struct UtilityVoidCallInterface<let M: u32, T, let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<M>,\n    args_hash: Field,\n    args: [Field],\n    return_type: T,\n}\n\nimpl<let M: u32, T, let N: u32> CallInterface<M> for UtilityVoidCallInterface<M, T, N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<M> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        false\n    }\n}\n\nimpl<let M: u32, T, let N: u32> UtilityVoidCallInterface<M, T, N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<M>,\n        args: [Field],\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self { target_contract, selector, name, args_hash, args, return_type: std::mem::zeroed() }\n    }\n\n    pub fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    pub fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    pub fn get_name(self) -> str<M> {\n        self.name\n    }\n\n    pub fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n}\n\npub trait TXEPublicCallInterface<T, let N: u32> {\n    unconstrained fn call_with_txe(self, from: AztecAddress) -> (T, Field);\n}\n\nimpl<let M: u32, T, let N: u32> TXEPublicCallInterface<T, N> for PublicCallInterface<M, T, N>\nwhere\n    T: Deserialize<N>,\n{\n    unconstrained fn call_with_txe(self, from: AztecAddress) -> (T, Field) {\n        let (returns_hash, tx_hash) = cheatcodes::public_call_new_flow(\n            from,\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.is_static,\n        );\n\n        let returns = ReturnsHash::new(returns_hash).get_preimage();\n\n        (returns, tx_hash)\n    }\n}\n\nimpl<let M: u32, T, let N: u32> TXEPublicCallInterface<T, N> for PublicVoidCallInterface<M, T, N>\nwhere\n    T: Deserialize<N>,\n{\n    unconstrained fn call_with_txe(self, from: AztecAddress) -> (T, Field) {\n        let (returns_hash, tx_hash) = cheatcodes::public_call_new_flow(\n            from,\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.is_static,\n        );\n\n        let returns = ReturnsHash::new(returns_hash).get_preimage_and_assert_empty();\n\n        (returns, tx_hash)\n    }\n}\n\nimpl<let M: u32, T, let N: u32> TXEPublicCallInterface<T, N> for PublicStaticCallInterface<M, T, N>\nwhere\n    T: Deserialize<N>,\n{\n    unconstrained fn call_with_txe(self, from: AztecAddress) -> (T, Field) {\n        let (returns_hash, tx_hash) = cheatcodes::public_call_new_flow(\n            from,\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.is_static,\n        );\n\n        let returns = ReturnsHash::new(returns_hash).get_preimage();\n\n        (returns, tx_hash)\n    }\n}\n\nimpl<let M: u32, T, let N: u32> TXEPublicCallInterface<T, N> for PublicStaticVoidCallInterface<M, T, N>\nwhere\n    T: Deserialize<N>,\n{\n    unconstrained fn call_with_txe(self, from: AztecAddress) -> (T, Field) {\n        let (returns_hash, tx_hash) = cheatcodes::public_call_new_flow(\n            from,\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.is_static,\n        );\n\n        let returns = ReturnsHash::new(returns_hash).get_preimage_and_assert_empty();\n\n        (returns, tx_hash)\n    }\n}\n\npub trait TXEPrivateCallInterface<T, let N: u32> {\n    unconstrained fn call_with_txe(self, from: AztecAddress) -> (T, Field);\n}\n\nimpl<let M: u32, T, let N: u32> TXEPrivateCallInterface<T, N> for PrivateCallInterface<M, T, N>\nwhere\n    T: Deserialize<N>,\n{\n    unconstrained fn call_with_txe(self, from: AztecAddress) -> (T, Field) {\n        let args = self.get_args();\n        let args_hash = hash_args(args);\n\n        let (_end_side_effect_counter, returns_hash, tx_hash) = cheatcodes::private_call_new_flow(\n            from,\n            self.get_contract_address(),\n            self.get_selector(),\n            args,\n            args_hash,\n            self.get_is_static(),\n        );\n\n        let returns: T = ReturnsHash::new(returns_hash).get_preimage();\n\n        (returns, tx_hash)\n    }\n}\n\nimpl<let M: u32, T, let N: u32> TXEPrivateCallInterface<T, N> for PrivateVoidCallInterface<M, T, N>\nwhere\n    T: Deserialize<N>,\n{\n    unconstrained fn call_with_txe(self, from: AztecAddress) -> (T, Field) {\n        let args = self.get_args();\n        let args_hash = hash_args(args);\n        execution_cache::store(args, args_hash);\n\n        let (_end_side_effect_counter, returns_hash, tx_hash) = cheatcodes::private_call_new_flow(\n            from,\n            self.get_contract_address(),\n            self.get_selector(),\n            args,\n            args_hash,\n            self.get_is_static(),\n        );\n\n        let returns = ReturnsHash::new(returns_hash).get_preimage_and_assert_empty();\n\n        (returns, tx_hash)\n    }\n}\n\nimpl<let M: u32, T, let N: u32> TXEPrivateCallInterface<T, N> for PrivateStaticCallInterface<M, T, N>\nwhere\n    T: Deserialize<N>,\n{\n    unconstrained fn call_with_txe(self, from: AztecAddress) -> (T, Field) {\n        let args = self.get_args();\n        let args_hash = hash_args(args);\n        execution_cache::store(args, args_hash);\n\n        let (_, returns_hash, tx_hash) = cheatcodes::private_call_new_flow(\n            from,\n            self.get_contract_address(),\n            self.get_selector(),\n            args,\n            args_hash,\n            self.get_is_static(),\n        );\n\n        let returns = ReturnsHash::new(returns_hash).get_preimage();\n\n        (returns, tx_hash)\n    }\n}\n\nimpl<let M: u32, T, let N: u32> TXEPrivateCallInterface<T, N> for PrivateStaticVoidCallInterface<M, T, N>\nwhere\n    T: Deserialize<N>,\n{\n    unconstrained fn call_with_txe(self, from: AztecAddress) -> (T, Field) {\n        let args = self.get_args();\n        let args_hash = hash_args(args);\n        execution_cache::store(args, args_hash);\n\n        let (_, returns_hash, tx_hash) = cheatcodes::private_call_new_flow(\n            from,\n            self.get_contract_address(),\n            self.get_selector(),\n            args,\n            args_hash,\n            self.get_is_static(),\n        );\n\n        let returns = ReturnsHash::new(returns_hash).get_preimage_and_assert_empty();\n\n        (returns, tx_hash)\n    }\n}\n\npub trait TXEUtilityCallInterface<T, let N: u32> {\n    unconstrained fn call_with_txe(self) -> T;\n}\n\nimpl<let M: u32, T, let N: u32> TXEUtilityCallInterface<T, N> for UtilityCallInterface<M, T, N>\nwhere\n    T: Deserialize<N>,\n{\n    unconstrained fn call_with_txe(self) -> T {\n        let args = self.get_args();\n        let args_hash = hash_args(args);\n        execution_cache::store(args, args_hash);\n\n        let returns_hash = crate::oracle::simulate_utility_function::simulate_utility_function(\n            self.get_contract_address(),\n            self.get_selector(),\n            args_hash,\n        );\n\n        let returns: T = ReturnsHash::new(returns_hash).get_preimage();\n        returns\n    }\n}\n\nimpl<let M: u32, T, let N: u32> TXEUtilityCallInterface<T, N> for UtilityVoidCallInterface<M, T, N>\nwhere\n    T: Deserialize<N>,\n{\n    unconstrained fn call_with_txe(self) -> T {\n        let args = self.get_args();\n        let args_hash = hash_args(args);\n        execution_cache::store(args, args_hash);\n\n        let returns_hash = crate::oracle::simulate_utility_function::simulate_utility_function(\n            self.get_contract_address(),\n            self.get_selector(),\n            args_hash,\n        );\n\n        let returns = ReturnsHash::new(returns_hash).get_preimage_and_assert_empty();\n        returns\n    }\n}\n"
    },
    "69": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v1.0.0-staging.6/noir-projects/aztec-nr/aztec/src/context/private_context.nr",
      "source": "use crate::{\n    context::{inputs::PrivateContextInputs, returns_hash::ReturnsHash},\n    hash::{ArgsHasher, hash_args_array, hash_calldata_array},\n    keys::constants::{NULLIFIER_INDEX, NUM_KEY_TYPES, OUTGOING_INDEX, sk_generators},\n    messaging::process_l1_to_l2_message,\n    oracle::{\n        block_header::get_block_header_at,\n        call_private_function::call_private_function_internal,\n        enqueue_public_function_call::{\n            notify_enqueued_public_function_call, notify_set_min_revertible_side_effect_counter,\n            notify_set_public_teardown_function_call,\n        },\n        execution_cache,\n        key_validation_request::get_key_validation_request,\n        notes::{notify_created_nullifier, notify_nullified_note},\n    },\n};\nuse dep::protocol_types::{\n    abis::{\n        call_context::CallContext,\n        function_selector::FunctionSelector,\n        gas_settings::GasSettings,\n        include_by_timestamp::IncludeByTimestamp,\n        log_hash::LogHash,\n        note_hash::NoteHash,\n        nullifier::Nullifier,\n        private_call_request::PrivateCallRequest,\n        private_circuit_public_inputs::PrivateCircuitPublicInputs,\n        private_log::{PrivateLog, PrivateLogData},\n        public_call_request::PublicCallRequest,\n        read_request::ReadRequest,\n        side_effect::Counted,\n        validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n    },\n    address::{AztecAddress, EthAddress},\n    block_header::BlockHeader,\n    constants::{\n        MAX_CONTRACT_CLASS_LOGS_PER_CALL, MAX_ENQUEUED_CALLS_PER_CALL,\n        MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL,\n        MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NOTE_HASHES_PER_CALL,\n        MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n        MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PRIVATE_LOGS_PER_CALL,\n        PRIVATE_LOG_SIZE_IN_FIELDS,\n    },\n    messaging::l2_to_l1_message::L2ToL1Message,\n    traits::{Empty, Hash, ToField},\n    utils::arrays::array_concat,\n};\n\n// When finished, one can call .finish() to convert back to the abi\npub struct PrivateContext {\n    // docs:start:private-context\n    pub inputs: PrivateContextInputs,\n    pub side_effect_counter: u32,\n\n    pub min_revertible_side_effect_counter: u32,\n    pub is_fee_payer: bool,\n\n    pub args_hash: Field,\n    pub return_hash: Field,\n\n    pub include_by_timestamp: IncludeByTimestamp,\n\n    pub note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    pub nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    pub note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\n    pub nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\n\n    pub private_call_requests: BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    pub public_call_requests: BoundedVec<Counted<PublicCallRequest>, MAX_ENQUEUED_CALLS_PER_CALL>,\n    pub public_teardown_call_request: PublicCallRequest,\n    pub l2_to_l1_msgs: BoundedVec<Counted<L2ToL1Message>, MAX_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    pub historical_header: BlockHeader,\n\n    pub private_logs: BoundedVec<PrivateLogData, MAX_PRIVATE_LOGS_PER_CALL>,\n    pub contract_class_logs_hashes: BoundedVec<Counted<LogHash>, MAX_CONTRACT_CLASS_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    pub last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            include_by_timestamp: IncludeByTimestamp::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            private_logs: BoundedVec::new(),\n            contract_class_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n\n    pub fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    pub fn gas_settings(self) -> GasSettings {\n        self.inputs.tx_context.gas_settings\n    }\n\n    pub fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    pub fn push_note_hash(&mut self, note_hash: Field) {\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n    }\n\n    pub fn push_nullifier(&mut self, nullifier: Field) {\n        notify_created_nullifier(nullifier);\n        self.nullifiers.push(\n            Nullifier { value: nullifier, note_hash: 0, counter: self.next_counter() },\n        );\n    }\n\n    pub fn push_nullifier_for_note_hash(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        let nullifier_counter = self.next_counter();\n        notify_nullified_note(nullifier, nullified_note_hash, nullifier_counter);\n        self.nullifiers.push(\n            Nullifier {\n                value: nullifier,\n                note_hash: nullified_note_hash,\n                counter: nullifier_counter,\n            },\n        );\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    pub fn get_block_header(self) -> BlockHeader {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_block_header_at(self, block_number: u32) -> BlockHeader {\n        get_block_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        self.return_hash = returns_hasher.hash();\n        execution_cache::store(returns_hasher.fields, self.return_hash);\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            include_by_timestamp: self.include_by_timestamp,\n            note_hash_read_requests: self.note_hash_read_requests.storage(),\n            nullifier_read_requests: self.nullifier_read_requests.storage(),\n            key_validation_requests_and_generators: self\n                .key_validation_requests_and_generators\n                .storage(),\n            note_hashes: self.note_hashes.storage(),\n            nullifiers: self.nullifiers.storage(),\n            private_call_requests: self.private_call_requests.storage(),\n            public_call_requests: self.public_call_requests.storage(),\n            public_teardown_call_request: self.public_teardown_call_request,\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage(),\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            private_logs: self.private_logs.storage(),\n            contract_class_logs_hashes: self.contract_class_logs_hashes.storage(),\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context,\n        }\n    }\n\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\n            \"Setting {0} as fee payer\",\n            [self.this_address().to_field()],\n        );\n        self.is_fee_payer = true;\n    }\n\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n        notify_set_min_revertible_side_effect_counter(self.min_revertible_side_effect_counter);\n    }\n\n    // docs:start:include-by-timestamp\n    pub fn set_include_by_timestamp(&mut self, include_by_timestamp: u64) {\n        // docs:end:include-by-timestamp\n        self.include_by_timestamp =\n            IncludeByTimestamp::min_with_u64(self.include_by_timestamp, include_by_timestamp);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request = self.last_key_validation_requests[key_index as u32].unwrap_or(\n            KeyValidationRequest::empty(),\n        );\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one\n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale\n            // Typically we'd validate keys by showing that they are the preimage of `pk_m_hash`, but that'd require\n            // the oracle returning the master secret keys, which could cause malicious contracts to leak it or learn\n            // about secrets from other contracts. We therefore silo secret keys, and rely on the private kernel to\n            // validate that we siloed secret key corresponds to correct siloing of the master secret key that hashes\n            // to `pk_m_hash`.\n\n            // Safety: Kernels verify that the key validation request is valid and below we verify that a request\n            // for the correct public key has been received.\n            let request = unsafe { get_key_validation_request(pk_m_hash, key_index) };\n            assert_eq(request.pk_m.hash(), pk_m_hash, \"Obtained invalid key validation request\");\n\n            self.key_validation_requests_and_generators.push(\n                KeyValidationRequestAndGenerator {\n                    request,\n                    sk_app_generator: sk_generators[key_index as u32],\n                },\n            );\n            self.last_key_validation_requests[key_index as u32] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content };\n        self.l2_to_l1_msgs.push(message.count(self.next_counter()));\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret,\n            leaf_index,\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn emit_private_log(&mut self, log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS], length: u32) {\n        let counter = self.next_counter();\n        let private_log =\n            PrivateLogData { log: PrivateLog::new(log, length), note_hash_counter: 0, counter };\n        self.private_logs.push(private_log);\n    }\n\n    pub fn emit_raw_note_log(\n        &mut self,\n        log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS],\n        length: u32,\n        note_hash_counter: u32,\n    ) {\n        let counter = self.next_counter();\n        let private_log =\n            PrivateLogData { log: PrivateLog::new(log, length), note_hash_counter, counter };\n        self.private_logs.push(private_log);\n    }\n\n    pub fn call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> ReturnsHash {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args, args_hash);\n        self.call_private_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn static_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> ReturnsHash {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args, args_hash);\n        self.call_private_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            true,\n        )\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> ReturnsHash {\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> ReturnsHash {\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, true)\n    }\n\n    pub fn call_private_function_with_args_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) -> ReturnsHash {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n\n        // Safety: The oracle simulates the private call and returns the value of the side effects counter after\n        // execution of the call (which means that end_side_effect_counter - start_side_effect_counter is\n        // the number of side effects that took place), along with the hash of the return values. We validate these\n        // by requesting a private kernel iteration in which the return values are constrained to hash\n        // to `returns_hash` and the side effects counter to increment from start to end.\n        let (end_side_effect_counter, returns_hash) = unsafe {\n            call_private_function_internal(\n                contract_address,\n                function_selector,\n                args_hash,\n                start_side_effect_counter,\n                is_static_call,\n            )\n        };\n\n        self.private_call_requests.push(\n            PrivateCallRequest {\n                call_context: CallContext {\n                    msg_sender: self.this_address(),\n                    contract_address,\n                    function_selector,\n                    is_static_call,\n                },\n                args_hash,\n                returns_hash,\n                start_side_effect_counter,\n                end_side_effect_counter,\n            },\n        );\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n        self.side_effect_counter = end_side_effect_counter + 1;\n        ReturnsHash::new(returns_hash)\n    }\n\n    pub fn call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn static_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, true)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        let calldata_hash = hash_calldata_array([function_selector.to_field()]);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        let calldata_hash = hash_calldata_array([function_selector.to_field()]);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, true)\n    }\n\n    pub fn call_public_function_with_calldata_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        calldata_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n\n        notify_enqueued_public_function_call(\n            contract_address,\n            calldata_hash,\n            counter,\n            is_static_call,\n        );\n\n        let call_request = PublicCallRequest {\n            msg_sender: self.this_address(),\n            contract_address,\n            is_static_call,\n            calldata_hash,\n        };\n\n        self.public_call_requests.push(Counted::new(call_request, counter));\n    }\n\n    pub fn set_public_teardown_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.set_public_teardown_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn set_public_teardown_function_with_calldata_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        calldata_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n\n        notify_set_public_teardown_function_call(\n            contract_address,\n            calldata_hash,\n            counter,\n            is_static_call,\n        );\n\n        self.public_teardown_call_request = PublicCallRequest {\n            msg_sender: self.this_address(),\n            contract_address,\n            is_static_call,\n            calldata_hash,\n        };\n    }\n\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            include_by_timestamp: IncludeByTimestamp::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: BlockHeader::empty(),\n            private_logs: BoundedVec::new(),\n            contract_class_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n}\n"
    },
    "70": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v1.0.0-staging.6/noir-projects/aztec-nr/aztec/src/context/public_context.nr",
      "source": "use crate::context::gas::GasOpts;\nuse crate::hash::{\n    compute_l1_to_l2_message_hash, compute_l1_to_l2_message_nullifier, compute_secret_hash,\n};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::constants::MAX_U32_VALUE;\nuse dep::protocol_types::traits::{Empty, FromField, Packable, Serialize, ToField};\n\npub struct PublicContext {\n    pub args_hash: Option<Field>,\n    pub compute_args_hash: fn() -> Field,\n}\n\nimpl PublicContext {\n    pub fn new(compute_args_hash: fn() -> Field) -> Self {\n        PublicContext { args_hash: Option::none(), compute_args_hash }\n    }\n\n    pub fn emit_public_log<T, let N: u32>(_self: &mut Self, log: T)\n    where\n        T: Serialize<N>,\n    {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_public_log(Serialize::serialize(log).as_slice()) };\n    }\n\n    pub fn note_hash_exists(_self: Self, note_hash: Field, leaf_index: Field) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { note_hash_exists(note_hash, leaf_index) } == 1\n    }\n\n    pub fn l1_to_l2_msg_exists(_self: Self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { l1_to_l2_msg_exists(msg_hash, msg_leaf_index) } == 1\n    }\n\n    pub fn nullifier_exists(_self: Self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { nullifier_exists(unsiloed_nullifier, address.to_field()) } == 1\n    }\n\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_l1_to_l2_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/\n            self.this_address(),\n            self.version(),\n            content,\n            secret_hash,\n            leaf_index,\n        );\n        let nullifier = compute_l1_to_l2_message_nullifier(message_hash, secret);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()),\n            \"L1-to-L2 message is already nullified\",\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index),\n            \"Tried to consume nonexistent L1-to-L2 message\",\n        );\n\n        self.push_nullifier(nullifier);\n    }\n\n    pub fn message_portal(_self: &mut Self, recipient: EthAddress, content: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { send_l2_to_l1_msg(recipient, content) };\n    }\n\n    pub unconstrained fn call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let calldata = args.push_front(function_selector.to_field());\n\n        call(\n            gas_opts.l2_gas.unwrap_or(MAX_U32_VALUE),\n            gas_opts.da_gas.unwrap_or(MAX_U32_VALUE),\n            contract_address,\n            calldata,\n        );\n        // Use success_copy to determine whether the call succeeded\n        let success = success_copy();\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub unconstrained fn static_call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let calldata = args.push_front(function_selector.to_field());\n\n        call_static(\n            gas_opts.l2_gas.unwrap_or(MAX_U32_VALUE),\n            gas_opts.da_gas.unwrap_or(MAX_U32_VALUE),\n            contract_address,\n            calldata,\n        );\n        // Use success_copy to determine whether the call succeeded\n        let success = success_copy();\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub fn push_note_hash(_self: &mut Self, note_hash: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_note_hash(note_hash) };\n    }\n    pub fn push_nullifier(_self: &mut Self, nullifier: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_nullifier(nullifier) };\n    }\n\n    pub fn this_address(_self: Self) -> AztecAddress {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            address()\n        }\n    }\n    pub fn msg_sender(_self: Self) -> AztecAddress {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            sender()\n        }\n    }\n    pub fn selector(_self: Self) -> FunctionSelector {\n        // The selector is the first element of the calldata when calling a public function through dispatch.\n        // Safety: AVM opcodes are constrained by the AVM itself\n        let raw_selector: [Field; 1] = unsafe { calldata_copy(0, 1) };\n        FunctionSelector::from_field(raw_selector[0])\n    }\n    pub fn get_args_hash(mut self) -> Field {\n        if !self.args_hash.is_some() {\n            self.args_hash = Option::some((self.compute_args_hash)());\n        }\n\n        self.args_hash.unwrap_unchecked()\n    }\n    pub fn transaction_fee(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            transaction_fee()\n        }\n    }\n\n    pub fn chain_id(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            chain_id()\n        }\n    }\n    pub fn version(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            version()\n        }\n    }\n    pub fn block_number(_self: Self) -> u32 {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            block_number()\n        }\n    }\n    pub fn timestamp(_self: Self) -> u64 {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            timestamp()\n        }\n    }\n    pub fn fee_per_l2_gas(_self: Self) -> u128 {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_l2_gas()\n        }\n    }\n    pub fn fee_per_da_gas(_self: Self) -> u128 {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_da_gas()\n        }\n    }\n\n    pub fn l2_gas_left(_self: Self) -> u32 {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            l2_gas_left()\n        }\n    }\n    pub fn da_gas_left(_self: Self) -> u32 {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            da_gas_left()\n        }\n    }\n    pub fn is_static_call(_self: Self) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { is_static_call() } == 1\n    }\n\n    pub fn raw_storage_read<let N: u32>(_self: Self, storage_slot: Field) -> [Field; N] {\n        let mut out = [0; N];\n        for i in 0..N {\n            // Safety: AVM opcodes are constrained by the AVM itself\n            out[i] = unsafe { storage_read(storage_slot + i as Field) };\n        }\n        out\n    }\n\n    pub fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n\n    pub fn raw_storage_write<let N: u32>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        for i in 0..N {\n            // Safety: AVM opcodes are constrained by the AVM itself\n            unsafe { storage_write(storage_slot + i as Field, values[i]) };\n        }\n    }\n\n    pub fn storage_write<T, let N: u32>(self, storage_slot: Field, value: T)\n    where\n        T: Packable<N>,\n    {\n        self.raw_storage_write(storage_slot, value.pack());\n    }\n}\n\n// Unconstrained opcode wrappers (do not use directly).\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> u32 {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn fee_per_l2_gas() -> u128 {\n    fee_per_l2_gas_opcode()\n}\nunconstrained fn fee_per_da_gas() -> u128 {\n    fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> u32 {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> u32 {\n    da_gas_left_opcode()\n}\nunconstrained fn is_static_call() -> Field {\n    is_static_call_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u1 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u1 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_public_log(message: [Field]) {\n    emit_public_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u1 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\nunconstrained fn call(\n    l2_gas_allocation: u32,\n    da_gas_allocation: u32,\n    address: AztecAddress,\n    args: [Field],\n) {\n    call_opcode(l2_gas_allocation, da_gas_allocation, address, args)\n}\n\nunconstrained fn call_static(\n    l2_gas_allocation: u32,\n    da_gas_allocation: u32,\n    address: AztecAddress,\n    args: [Field],\n) {\n    call_static_opcode(l2_gas_allocation, da_gas_allocation, address, args)\n}\n\npub unconstrained fn calldata_copy<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {\n    calldata_copy_opcode(cdoffset, copy_size)\n}\n\n// `success_copy` is placed immediately after the CALL opcode to get the success value\nunconstrained fn success_copy() -> bool {\n    success_copy_opcode()\n}\n\nunconstrained fn returndata_size() -> u32 {\n    returndata_size_opcode()\n}\n\nunconstrained fn returndata_copy(rdoffset: u32, copy_size: u32) -> [Field] {\n    returndata_copy_opcode(rdoffset, copy_size)\n}\n\npub unconstrained fn avm_return(returndata: [Field]) {\n    return_opcode(returndata)\n}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\nunconstrained fn avm_revert(revertdata: [Field]) {\n    revert_opcode(revertdata)\n}\n\nunconstrained fn storage_read(storage_slot: Field) -> Field {\n    storage_read_opcode(storage_slot)\n}\n\nunconstrained fn storage_write(storage_slot: Field, value: Field) {\n    storage_write_opcode(storage_slot, value);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(|| 0)\n    }\n}\n\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> u32 {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeFeePerL2Gas)]\nunconstrained fn fee_per_l2_gas_opcode() -> u128 {}\n\n#[oracle(avmOpcodeFeePerDaGas)]\nunconstrained fn fee_per_da_gas_opcode() -> u128 {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> u32 {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> u32 {}\n\n#[oracle(avmOpcodeIsStaticCall)]\nunconstrained fn is_static_call_opcode() -> Field {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n// TODO(#11124): rename unencrypted to public in avm\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_public_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCalldataCopy)]\nunconstrained fn calldata_copy_opcode<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {}\n\n#[oracle(avmOpcodeReturndataSize)]\nunconstrained fn returndata_size_opcode() -> u32 {}\n\n#[oracle(avmOpcodeReturndataCopy)]\nunconstrained fn returndata_copy_opcode(rdoffset: u32, copy_size: u32) -> [Field] {}\n\n#[oracle(avmOpcodeReturn)]\nunconstrained fn return_opcode(returndata: [Field]) {}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\n#[oracle(avmOpcodeRevert)]\nunconstrained fn revert_opcode(revertdata: [Field]) {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode(\n    l2_gas_allocation: u32,\n    da_gas_allocation: u32,\n    address: AztecAddress,\n    args: [Field],\n) {}\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode(\n    l2_gas_allocation: u32,\n    da_gas_allocation: u32,\n    address: AztecAddress,\n    args: [Field],\n) {}\n\n#[oracle(avmOpcodeSuccessCopy)]\nunconstrained fn success_copy_opcode() -> bool {}\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode(storage_slot: Field) -> Field {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode(storage_slot: Field, value: Field) {}\n"
    },
    "71": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v1.0.0-staging.6/noir-projects/aztec-nr/aztec/src/context/returns_hash.nr",
      "source": "use crate::{hash::hash_args_array, oracle::execution_cache};\nuse dep::protocol_types::traits::Deserialize;\n\npub struct ReturnsHash {\n    hash: Field,\n}\n\nimpl ReturnsHash {\n    pub fn new(hash: Field) -> Self {\n        ReturnsHash { hash }\n    }\n\n    pub fn assert_empty(self) {\n        assert_eq(self.hash, 0);\n    }\n\n    pub fn raw(self) -> Field {\n        self.hash\n    }\n\n    /// This is only used during private execution, since in public it is the VM itself that keeps track of return\n    /// values.\n    pub fn get_preimage<T, let N: u32>(self) -> T\n    where\n        T: Deserialize<N>,\n    {\n        // Safety: We verify that the value returned by `load` is the preimage of `hash`, fully constraining it.\n        let preimage: [Field; N] = unsafe { execution_cache::load(self.hash) };\n        assert_eq(self.hash, hash_args_array(preimage));\n\n        Deserialize::deserialize(preimage)\n    }\n\n    pub fn get_preimage_and_assert_empty<T, let N: u32>(self) -> T\n    where\n        T: Deserialize<N>,\n    {\n        // Safety: We verify that the value returned by `load` is the preimage of `hash`, fully constraining it.\n        let preimage: [Field; N] = unsafe { execution_cache::load(self.hash) };\n        assert_eq(self.hash, hash_args_array(preimage));\n        assert_eq(self.hash, 0);\n\n        Deserialize::deserialize(preimage)\n    }\n}\n"
    },
    "72": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v1.0.0-staging.6/noir-projects/aztec-nr/aztec/src/context/utility_context.nr",
      "source": "use crate::oracle::{\n    execution::{get_block_number, get_chain_id, get_contract_address, get_timestamp, get_version},\n    storage::storage_read,\n};\nuse dep::protocol_types::{address::AztecAddress, traits::Packable};\n\npub struct UtilityContext {\n    block_number: u32,\n    timestamp: u64,\n    contract_address: AztecAddress,\n    version: Field,\n    chain_id: Field,\n}\n\nimpl UtilityContext {\n    pub unconstrained fn new() -> Self {\n        // We could call these oracles on the getters instead of at creation, which makes sense given that they might\n        // not even be accessed. However any performance gains are minimal, and we'd rather fail early if a user\n        // incorrectly attempts to create a UtilityContext in an environment in which these oracles are not\n        // available.\n        let block_number = get_block_number();\n        let timestamp = get_timestamp();\n        let contract_address = get_contract_address();\n        let version = get_version();\n        let chain_id = get_chain_id();\n        Self { block_number, timestamp, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at(contract_address: AztecAddress) -> Self {\n        let block_number = get_block_number();\n        let timestamp = get_timestamp();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, timestamp, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at_historical(contract_address: AztecAddress, block_number: u32) -> Self {\n        let timestamp = get_timestamp();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, timestamp, contract_address, version, chain_id }\n    }\n\n    pub fn block_number(self) -> u32 {\n        self.block_number\n    }\n\n    pub fn timestamp(self) -> u64 {\n        self.timestamp\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.contract_address\n    }\n\n    pub fn version(self) -> Field {\n        self.version\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.chain_id\n    }\n\n    pub unconstrained fn raw_storage_read<let N: u32>(\n        self: Self,\n        storage_slot: Field,\n    ) -> [Field; N] {\n        storage_read(self.this_address(), storage_slot, self.block_number())\n    }\n\n    pub unconstrained fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n}\n"
    },
    "75": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v1.0.0-staging.6/noir-projects/aztec-nr/aztec/src/event/event_selector.nr",
      "source": "use dep::protocol_types::{\n    hash::poseidon2_hash_bytes,\n    traits::{Deserialize, Empty, FromField, Serialize, ToField},\n};\n\npub struct EventSelector {\n    // 1st 4-bytes (big-endian leftmost) of abi-encoding of an event.\n    // TODO(#2707): Consider making this a u64 as we already cast this to that when encoding the message. This would decrease\n    // the likelihood of collisions without any extra cost.\n    inner: u32,\n}\n\nimpl Eq for EventSelector {\n    fn eq(self, other: EventSelector) -> bool {\n        other.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for EventSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for EventSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for EventSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for EventSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for EventSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl EventSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = poseidon2_hash_bytes(bytes);\n\n        // `hash` is automatically truncated to fit within 32 bits.\n        EventSelector::from_field(hash)\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n"
    },
    "77": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v1.0.0-staging.6/noir-projects/aztec-nr/aztec/src/hash.nr",
      "source": "use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{\n        GENERATOR_INDEX__FUNCTION_ARGS, GENERATOR_INDEX__MESSAGE_NULLIFIER,\n        GENERATOR_INDEX__PUBLIC_BYTECODE, GENERATOR_INDEX__PUBLIC_CALLDATA,\n        GENERATOR_INDEX__SECRET_HASH, MAX_PACKED_PUBLIC_BYTECODE_SIZE_IN_FIELDS,\n    },\n    hash::{\n        poseidon2_hash_subarray, poseidon2_hash_with_separator, poseidon2_hash_with_separator_slice,\n        sha256_to_field,\n    },\n    point::Point,\n    traits::{Hash, ToField},\n};\n\npub use dep::protocol_types::hash::{compute_siloed_nullifier, pedersen_hash};\n\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_l1_to_l2_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field,\n    leaf_index: Field,\n) -> Field {\n    let mut hash_bytes = [0 as u8; 224];\n    let sender_bytes: [u8; 32] = sender.to_field().to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let version_bytes: [u8; 32] = version.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let secret_hash_bytes: [u8; 32] = secret_hash.to_be_bytes();\n    let leaf_index_bytes: [u8; 32] = leaf_index.to_be_bytes();\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n        hash_bytes[i + 192] = leaf_index_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret\npub fn compute_l1_to_l2_message_nullifier(message_hash: Field, secret: Field) -> Field {\n    poseidon2_hash_with_separator([message_hash, secret], GENERATOR_INDEX__MESSAGE_NULLIFIER)\n}\n\npub struct ArgsHasher {\n    pub fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\n// Computes the hash of input arguments or return values for private functions, or for authwit creation.\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n// Same as `hash_args_array`, but takes a slice instead of an array.\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n// Computes the hash of calldata for public functions.\npub fn hash_calldata_array<let N: u32>(calldata: [Field; N]) -> Field {\n    if calldata.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(calldata, GENERATOR_INDEX__PUBLIC_CALLDATA)\n    }\n}\n\n// Same as `hash_calldata_array`, but takes a slice instead of an array.\npub fn hash_calldata(calldata: [Field]) -> Field {\n    if calldata.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(calldata, GENERATOR_INDEX__PUBLIC_CALLDATA)\n    }\n}\n\n/**\n * Computes the public bytecode commitment for a contract class.\n * The commitment is `hash([separator, ...bytecode])` where bytecode omits the length prefix present\n * in `packed_bytecode`.\n *\n * @param packed_bytecode - The packed bytecode of the contract class. 0th word is the length in bytes.\n *    packed_bytecode is mutable so that we can avoid copying the array to construct one starting with\n *    separator instead of length.\n * @returns The public bytecode commitment.\n */\npub fn compute_public_bytecode_commitment(\n    mut packed_public_bytecode: [Field; MAX_PACKED_PUBLIC_BYTECODE_SIZE_IN_FIELDS],\n) -> Field {\n    // First field element contains the length of the bytecode\n    let bytecode_length_in_bytes: u32 = packed_public_bytecode[0] as u32;\n    let bytecode_length_in_fields: u32 =\n        (bytecode_length_in_bytes / 31) + (bytecode_length_in_bytes % 31 != 0) as u32;\n    // Don't allow empty public bytecode.\n    // AVM doesn't handle execution of contracts that exist with empty bytecode.\n    assert(bytecode_length_in_fields != 0);\n    assert(bytecode_length_in_fields < MAX_PACKED_PUBLIC_BYTECODE_SIZE_IN_FIELDS);\n\n    // Packed_bytecode's 0th entry is the length. Replace it with separator before hashing.\n    let separator = GENERATOR_INDEX__PUBLIC_BYTECODE.to_field();\n    packed_public_bytecode[0] = separator;\n    // +1 to length to account for the separator\n    let nonzero_length = bytecode_length_in_fields + 1;\n\n    poseidon2_hash_subarray(packed_public_bytecode, nonzero_length)\n    // NOTE: we use poseidon2_hash_subarray here because we want to hash the bytecode only up to\n    // its nonzero length. We do NOT want to include a `1` at the end to indicate \"variable length\",\n    // and we want to enforce that all trailing elements are zero.\n}\n\n#[test]\nunconstrained fn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..100 {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    dep::std::println(hash);\n    assert(hash == 0x19b0d74feb06ebde19edd85a28986c97063e84b3b351a8b666c7cac963ce655f);\n}\n"
    },
    "94": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v1.0.0-staging.6/noir-projects/aztec-nr/aztec/src/keys/getters/mod.nr",
      "source": "use crate::{\n    keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX},\n    oracle::{\n        key_validation_request::get_key_validation_request,\n        keys::get_public_keys_and_partial_address,\n    },\n};\nuse dep::protocol_types::{address::AztecAddress, public_keys::PublicKeys};\n\nmod test;\n\npub unconstrained fn get_nsk_app(npk_m_hash: Field) -> Field {\n    get_key_validation_request(npk_m_hash, NULLIFIER_INDEX).sk_app\n}\n\n// A helper function that gets app-siloed outgoing viewing key for a given `ovpk_m_hash`. This function is used\n// in unconstrained contexts only - when computing unconstrained note logs. The safe alternative is `request_ovsk_app`\n// function defined on `PrivateContext`.\npub unconstrained fn get_ovsk_app(ovpk_m_hash: Field) -> Field {\n    get_key_validation_request(ovpk_m_hash, OUTGOING_INDEX).sk_app\n}\n\n// Returns all public keys for a given account, applying proper constraints to the context. We read all\n// keys at once since the constraints for reading them all are actually fewer than if we read them one at a time - any\n// read keys that are not required by the caller can simply be discarded.\npub fn get_public_keys(account: AztecAddress) -> PublicKeys {\n    // Safety: Public keys are constrained by showing their inclusion in the address's preimage.\n    let (public_keys, partial_address) = unsafe { get_public_keys_and_partial_address(account) };\n    assert_eq(\n        account,\n        AztecAddress::compute(public_keys, partial_address),\n        \"Invalid public keys hint for address\",\n    );\n\n    public_keys\n}\n"
    },
    "99": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v1.0.0-staging.6/noir-projects/aztec-nr/aztec/src/macros/aztec.nr",
      "source": "use crate::{\n    macros::{\n        authwits::AUTHWIT_TYPES,\n        dispatch::generate_public_dispatch,\n        functions::{stub_registry, utils::check_each_fn_macroified},\n        notes::{generate_note_export, NOTES},\n        storage::STORAGE_LAYOUT_NAME,\n        utils::{get_trait_impl_method, module_has_storage},\n    },\n    messages::discovery::private_notes::MAX_NOTE_PACKED_LEN,\n};\n\n/// Marks a contract as an Aztec contract, generating the interfaces for its functions and notes, as well as injecting\n/// the `sync_private_state` utility function.\n/// Note: This is a module annotation, so the returned quote gets injected inside the module (contract) itself.\npub comptime fn aztec(m: Module) -> Quoted {\n    let interface = generate_contract_interface(m);\n\n    // Functions that don't have #[private], #[public], #[utility], #[contract_library_method], or #[test] are not\n    // allowed in contracts.\n    check_each_fn_macroified(m);\n\n    let contract_library_method_compute_note_hash_and_nullifier =\n        generate_contract_library_method_compute_note_hash_and_nullifier();\n    let note_exports = generate_note_exports();\n    let public_dispatch = generate_public_dispatch(m);\n    let sync_private_state = generate_sync_private_state();\n    let process_message = generate_process_message();\n    generate_authwit_exports();\n\n    quote {\n        $note_exports\n        $interface\n        $contract_library_method_compute_note_hash_and_nullifier\n        $public_dispatch\n        $sync_private_state\n        $process_message\n    }\n}\n\ncomptime fn generate_contract_interface(m: Module) -> Quoted {\n    let module_name = m.name();\n    let contract_stubs = stub_registry::get(m);\n    let fn_stubs_quote = if contract_stubs.is_some() {\n        contract_stubs.unwrap().join(quote {})\n    } else {\n        quote {}\n    };\n\n    let has_storage_layout = module_has_storage(m) & STORAGE_LAYOUT_NAME.get(m).is_some();\n    let storage_layout_getter = if has_storage_layout {\n        let storage_layout_name = STORAGE_LAYOUT_NAME.get(m).unwrap();\n        quote {\n            pub fn storage_layout() -> StorageLayoutFields {\n                $storage_layout_name.fields\n            }\n        }\n    } else {\n        quote {}\n    };\n\n    let library_storage_layout_getter = if has_storage_layout {\n        quote {\n            #[contract_library_method]\n            $storage_layout_getter\n        }\n    } else {\n        quote {}\n    };\n\n    quote {\n        pub struct $module_name {\n            pub target_contract: dep::aztec::protocol_types::address::AztecAddress\n        }\n\n        impl $module_name {\n            $fn_stubs_quote\n\n            pub fn at(\n                addr: aztec::protocol_types::address::AztecAddress\n            ) -> Self {\n                Self { target_contract: addr }\n            }\n\n            pub fn interface() -> Self {\n                Self { target_contract: aztec::protocol_types::address::AztecAddress::zero() }\n            }\n\n            $storage_layout_getter\n        }\n\n        #[contract_library_method]\n        pub fn at(\n            addr: aztec::protocol_types::address::AztecAddress\n        ) -> $module_name {\n            $module_name { target_contract: addr }\n        }\n\n        #[contract_library_method]\n        pub fn interface() -> $module_name {\n            $module_name { target_contract: aztec::protocol_types::address::AztecAddress::zero() }\n        }\n\n        $library_storage_layout_getter\n\n    }\n}\n\n/// Generates a contract library method called `_compute_note_hash_and_nullifier` which is used for note\n/// discovery (to create the `aztec::messages::discovery::ComputeNoteHashAndNullifier` function) and to implement the\n/// `compute_note_hash_and_nullifier` unconstrained contract function.\ncomptime fn generate_contract_library_method_compute_note_hash_and_nullifier() -> Quoted {\n    let notes = NOTES.entries();\n\n    if notes.len() > 0 {\n        let max_note_packed_len = notes.fold(\n            0,\n            |acc, (_, (_, len, _, _)): (Type, (TypeDefinition, u32, Field, [(Quoted, u32, bool)]))| {\n                if len > acc {\n                    len\n                } else {\n                    acc\n                }\n            },\n        );\n\n        if max_note_packed_len > MAX_NOTE_PACKED_LEN {\n            panic(\n                f\"One of the notes has packed len {max_note_packed_len} but the maximum is {MAX_NOTE_PACKED_LEN}\",\n            );\n        }\n\n        // Contracts that do define notes produce an if-else chain where `note_type_id` is matched against the\n        // `get_note_type_id()` function of each note type that we know of, in order to identify the note type. Once we\n        // know it we call we correct `unpack` method from the `Packable` trait to obtain the underlying note type, and\n        // compute the note hash (non-siloed) and inner nullifier (also non-siloed).\n\n        let mut if_note_type_id_match_statements_list = &[];\n        for i in 0..notes.len() {\n            let (typ, (_, packed_note_length, _, _)) = notes[i];\n\n            let get_note_type_id = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteType },\n                quote { get_id },\n            );\n            let unpack = get_trait_impl_method(\n                typ,\n                quote { crate::protocol_types::traits::Packable<_> },\n                quote { unpack },\n            );\n\n            let compute_note_hash = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteHash },\n                quote { compute_note_hash },\n            );\n\n            let compute_nullifier_unconstrained = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteHash },\n                quote { compute_nullifier_unconstrained },\n            );\n\n            let if_or_else_if = if i == 0 {\n                quote { if }\n            } else {\n                quote { else if }\n            };\n\n            if_note_type_id_match_statements_list = if_note_type_id_match_statements_list.push_back(\n                quote {\n                    $if_or_else_if note_type_id == $get_note_type_id() {\n                        // As an extra safety check we make sure that the packed_note BoundedVec has the expected\n                        // length, since we're about to interpret it's raw storage as a fixed-size array by calling the\n                        // unpack function on it.\n                        let expected_len = $packed_note_length;\n                        let actual_len = packed_note.len();\n                        assert(\n                            actual_len == expected_len,\n                            f\"Expected packed note of length {expected_len} but got {actual_len} for note type id {note_type_id}\"\n                        );\n\n                        let note = $unpack(aztec::utils::array::subarray(packed_note.storage(), 0));\n\n                        let note_hash = $compute_note_hash(note, storage_slot);\n    \n                        // The message discovery process finds settled notes, that is, notes that were created in prior\n                        // transactions and are therefore already part of the note hash tree. We therefore compute the\n                        // nullification note hash by treating the note as a settled note with the provided note nonce.\n                        let note_hash_for_nullify = aztec::note::utils::compute_note_hash_for_nullify(\n                            aztec::note::retrieved_note::RetrievedNote{ \n                                note, \n                                contract_address, \n                                metadata: aztec::note::note_metadata::SettledNoteMetadata::new(note_nonce).into()\n                            }, \n                            storage_slot,\n                        );\n\n                        let inner_nullifier = $compute_nullifier_unconstrained(note, note_hash_for_nullify);\n\n                        Option::some(\n                            aztec::messages::discovery::NoteHashAndNullifier {\n                                note_hash, inner_nullifier\n                            }\n                        )\n                    }\n                },\n            );\n        }\n\n        let if_note_type_id_match_statements = if_note_type_id_match_statements_list.join(quote {});\n\n        quote {\n            /// Unpacks an array into a note corresponding to `note_type_id` and then computes its note hash\n            /// (non-siloed) and inner nullifier (non-siloed) assuming the note has been inserted into the note hash\n            /// tree with `note_nonce`.\n            ///\n            /// The signature of this function notably matches the `aztec::messages::discovery::ComputeNoteHashAndNullifier` type,\n            /// and so it can be used to call functions from that module such as `discover_new_messages`, \n            /// `do_process_log` and `attempt_note_discovery`.\n            ///\n            /// This function is automatically injected by the `#[aztec]` macro.\n            #[contract_library_method]\n            unconstrained fn _compute_note_hash_and_nullifier(\n                packed_note: BoundedVec<Field, aztec::messages::discovery::private_notes::MAX_NOTE_PACKED_LEN>,\n                storage_slot: Field,\n                note_type_id: Field,\n                contract_address: aztec::protocol_types::address::AztecAddress,\n                note_nonce: Field,\n            ) -> Option<aztec::messages::discovery::NoteHashAndNullifier> {\n                $if_note_type_id_match_statements\n                else {\n                    Option::none()\n                }\n            }\n        }\n    } else {\n        // Contracts with no notes still implement this function to avoid having special-casing, the implementation\n        // simply throws immediately.\n        quote {\n            /// This contract does not use private notes, so this function should never be called as it will\n            /// unconditionally fail.\n            ///\n            /// This function is automatically injected by the `#[aztec]` macro.\n            #[contract_library_method]\n            unconstrained fn _compute_note_hash_and_nullifier(\n                _packed_note: BoundedVec<Field, aztec::messages::discovery::private_notes::MAX_NOTE_PACKED_LEN>,\n                _storage_slot: Field,\n                _note_type_id: Field,\n                _contract_address: aztec::protocol_types::address::AztecAddress,\n                _nonce: Field,\n            ) -> Option<aztec::messages::discovery::NoteHashAndNullifier> {\n                panic(f\"This contract does not use private notes\")\n            }\n        }\n    }\n}\n\ncomptime fn generate_authwit_exports() {\n    let authwits = AUTHWIT_TYPES.values();\n    authwits.for_each(|(s): TypeDefinition| { s.add_attribute(\"abi(authwits)\"); });\n}\n\ncomptime fn generate_note_exports() -> Quoted {\n    let notes = NOTES.values();\n    // Second value in each tuple is `note_packed_len` and that is ignored here because it's only used when\n    // generating partial note helper functions.\n    notes\n        .map(|(s, _, note_type_id, fields): (TypeDefinition, u32, Field, [(Quoted, u32, bool)])| {\n            generate_note_export(s, note_type_id, fields)\n        })\n        .join(quote {})\n}\n\ncomptime fn generate_sync_private_state() -> Quoted {\n    // We obtain the `utility` function on the next line instead of directly doing\n    // `#[aztec::macros::functions::utility]` in the returned quote because the latter would result in the function\n    // attribute having the full path in the ABI. This is undesirable because we use the information in the ABI only\n    // to determine whether a function is `private`, `public`, or `utility`.\n    let utility = crate::macros::functions::utility;\n\n    // All we need to do here is trigger message discovery, but this is already done by the #[utility] macro - we don't\n    // need to do anything extra.\n    quote {\n        #[$utility]\n        unconstrained fn sync_private_state() {\n        }\n    }\n}\n\ncomptime fn generate_process_message() -> Quoted {\n    // We obtain the `utility` function on the next line instead of directly doing\n    // `#[aztec::macros::functions::utility]` in the returned quote because the latter would result in the function\n    // attribute having the full path in the ABI. This is undesirable because we use the information in the ABI only\n    // to determine whether a function is `private`, `public`, or `utility`.\n    let utility = crate::macros::functions::utility;\n\n    // TODO(#15012): Here we use PRIVATE_LOG_CIPHERTEXT_LEN for message ciphertext length. Fix message vs log naming.\n    quote {\n        #[$utility]\n        unconstrained fn process_message(\n            message_ciphertext: BoundedVec<Field, aztec::protocol_types::constants::PRIVATE_LOG_CIPHERTEXT_LEN>,\n            message_context: aztec::messages::processing::message_context::MessageContext,\n        ) {\n            aztec::messages::discovery::process_message::do_process_message(\n                context.this_address(),\n                _compute_note_hash_and_nullifier,\n                message_ciphertext,\n                message_context,\n            );\n        }\n    }\n}\n"
    }
  }
}
